
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e958  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f0c  0800eb08  0800eb08  0001eb08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a14  08010a14  00030348  2**0
                  CONTENTS
  4 .ARM          00000008  08010a14  08010a14  00020a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a1c  08010a1c  00030348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a1c  08010a1c  00020a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a20  08010a20  00020a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000348  20000000  08010a24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030348  2**0
                  CONTENTS
 10 .bss          00001f3c  20000348  20000348  00030348  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  20002284  20002284  00030348  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030348  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb3d  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000485d  00000000  00000000  0004beb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  00050718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001570  00000000  00000000  00051eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a11a  00000000  00000000  00053420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eceb  00000000  00000000  0007d53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4e7c  00000000  00000000  0009c225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001810a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000725c  00000000  00000000  001810f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000348 	.word	0x20000348
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800eaf0 	.word	0x0800eaf0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000034c 	.word	0x2000034c
 80001ec:	0800eaf0 	.word	0x0800eaf0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	0000      	movs	r0, r0
	...

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f78:	f002 f98c 	bl	8003294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7c:	f000 f9fa 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f80:	f000 fa98 	bl	80014b4 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000f84:	f000 fa60 	bl	8001448 <MX_SPI5_Init>
  MX_USB_DEVICE_Init();
 8000f88:	f00a f982 	bl	800b290 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8000f8c:	f001 fb82 	bl	8002694 <BSP_LCD_Init>
  BSP_GYRO_Init();
 8000f90:	f001 fb06 	bl	80025a0 <BSP_GYRO_Init>
  //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000f94:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f001 fbfd 	bl	8002798 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f001 fc5e 	bl	8002860 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000fa4:	f001 fe68 	bl	8002c78 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8000fa8:	48c1      	ldr	r0, [pc, #772]	; (80012b0 <main+0x340>)
 8000faa:	f001 fcb5 	bl	8002918 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000fae:	48c0      	ldr	r0, [pc, #768]	; (80012b0 <main+0x340>)
 8000fb0:	f001 fc7e 	bl	80028b0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f001 fc62 	bl	8002880 <BSP_LCD_SetTextColor>
	  /*BSP_LCD_FillTriangle(120,95,145,10,50,50); //phia tren
	  BSP_LCD_FillTriangle(5,45,45,160,135,185); //ben trai
	  BSP_LCD_FillTriangle(235,195,195,160,135,185); //ben phai
	  BSP_LCD_FillTriangle(120,95,145,310,270,270); //phia duoi*/
	  //startInt = mymillis();
	  BSP_GYRO_GetXYZ(val);
 8000fbc:	48bd      	ldr	r0, [pc, #756]	; (80012b4 <main+0x344>)
 8000fbe:	f001 fb55 	bl	800266c <BSP_GYRO_GetXYZ>

	  rate_gyr_x = val[0]  * G_GAIN;
 8000fc2:	4bbc      	ldr	r3, [pc, #752]	; (80012b4 <main+0x344>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff face 	bl	8000568 <__aeabi_f2d>
 8000fcc:	a3b4      	add	r3, pc, #720	; (adr r3, 80012a0 <main+0x330>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fb21 	bl	8000618 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff fdf3 	bl	8000bc8 <__aeabi_d2f>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4ab4      	ldr	r2, [pc, #720]	; (80012b8 <main+0x348>)
 8000fe6:	6013      	str	r3, [r2, #0]
	  rate_gyr_y = val[1]  * G_GAIN;
 8000fe8:	4bb2      	ldr	r3, [pc, #712]	; (80012b4 <main+0x344>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fabb 	bl	8000568 <__aeabi_f2d>
 8000ff2:	a3ab      	add	r3, pc, #684	; (adr r3, 80012a0 <main+0x330>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff fb0e 	bl	8000618 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f7ff fde0 	bl	8000bc8 <__aeabi_d2f>
 8001008:	4603      	mov	r3, r0
 800100a:	4aac      	ldr	r2, [pc, #688]	; (80012bc <main+0x34c>)
 800100c:	6013      	str	r3, [r2, #0]
	  rate_gyr_z = val[2]  * G_GAIN;
 800100e:	4ba9      	ldr	r3, [pc, #676]	; (80012b4 <main+0x344>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff faa8 	bl	8000568 <__aeabi_f2d>
 8001018:	a3a1      	add	r3, pc, #644	; (adr r3, 80012a0 <main+0x330>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff fafb 	bl	8000618 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fdcd 	bl	8000bc8 <__aeabi_d2f>
 800102e:	4603      	mov	r3, r0
 8001030:	4aa3      	ldr	r2, [pc, #652]	; (80012c0 <main+0x350>)
 8001032:	6013      	str	r3, [r2, #0]

	  gyroXangle+=rate_gyr_x*DT;
 8001034:	4ba3      	ldr	r3, [pc, #652]	; (80012c4 <main+0x354>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa95 	bl	8000568 <__aeabi_f2d>
 800103e:	4604      	mov	r4, r0
 8001040:	460d      	mov	r5, r1
 8001042:	4b9d      	ldr	r3, [pc, #628]	; (80012b8 <main+0x348>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa8e 	bl	8000568 <__aeabi_f2d>
 800104c:	a396      	add	r3, pc, #600	; (adr r3, 80012a8 <main+0x338>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff fae1 	bl	8000618 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4620      	mov	r0, r4
 800105c:	4629      	mov	r1, r5
 800105e:	f7ff f925 	bl	80002ac <__adddf3>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fdad 	bl	8000bc8 <__aeabi_d2f>
 800106e:	4603      	mov	r3, r0
 8001070:	4a94      	ldr	r2, [pc, #592]	; (80012c4 <main+0x354>)
 8001072:	6013      	str	r3, [r2, #0]
	  gyroYangle+=rate_gyr_y*DT;
 8001074:	4b94      	ldr	r3, [pc, #592]	; (80012c8 <main+0x358>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fa75 	bl	8000568 <__aeabi_f2d>
 800107e:	4604      	mov	r4, r0
 8001080:	460d      	mov	r5, r1
 8001082:	4b8e      	ldr	r3, [pc, #568]	; (80012bc <main+0x34c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fa6e 	bl	8000568 <__aeabi_f2d>
 800108c:	a386      	add	r3, pc, #536	; (adr r3, 80012a8 <main+0x338>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f7ff fac1 	bl	8000618 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4620      	mov	r0, r4
 800109c:	4629      	mov	r1, r5
 800109e:	f7ff f905 	bl	80002ac <__adddf3>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	f7ff fd8d 	bl	8000bc8 <__aeabi_d2f>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a85      	ldr	r2, [pc, #532]	; (80012c8 <main+0x358>)
 80010b2:	6013      	str	r3, [r2, #0]
	  gyroZangle+=rate_gyr_z*DT;
 80010b4:	4b85      	ldr	r3, [pc, #532]	; (80012cc <main+0x35c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fa55 	bl	8000568 <__aeabi_f2d>
 80010be:	4604      	mov	r4, r0
 80010c0:	460d      	mov	r5, r1
 80010c2:	4b7f      	ldr	r3, [pc, #508]	; (80012c0 <main+0x350>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa4e 	bl	8000568 <__aeabi_f2d>
 80010cc:	a376      	add	r3, pc, #472	; (adr r3, 80012a8 <main+0x338>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff faa1 	bl	8000618 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4620      	mov	r0, r4
 80010dc:	4629      	mov	r1, r5
 80010de:	f7ff f8e5 	bl	80002ac <__adddf3>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fd6d 	bl	8000bc8 <__aeabi_d2f>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a76      	ldr	r2, [pc, #472]	; (80012cc <main+0x35c>)
 80010f2:	6013      	str	r3, [r2, #0]

	  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80010f4:	486e      	ldr	r0, [pc, #440]	; (80012b0 <main+0x340>)
 80010f6:	f001 fc0f 	bl	8002918 <BSP_LCD_Clear>
	  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80010fa:	486d      	ldr	r0, [pc, #436]	; (80012b0 <main+0x340>)
 80010fc:	f001 fbd8 	bl	80028b0 <BSP_LCD_SetBackColor>

	  if ((tmpX - gyroXangle)>10){
 8001100:	4b73      	ldr	r3, [pc, #460]	; (80012d0 <main+0x360>)
 8001102:	ed93 7a00 	vldr	s14, [r3]
 8001106:	4b6f      	ldr	r3, [pc, #444]	; (80012c4 <main+0x354>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001110:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111c:	dd51      	ble.n	80011c2 <main+0x252>
		  if ((tmpY - gyroYangle) >10){
 800111e:	4b6d      	ldr	r3, [pc, #436]	; (80012d4 <main+0x364>)
 8001120:	ed93 7a00 	vldr	s14, [r3]
 8001124:	4b68      	ldr	r3, [pc, #416]	; (80012c8 <main+0x358>)
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800112e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113a:	dd17      	ble.n	800116c <main+0x1fc>
		  		BSP_LCD_FillTriangle(120,95,145,10,50,50); //phia tren + ben trai
 800113c:	2332      	movs	r3, #50	; 0x32
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	2332      	movs	r3, #50	; 0x32
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	230a      	movs	r3, #10
 8001146:	2291      	movs	r2, #145	; 0x91
 8001148:	215f      	movs	r1, #95	; 0x5f
 800114a:	2078      	movs	r0, #120	; 0x78
 800114c:	f001 fcd6 	bl	8002afc <BSP_LCD_FillTriangle>
		  		BSP_LCD_FillTriangle(5,45,45,160,135,185);
 8001150:	23b9      	movs	r3, #185	; 0xb9
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	2387      	movs	r3, #135	; 0x87
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	23a0      	movs	r3, #160	; 0xa0
 800115a:	222d      	movs	r2, #45	; 0x2d
 800115c:	212d      	movs	r1, #45	; 0x2d
 800115e:	2005      	movs	r0, #5
 8001160:	f001 fccc 	bl	8002afc <BSP_LCD_FillTriangle>
		  		HAL_Delay(250);
 8001164:	20fa      	movs	r0, #250	; 0xfa
 8001166:	f002 f907 	bl	8003378 <HAL_Delay>
 800116a:	e0b8      	b.n	80012de <main+0x36e>
		  }
		  else if ((gyroYangle - tmpY) >10){
 800116c:	4b56      	ldr	r3, [pc, #344]	; (80012c8 <main+0x358>)
 800116e:	ed93 7a00 	vldr	s14, [r3]
 8001172:	4b58      	ldr	r3, [pc, #352]	; (80012d4 <main+0x364>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001188:	dd17      	ble.n	80011ba <main+0x24a>
		  		BSP_LCD_FillTriangle(120,95,145,10,50,50); // phia tren + ben phai
 800118a:	2332      	movs	r3, #50	; 0x32
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	2332      	movs	r3, #50	; 0x32
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	230a      	movs	r3, #10
 8001194:	2291      	movs	r2, #145	; 0x91
 8001196:	215f      	movs	r1, #95	; 0x5f
 8001198:	2078      	movs	r0, #120	; 0x78
 800119a:	f001 fcaf 	bl	8002afc <BSP_LCD_FillTriangle>
		  		BSP_LCD_FillTriangle(235,195,195,160,135,185);
 800119e:	23b9      	movs	r3, #185	; 0xb9
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	2387      	movs	r3, #135	; 0x87
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	23a0      	movs	r3, #160	; 0xa0
 80011a8:	22c3      	movs	r2, #195	; 0xc3
 80011aa:	21c3      	movs	r1, #195	; 0xc3
 80011ac:	20eb      	movs	r0, #235	; 0xeb
 80011ae:	f001 fca5 	bl	8002afc <BSP_LCD_FillTriangle>
		  		HAL_Delay(250);
 80011b2:	20fa      	movs	r0, #250	; 0xfa
 80011b4:	f002 f8e0 	bl	8003378 <HAL_Delay>
 80011b8:	e091      	b.n	80012de <main+0x36e>
		  }
		  else
			  	HAL_Delay(250);
 80011ba:	20fa      	movs	r0, #250	; 0xfa
 80011bc:	f002 f8dc 	bl	8003378 <HAL_Delay>
 80011c0:	e08d      	b.n	80012de <main+0x36e>
	  }
	  else if ((gyroXangle - tmpX)>10){
 80011c2:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <main+0x354>)
 80011c4:	ed93 7a00 	vldr	s14, [r3]
 80011c8:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <main+0x360>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	dd7b      	ble.n	80012d8 <main+0x368>
		  if ((tmpY - gyroYangle) >10){
 80011e0:	4b3c      	ldr	r3, [pc, #240]	; (80012d4 <main+0x364>)
 80011e2:	ed93 7a00 	vldr	s14, [r3]
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <main+0x358>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	dd1d      	ble.n	800123a <main+0x2ca>
		  		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80011fe:	482c      	ldr	r0, [pc, #176]	; (80012b0 <main+0x340>)
 8001200:	f001 fb56 	bl	80028b0 <BSP_LCD_SetBackColor>
		  		BSP_LCD_FillTriangle(120,95,145,310,270,270); //phia duoi + ben trai
 8001204:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	f44f 739b 	mov.w	r3, #310	; 0x136
 8001214:	2291      	movs	r2, #145	; 0x91
 8001216:	215f      	movs	r1, #95	; 0x5f
 8001218:	2078      	movs	r0, #120	; 0x78
 800121a:	f001 fc6f 	bl	8002afc <BSP_LCD_FillTriangle>
		  		BSP_LCD_FillTriangle(5,45,45,160,135,185);
 800121e:	23b9      	movs	r3, #185	; 0xb9
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	2387      	movs	r3, #135	; 0x87
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	23a0      	movs	r3, #160	; 0xa0
 8001228:	222d      	movs	r2, #45	; 0x2d
 800122a:	212d      	movs	r1, #45	; 0x2d
 800122c:	2005      	movs	r0, #5
 800122e:	f001 fc65 	bl	8002afc <BSP_LCD_FillTriangle>
		  		HAL_Delay(250);
 8001232:	20fa      	movs	r0, #250	; 0xfa
 8001234:	f002 f8a0 	bl	8003378 <HAL_Delay>
 8001238:	e051      	b.n	80012de <main+0x36e>
		  }
		  else if ((gyroYangle - tmpY) >10){
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <main+0x358>)
 800123c:	ed93 7a00 	vldr	s14, [r3]
 8001240:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <main+0x364>)
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800124a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800124e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd1d      	ble.n	8001294 <main+0x324>
		  		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001258:	4815      	ldr	r0, [pc, #84]	; (80012b0 <main+0x340>)
 800125a:	f001 fb29 	bl	80028b0 <BSP_LCD_SetBackColor>
		  		BSP_LCD_FillTriangle(120,95,145,310,270,270); //phia duoi + ben phai
 800125e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	f44f 739b 	mov.w	r3, #310	; 0x136
 800126e:	2291      	movs	r2, #145	; 0x91
 8001270:	215f      	movs	r1, #95	; 0x5f
 8001272:	2078      	movs	r0, #120	; 0x78
 8001274:	f001 fc42 	bl	8002afc <BSP_LCD_FillTriangle>
		  		BSP_LCD_FillTriangle(235,195,195,160,135,185);
 8001278:	23b9      	movs	r3, #185	; 0xb9
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	2387      	movs	r3, #135	; 0x87
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	23a0      	movs	r3, #160	; 0xa0
 8001282:	22c3      	movs	r2, #195	; 0xc3
 8001284:	21c3      	movs	r1, #195	; 0xc3
 8001286:	20eb      	movs	r0, #235	; 0xeb
 8001288:	f001 fc38 	bl	8002afc <BSP_LCD_FillTriangle>
		  		HAL_Delay(250);
 800128c:	20fa      	movs	r0, #250	; 0xfa
 800128e:	f002 f873 	bl	8003378 <HAL_Delay>
 8001292:	e024      	b.n	80012de <main+0x36e>
		  	}
		  else
		  		HAL_Delay(250);
 8001294:	20fa      	movs	r0, #250	; 0xfa
 8001296:	f002 f86f 	bl	8003378 <HAL_Delay>
 800129a:	e020      	b.n	80012de <main+0x36e>
 800129c:	f3af 8000 	nop.w
 80012a0:	1eb851ec 	.word	0x1eb851ec
 80012a4:	3fb1eb85 	.word	0x3fb1eb85
 80012a8:	47ae147b 	.word	0x47ae147b
 80012ac:	3f847ae1 	.word	0x3f847ae1
 80012b0:	ff0000ff 	.word	0xff0000ff
 80012b4:	200003bc 	.word	0x200003bc
 80012b8:	200003ec 	.word	0x200003ec
 80012bc:	200003e8 	.word	0x200003e8
 80012c0:	200003f0 	.word	0x200003f0
 80012c4:	200003f4 	.word	0x200003f4
 80012c8:	200003f8 	.word	0x200003f8
 80012cc:	200003fc 	.word	0x200003fc
 80012d0:	20000400 	.word	0x20000400
 80012d4:	20000404 	.word	0x20000404
	  }
	  else
		  	 	HAL_Delay(250);
 80012d8:	20fa      	movs	r0, #250	; 0xfa
 80012da:	f002 f84d 	bl	8003378 <HAL_Delay>

	  tmpX = gyroXangle;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <main+0x3e4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <main+0x3e8>)
 80012e4:	6013      	str	r3, [r2, #0]
	  tmpY = gyroYangle;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <main+0x3ec>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <main+0x3f0>)
 80012ec:	6013      	str	r3, [r2, #0]

	  sprintf(LCD_send,"x = %f, y = %f, z = %f \n",gyroXangle,gyroYangle, gyroZangle);
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <main+0x3e4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f938 	bl	8000568 <__aeabi_f2d>
 80012f8:	4680      	mov	r8, r0
 80012fa:	4689      	mov	r9, r1
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <main+0x3ec>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f931 	bl	8000568 <__aeabi_f2d>
 8001306:	4604      	mov	r4, r0
 8001308:	460d      	mov	r5, r1
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <main+0x3f4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f92a 	bl	8000568 <__aeabi_f2d>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800131c:	e9cd 4500 	strd	r4, r5, [sp]
 8001320:	4642      	mov	r2, r8
 8001322:	464b      	mov	r3, r9
 8001324:	4910      	ldr	r1, [pc, #64]	; (8001368 <main+0x3f8>)
 8001326:	4811      	ldr	r0, [pc, #68]	; (800136c <main+0x3fc>)
 8001328:	f00b f96a 	bl	800c600 <siprintf>
	  CDC_Transmit_HS(LCD_send,strlen(LCD_send));
 800132c:	480f      	ldr	r0, [pc, #60]	; (800136c <main+0x3fc>)
 800132e:	f7fe ff5f 	bl	80001f0 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29b      	uxth	r3, r3
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <main+0x3fc>)
 800133a:	f00a f867 	bl	800b40c <CDC_Transmit_HS>

	 for (int i = 0;i<1500000;i++);
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	e002      	b.n	800134a <main+0x3da>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3301      	adds	r3, #1
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a08      	ldr	r2, [pc, #32]	; (8001370 <main+0x400>)
 800134e:	4293      	cmp	r3, r2
 8001350:	ddf8      	ble.n	8001344 <main+0x3d4>
  {
 8001352:	e633      	b.n	8000fbc <main+0x4c>
 8001354:	200003f4 	.word	0x200003f4
 8001358:	20000400 	.word	0x20000400
 800135c:	200003f8 	.word	0x200003f8
 8001360:	20000404 	.word	0x20000404
 8001364:	200003fc 	.word	0x200003fc
 8001368:	0800eb08 	.word	0x0800eb08
 800136c:	200003c8 	.word	0x200003c8
 8001370:	0016e35f 	.word	0x0016e35f

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b094      	sub	sp, #80	; 0x50
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 0320 	add.w	r3, r7, #32
 800137e:	2230      	movs	r2, #48	; 0x30
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f00a fcca 	bl	800bd1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <SystemClock_Config+0xcc>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	4a27      	ldr	r2, [pc, #156]	; (8001440 <SystemClock_Config+0xcc>)
 80013a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a6:	6413      	str	r3, [r2, #64]	; 0x40
 80013a8:	4b25      	ldr	r3, [pc, #148]	; (8001440 <SystemClock_Config+0xcc>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <SystemClock_Config+0xd0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a21      	ldr	r2, [pc, #132]	; (8001444 <SystemClock_Config+0xd0>)
 80013be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <SystemClock_Config+0xd0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d0:	2301      	movs	r3, #1
 80013d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013da:	2302      	movs	r3, #2
 80013dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013e4:	2308      	movs	r3, #8
 80013e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013f2:	2307      	movs	r3, #7
 80013f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f6:	f107 0320 	add.w	r3, r7, #32
 80013fa:	4618      	mov	r0, r3
 80013fc:	f004 fd6e 	bl	8005edc <HAL_RCC_OscConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001406:	f000 f8d9 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140a:	230f      	movs	r3, #15
 800140c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140e:	2302      	movs	r3, #2
 8001410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001416:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800141a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800141c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001420:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2105      	movs	r1, #5
 8001428:	4618      	mov	r0, r3
 800142a:	f004 ffcf 	bl	80063cc <HAL_RCC_ClockConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001434:	f000 f8c2 	bl	80015bc <Error_Handler>
  }
}
 8001438:	bf00      	nop
 800143a:	3750      	adds	r7, #80	; 0x50
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	40007000 	.word	0x40007000

08001448 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_SPI5_Init+0x64>)
 800144e:	4a18      	ldr	r2, [pc, #96]	; (80014b0 <MX_SPI5_Init+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_SPI5_Init+0x64>)
 8001454:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001458:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_SPI5_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_SPI5_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_SPI5_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_SPI5_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_SPI5_Init+0x64>)
 8001474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001478:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_SPI5_Init+0x64>)
 800147c:	2218      	movs	r2, #24
 800147e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_SPI5_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_SPI5_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <MX_SPI5_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_SPI5_Init+0x64>)
 8001494:	220a      	movs	r2, #10
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_SPI5_Init+0x64>)
 800149a:	f005 fbea 	bl	8006c72 <HAL_SPI_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80014a4:	f000 f88a 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000364 	.word	0x20000364
 80014b0:	40015000 	.word	0x40015000

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <MX_GPIO_Init+0xfc>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a37      	ldr	r2, [pc, #220]	; (80015b0 <MX_GPIO_Init+0xfc>)
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <MX_GPIO_Init+0xfc>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <MX_GPIO_Init+0xfc>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a30      	ldr	r2, [pc, #192]	; (80015b0 <MX_GPIO_Init+0xfc>)
 80014f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <MX_GPIO_Init+0xfc>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <MX_GPIO_Init+0xfc>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a29      	ldr	r2, [pc, #164]	; (80015b0 <MX_GPIO_Init+0xfc>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <MX_GPIO_Init+0xfc>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <MX_GPIO_Init+0xfc>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a22      	ldr	r2, [pc, #136]	; (80015b0 <MX_GPIO_Init+0xfc>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <MX_GPIO_Init+0xfc>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <MX_GPIO_Init+0xfc>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <MX_GPIO_Init+0xfc>)
 8001544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <MX_GPIO_Init+0xfc>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2102      	movs	r1, #2
 800155a:	4816      	ldr	r0, [pc, #88]	; (80015b4 <MX_GPIO_Init+0x100>)
 800155c:	f002 ff4e 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001566:	4814      	ldr	r0, [pc, #80]	; (80015b8 <MX_GPIO_Init+0x104>)
 8001568:	f002 ff48 	bl	80043fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800156c:	2302      	movs	r3, #2
 800156e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	480c      	ldr	r0, [pc, #48]	; (80015b4 <MX_GPIO_Init+0x100>)
 8001584:	f002 fc82 	bl	8003e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001588:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_GPIO_Init+0x104>)
 80015a2:	f002 fc73 	bl	8003e8c <HAL_GPIO_Init>

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020800 	.word	0x40020800
 80015b8:	40021800 	.word	0x40021800

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <Error_Handler+0x8>
	...

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_MspInit+0x4c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <HAL_MspInit+0x4c>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_MspInit+0x4c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <HAL_MspInit+0x4c>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_MspInit+0x4c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a19      	ldr	r2, [pc, #100]	; (800169c <HAL_SPI_MspInit+0x84>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12c      	bne.n	8001694 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_SPI_MspInit+0x88>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <HAL_SPI_MspInit+0x88>)
 8001644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001648:	6453      	str	r3, [r2, #68]	; 0x44
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_SPI_MspInit+0x88>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_SPI_MspInit+0x88>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <HAL_SPI_MspInit+0x88>)
 8001660:	f043 0320 	orr.w	r3, r3, #32
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_SPI_MspInit+0x88>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0320 	and.w	r3, r3, #32
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001672:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001684:	2305      	movs	r3, #5
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_SPI_MspInit+0x8c>)
 8001690:	f002 fbfc 	bl	8003e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40015000 	.word	0x40015000
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40021400 	.word	0x40021400

080016a8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_SPI_MspDeInit+0x30>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d10a      	bne.n	80016d0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_SPI_MspDeInit+0x34>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_SPI_MspDeInit+0x34>)
 80016c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016c4:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80016c6:	f44f 7160 	mov.w	r1, #896	; 0x380
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_SPI_MspDeInit+0x38>)
 80016cc:	f002 fd8a 	bl	80041e4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40015000 	.word	0x40015000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40021400 	.word	0x40021400

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <NMI_Handler+0x4>

080016ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <MemManage_Handler+0x4>

080016f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <UsageFault_Handler+0x4>

08001702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001730:	f001 fe02 	bl	8003338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <OTG_HS_IRQHandler+0x10>)
 800173e:	f003 faa0 	bl	8004c82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20001b48 	.word	0x20001b48

0800174c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
	return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_kill>:

int _kill(int pid, int sig)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001766:	f00a faaf 	bl	800bcc8 <__errno>
 800176a:	4603      	mov	r3, r0
 800176c:	2216      	movs	r2, #22
 800176e:	601a      	str	r2, [r3, #0]
	return -1;
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_exit>:

void _exit (int status)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ffe7 	bl	800175c <_kill>
	while (1) {}		/* Make sure we hang here */
 800178e:	e7fe      	b.n	800178e <_exit+0x12>

08001790 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e00a      	b.n	80017b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017a2:	f3af 8000 	nop.w
 80017a6:	4601      	mov	r1, r0
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	b2ca      	uxtb	r2, r1
 80017b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbf0      	blt.n	80017a2 <_read+0x12>
	}

return len;
 80017c0:	687b      	ldr	r3, [r7, #4]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e009      	b.n	80017f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	60ba      	str	r2, [r7, #8]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbf1      	blt.n	80017dc <_write+0x12>
	}
	return len;
 80017f8:	687b      	ldr	r3, [r7, #4]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_close>:

int _close(int file)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	return -1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182a:	605a      	str	r2, [r3, #4]
	return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_isatty>:

int _isatty(int file)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
	return 1;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
	return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f00a fa14 	bl	800bcc8 <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20030000 	.word	0x20030000
 80018cc:	00000400 	.word	0x00000400
 80018d0:	20000408 	.word	0x20000408
 80018d4:	20002288 	.word	0x20002288

080018d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <SystemInit+0x20>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <SystemInit+0x20>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001934 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001902:	490e      	ldr	r1, [pc, #56]	; (800193c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001918:	4c0b      	ldr	r4, [pc, #44]	; (8001948 <LoopFillZerobss+0x26>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001926:	f7ff ffd7 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192a:	f00a f9d3 	bl	800bcd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192e:	f7ff fb1f 	bl	8000f70 <main>
  bx  lr    
 8001932:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001934:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8001940:	08010a24 	.word	0x08010a24
  ldr r2, =_sbss
 8001944:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8001948:	20002284 	.word	0x20002284

0800194c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC_IRQHandler>

0800194e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001952:	f000 fc73 	bl	800223c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001956:	20ca      	movs	r0, #202	; 0xca
 8001958:	f000 f95d 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800195c:	20c3      	movs	r0, #195	; 0xc3
 800195e:	f000 f967 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001962:	2008      	movs	r0, #8
 8001964:	f000 f964 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001968:	2050      	movs	r0, #80	; 0x50
 800196a:	f000 f961 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800196e:	20cf      	movs	r0, #207	; 0xcf
 8001970:	f000 f951 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001974:	2000      	movs	r0, #0
 8001976:	f000 f95b 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800197a:	20c1      	movs	r0, #193	; 0xc1
 800197c:	f000 f958 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001980:	2030      	movs	r0, #48	; 0x30
 8001982:	f000 f955 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001986:	20ed      	movs	r0, #237	; 0xed
 8001988:	f000 f945 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800198c:	2064      	movs	r0, #100	; 0x64
 800198e:	f000 f94f 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001992:	2003      	movs	r0, #3
 8001994:	f000 f94c 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001998:	2012      	movs	r0, #18
 800199a:	f000 f949 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800199e:	2081      	movs	r0, #129	; 0x81
 80019a0:	f000 f946 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80019a4:	20e8      	movs	r0, #232	; 0xe8
 80019a6:	f000 f936 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80019aa:	2085      	movs	r0, #133	; 0x85
 80019ac:	f000 f940 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019b0:	2000      	movs	r0, #0
 80019b2:	f000 f93d 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80019b6:	2078      	movs	r0, #120	; 0x78
 80019b8:	f000 f93a 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80019bc:	20cb      	movs	r0, #203	; 0xcb
 80019be:	f000 f92a 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80019c2:	2039      	movs	r0, #57	; 0x39
 80019c4:	f000 f934 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80019c8:	202c      	movs	r0, #44	; 0x2c
 80019ca:	f000 f931 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f000 f92e 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80019d4:	2034      	movs	r0, #52	; 0x34
 80019d6:	f000 f92b 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80019da:	2002      	movs	r0, #2
 80019dc:	f000 f928 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80019e0:	20f7      	movs	r0, #247	; 0xf7
 80019e2:	f000 f918 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80019e6:	2020      	movs	r0, #32
 80019e8:	f000 f922 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80019ec:	20ea      	movs	r0, #234	; 0xea
 80019ee:	f000 f912 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019f2:	2000      	movs	r0, #0
 80019f4:	f000 f91c 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019f8:	2000      	movs	r0, #0
 80019fa:	f000 f919 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80019fe:	20b1      	movs	r0, #177	; 0xb1
 8001a00:	f000 f909 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a04:	2000      	movs	r0, #0
 8001a06:	f000 f913 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001a0a:	201b      	movs	r0, #27
 8001a0c:	f000 f910 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001a10:	20b6      	movs	r0, #182	; 0xb6
 8001a12:	f000 f900 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001a16:	200a      	movs	r0, #10
 8001a18:	f000 f90a 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001a1c:	20a2      	movs	r0, #162	; 0xa2
 8001a1e:	f000 f907 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001a22:	20c0      	movs	r0, #192	; 0xc0
 8001a24:	f000 f8f7 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001a28:	2010      	movs	r0, #16
 8001a2a:	f000 f901 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001a2e:	20c1      	movs	r0, #193	; 0xc1
 8001a30:	f000 f8f1 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001a34:	2010      	movs	r0, #16
 8001a36:	f000 f8fb 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001a3a:	20c5      	movs	r0, #197	; 0xc5
 8001a3c:	f000 f8eb 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001a40:	2045      	movs	r0, #69	; 0x45
 8001a42:	f000 f8f5 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001a46:	2015      	movs	r0, #21
 8001a48:	f000 f8f2 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001a4c:	20c7      	movs	r0, #199	; 0xc7
 8001a4e:	f000 f8e2 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001a52:	2090      	movs	r0, #144	; 0x90
 8001a54:	f000 f8ec 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001a58:	2036      	movs	r0, #54	; 0x36
 8001a5a:	f000 f8dc 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001a5e:	20c8      	movs	r0, #200	; 0xc8
 8001a60:	f000 f8e6 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001a64:	20f2      	movs	r0, #242	; 0xf2
 8001a66:	f000 f8d6 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f000 f8e0 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001a70:	20b0      	movs	r0, #176	; 0xb0
 8001a72:	f000 f8d0 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001a76:	20c2      	movs	r0, #194	; 0xc2
 8001a78:	f000 f8da 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001a7c:	20b6      	movs	r0, #182	; 0xb6
 8001a7e:	f000 f8ca 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001a82:	200a      	movs	r0, #10
 8001a84:	f000 f8d4 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001a88:	20a7      	movs	r0, #167	; 0xa7
 8001a8a:	f000 f8d1 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001a8e:	2027      	movs	r0, #39	; 0x27
 8001a90:	f000 f8ce 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001a94:	2004      	movs	r0, #4
 8001a96:	f000 f8cb 	bl	8001c30 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001a9a:	202a      	movs	r0, #42	; 0x2a
 8001a9c:	f000 f8bb 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f000 f8c5 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f000 f8c2 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001aac:	2000      	movs	r0, #0
 8001aae:	f000 f8bf 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001ab2:	20ef      	movs	r0, #239	; 0xef
 8001ab4:	f000 f8bc 	bl	8001c30 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001ab8:	202b      	movs	r0, #43	; 0x2b
 8001aba:	f000 f8ac 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f000 f8b6 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f000 f8b3 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001aca:	2001      	movs	r0, #1
 8001acc:	f000 f8b0 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001ad0:	203f      	movs	r0, #63	; 0x3f
 8001ad2:	f000 f8ad 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001ad6:	20f6      	movs	r0, #246	; 0xf6
 8001ad8:	f000 f89d 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f000 f8a7 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f000 f8a4 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001ae8:	2006      	movs	r0, #6
 8001aea:	f000 f8a1 	bl	8001c30 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001aee:	202c      	movs	r0, #44	; 0x2c
 8001af0:	f000 f891 	bl	8001c16 <ili9341_WriteReg>
  LCD_Delay(200);
 8001af4:	20c8      	movs	r0, #200	; 0xc8
 8001af6:	f000 fc8f 	bl	8002418 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001afa:	2026      	movs	r0, #38	; 0x26
 8001afc:	f000 f88b 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001b00:	2001      	movs	r0, #1
 8001b02:	f000 f895 	bl	8001c30 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001b06:	20e0      	movs	r0, #224	; 0xe0
 8001b08:	f000 f885 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001b0c:	200f      	movs	r0, #15
 8001b0e:	f000 f88f 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001b12:	2029      	movs	r0, #41	; 0x29
 8001b14:	f000 f88c 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001b18:	2024      	movs	r0, #36	; 0x24
 8001b1a:	f000 f889 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001b1e:	200c      	movs	r0, #12
 8001b20:	f000 f886 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001b24:	200e      	movs	r0, #14
 8001b26:	f000 f883 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001b2a:	2009      	movs	r0, #9
 8001b2c:	f000 f880 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001b30:	204e      	movs	r0, #78	; 0x4e
 8001b32:	f000 f87d 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001b36:	2078      	movs	r0, #120	; 0x78
 8001b38:	f000 f87a 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001b3c:	203c      	movs	r0, #60	; 0x3c
 8001b3e:	f000 f877 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001b42:	2009      	movs	r0, #9
 8001b44:	f000 f874 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001b48:	2013      	movs	r0, #19
 8001b4a:	f000 f871 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001b4e:	2005      	movs	r0, #5
 8001b50:	f000 f86e 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001b54:	2017      	movs	r0, #23
 8001b56:	f000 f86b 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001b5a:	2011      	movs	r0, #17
 8001b5c:	f000 f868 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f000 f865 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001b66:	20e1      	movs	r0, #225	; 0xe1
 8001b68:	f000 f855 	bl	8001c16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f000 f85f 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001b72:	2016      	movs	r0, #22
 8001b74:	f000 f85c 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001b78:	201b      	movs	r0, #27
 8001b7a:	f000 f859 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001b7e:	2004      	movs	r0, #4
 8001b80:	f000 f856 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001b84:	2011      	movs	r0, #17
 8001b86:	f000 f853 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001b8a:	2007      	movs	r0, #7
 8001b8c:	f000 f850 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001b90:	2031      	movs	r0, #49	; 0x31
 8001b92:	f000 f84d 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001b96:	2033      	movs	r0, #51	; 0x33
 8001b98:	f000 f84a 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001b9c:	2042      	movs	r0, #66	; 0x42
 8001b9e:	f000 f847 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001ba2:	2005      	movs	r0, #5
 8001ba4:	f000 f844 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001ba8:	200c      	movs	r0, #12
 8001baa:	f000 f841 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001bae:	200a      	movs	r0, #10
 8001bb0:	f000 f83e 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001bb4:	2028      	movs	r0, #40	; 0x28
 8001bb6:	f000 f83b 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001bba:	202f      	movs	r0, #47	; 0x2f
 8001bbc:	f000 f838 	bl	8001c30 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001bc0:	200f      	movs	r0, #15
 8001bc2:	f000 f835 	bl	8001c30 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001bc6:	2011      	movs	r0, #17
 8001bc8:	f000 f825 	bl	8001c16 <ili9341_WriteReg>
  LCD_Delay(200);
 8001bcc:	20c8      	movs	r0, #200	; 0xc8
 8001bce:	f000 fc23 	bl	8002418 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001bd2:	2029      	movs	r0, #41	; 0x29
 8001bd4:	f000 f81f 	bl	8001c16 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001bd8:	202c      	movs	r0, #44	; 0x2c
 8001bda:	f000 f81c 	bl	8001c16 <ili9341_WriteReg>
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001be6:	f000 fb29 	bl	800223c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001bea:	2103      	movs	r1, #3
 8001bec:	20d3      	movs	r0, #211	; 0xd3
 8001bee:	f000 f82c 	bl	8001c4a <ili9341_ReadData>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	b29b      	uxth	r3, r3
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001bfe:	2029      	movs	r0, #41	; 0x29
 8001c00:	f000 f809 	bl	8001c16 <ili9341_WriteReg>
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001c0c:	2028      	movs	r0, #40	; 0x28
 8001c0e:	f000 f802 	bl	8001c16 <ili9341_WriteReg>
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fba4 	bl	8002370 <LCD_IO_WriteReg>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 fb75 	bl	800232c <LCD_IO_WriteData>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	460a      	mov	r2, r1
 8001c54:	80fb      	strh	r3, [r7, #6]
 8001c56:	4613      	mov	r3, r2
 8001c58:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001c5a:	797a      	ldrb	r2, [r7, #5]
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 fba7 	bl	80023b4 <LCD_IO_ReadData>
 8001c66:	4603      	mov	r3, r0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001c74:	23f0      	movs	r3, #240	; 0xf0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001c84:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8001ca0:	f000 fbc6 	bl	8002430 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001caa:	f107 030f 	add.w	r3, r7, #15
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2120      	movs	r1, #32
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fc08 	bl	80024c8 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct >> 8);
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001cc2:	f107 030f 	add.w	r3, r7, #15
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2123      	movs	r1, #35	; 0x23
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fbfc 	bl	80024c8 <GYRO_IO_Write>
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8001cec:	f000 fba0 	bl	8002430 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001cf0:	1dfb      	adds	r3, r7, #7
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	210f      	movs	r1, #15
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fc18 	bl	800252c <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001d0c:	1dfb      	adds	r3, r7, #7
 8001d0e:	2201      	movs	r2, #1
 8001d10:	2124      	movs	r1, #36	; 0x24
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 fc0a 	bl	800252c <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001d22:	1dfb      	adds	r3, r7, #7
 8001d24:	2201      	movs	r2, #1
 8001d26:	2124      	movs	r1, #36	; 0x24
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fbcd 	bl	80024c8 <GYRO_IO_Write>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001d4a:	f107 030f 	add.w	r3, r7, #15
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2120      	movs	r1, #32
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fbb8 	bl	80024c8 <GYRO_IO_Write>
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001d72:	f107 030f 	add.w	r3, r7, #15
 8001d76:	2201      	movs	r2, #1
 8001d78:	2130      	movs	r1, #48	; 0x30
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fbd6 	bl	800252c <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001d80:	f107 030e 	add.w	r3, r7, #14
 8001d84:	2201      	movs	r2, #1
 8001d86:	2122      	movs	r1, #34	; 0x22
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fbcf 	bl	800252c <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	121b      	asrs	r3, r3, #8
 8001d9e:	b25a      	sxtb	r2, r3
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	b25b      	sxtb	r3, r3
 8001da4:	4313      	orrs	r3, r2
 8001da6:	b25b      	sxtb	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8001dac:	7bbb      	ldrb	r3, [r7, #14]
 8001dae:	f023 0320 	bic.w	r3, r3, #32
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	7bbb      	ldrb	r3, [r7, #14]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001dc2:	f107 030f 	add.w	r3, r7, #15
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	2130      	movs	r1, #48	; 0x30
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 fb7c 	bl	80024c8 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001dd0:	f107 030e 	add.w	r3, r7, #14
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2122      	movs	r1, #34	; 0x22
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 fb75 	bl	80024c8 <GYRO_IO_Write>
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001df0:	f107 030f 	add.w	r3, r7, #15
 8001df4:	2201      	movs	r2, #1
 8001df6:	2122      	movs	r1, #34	; 0x22
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fb97 	bl	800252c <GYRO_IO_Read>

  if(IntSel == L3GD20_INT1)
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10a      	bne.n	8001e1a <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	e00c      	b.n	8001e34 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d109      	bne.n	8001e34 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	f023 0308 	bic.w	r3, r3, #8
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001e34:	f107 030f 	add.w	r3, r7, #15
 8001e38:	2201      	movs	r2, #1
 8001e3a:	2122      	movs	r1, #34	; 0x22
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fb43 	bl	80024c8 <GYRO_IO_Write>
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001e54:	f107 030f 	add.w	r3, r7, #15
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2122      	movs	r1, #34	; 0x22
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 fb65 	bl	800252c <GYRO_IO_Read>

  if(IntSel == L3GD20_INT1)
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d107      	bne.n	8001e78 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	e009      	b.n	8001e8c <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d106      	bne.n	8001e8c <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	f023 0308 	bic.w	r3, r3, #8
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001e8c:	f107 030f 	add.w	r3, r7, #15
 8001e90:	2201      	movs	r2, #1
 8001e92:	2122      	movs	r1, #34	; 0x22
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fb17 	bl	80024c8 <GYRO_IO_Write>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001eac:	f107 030f 	add.w	r3, r7, #15
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2121      	movs	r1, #33	; 0x21
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fb39 	bl	800252c <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001ece:	f107 030f 	add.w	r3, r7, #15
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2121      	movs	r1, #33	; 0x21
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 faf6 	bl	80024c8 <GYRO_IO_Write>
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001eee:	f107 030f 	add.w	r3, r7, #15
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	2124      	movs	r1, #36	; 0x24
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fb18 	bl	800252c <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	f023 0310 	bic.w	r3, r3, #16
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001f10:	f107 030f 	add.w	r3, r7, #15
 8001f14:	2201      	movs	r2, #1
 8001f16:	2124      	movs	r1, #36	; 0x24
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fad5 	bl	80024c8 <GYRO_IO_Write>
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	2300      	movs	r3, #0
 8001f36:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001f50:	f107 030f 	add.w	r3, r7, #15
 8001f54:	2201      	movs	r2, #1
 8001f56:	2123      	movs	r1, #35	; 0x23
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 fae7 	bl	800252c <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001f5e:	f107 0318 	add.w	r3, r7, #24
 8001f62:	2206      	movs	r2, #6
 8001f64:	2128      	movs	r1, #40	; 0x28
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fae0 	bl	800252c <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d123      	bne.n	8001fbe <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
 8001f7a:	e01c      	b.n	8001fb6 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	3301      	adds	r3, #1
 8001f82:	3328      	adds	r3, #40	; 0x28
 8001f84:	443b      	add	r3, r7
 8001f86:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	3328      	adds	r3, #40	; 0x28
 8001f96:	443b      	add	r3, r7
 8001f98:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	b21a      	sxth	r2, r3
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	3328      	adds	r3, #40	; 0x28
 8001faa:	443b      	add	r3, r7
 8001fac:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	623b      	str	r3, [r7, #32]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	dddf      	ble.n	8001f7c <L3GD20_ReadXYZAngRate+0x54>
 8001fbc:	e022      	b.n	8002004 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
 8001fc2:	e01c      	b.n	8001ffe <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	3328      	adds	r3, #40	; 0x28
 8001fca:	443b      	add	r3, r7
 8001fcc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	3301      	adds	r3, #1
 8001fdc:	3328      	adds	r3, #40	; 0x28
 8001fde:	443b      	add	r3, r7
 8001fe0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	3328      	adds	r3, #40	; 0x28
 8001ff2:	443b      	add	r3, r7
 8001ff4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	623b      	str	r3, [r7, #32]
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	2b02      	cmp	r3, #2
 8002002:	dddf      	ble.n	8001fc4 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800200a:	2b20      	cmp	r3, #32
 800200c:	d00c      	beq.n	8002028 <L3GD20_ReadXYZAngRate+0x100>
 800200e:	2b20      	cmp	r3, #32
 8002010:	dc0d      	bgt.n	800202e <L3GD20_ReadXYZAngRate+0x106>
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <L3GD20_ReadXYZAngRate+0xf4>
 8002016:	2b10      	cmp	r3, #16
 8002018:	d003      	beq.n	8002022 <L3GD20_ReadXYZAngRate+0xfa>
 800201a:	e008      	b.n	800202e <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <L3GD20_ReadXYZAngRate+0x14c>)
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002020:	e005      	b.n	800202e <L3GD20_ReadXYZAngRate+0x106>

  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <L3GD20_ReadXYZAngRate+0x150>)
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002026:	e002      	b.n	800202e <L3GD20_ReadXYZAngRate+0x106>

  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <L3GD20_ReadXYZAngRate+0x154>)
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800202c:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
 8002032:	e016      	b.n	8002062 <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	3328      	adds	r3, #40	; 0x28
 800203a:	443b      	add	r3, r7
 800203c:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002058:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	3301      	adds	r3, #1
 8002060:	623b      	str	r3, [r7, #32]
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	2b02      	cmp	r3, #2
 8002066:	dde5      	ble.n	8002034 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	410c0000 	.word	0x410c0000
 8002078:	418c0000 	.word	0x418c0000
 800207c:	428c0000 	.word	0x428c0000

08002080 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002084:	4819      	ldr	r0, [pc, #100]	; (80020ec <SPIx_Init+0x6c>)
 8002086:	f005 fa94 	bl	80075b2 <HAL_SPI_GetState>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d12b      	bne.n	80020e8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <SPIx_Init+0x6c>)
 8002092:	4a17      	ldr	r2, [pc, #92]	; (80020f0 <SPIx_Init+0x70>)
 8002094:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <SPIx_Init+0x6c>)
 8002098:	2218      	movs	r2, #24
 800209a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <SPIx_Init+0x6c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <SPIx_Init+0x6c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80020a8:	4b10      	ldr	r3, [pc, #64]	; (80020ec <SPIx_Init+0x6c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <SPIx_Init+0x6c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80020b4:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <SPIx_Init+0x6c>)
 80020b6:	2207      	movs	r2, #7
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <SPIx_Init+0x6c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <SPIx_Init+0x6c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <SPIx_Init+0x6c>)
 80020c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020cc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <SPIx_Init+0x6c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <SPIx_Init+0x6c>)
 80020d6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020da:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <SPIx_Init+0x6c>)
 80020de:	f000 f873 	bl	80021c8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80020e2:	4802      	ldr	r0, [pc, #8]	; (80020ec <SPIx_Init+0x6c>)
 80020e4:	f004 fdc5 	bl	8006c72 <HAL_SPI_Init>
  } 
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	2000040c 	.word	0x2000040c
 80020f0:	40015000 	.word	0x40015000

080020f4 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	b29a      	uxth	r2, r3
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <SPIx_Read+0x38>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f107 0108 	add.w	r1, r7, #8
 800210e:	4808      	ldr	r0, [pc, #32]	; (8002130 <SPIx_Read+0x3c>)
 8002110:	f004 ff9c 	bl	800704c <HAL_SPI_Receive>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800211e:	f000 f847 	bl	80021b0 <SPIx_Error>
  }
  
  return readvalue;
 8002122:	68bb      	ldr	r3, [r7, #8]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000070 	.word	0x20000070
 8002130:	2000040c 	.word	0x2000040c

08002134 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <SPIx_Write+0x34>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	1db9      	adds	r1, r7, #6
 8002148:	2201      	movs	r2, #1
 800214a:	4808      	ldr	r0, [pc, #32]	; (800216c <SPIx_Write+0x38>)
 800214c:	f004 fe42 	bl	8006dd4 <HAL_SPI_Transmit>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800215a:	f000 f829 	bl	80021b0 <SPIx_Error>
  }
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000070 	.word	0x20000070
 800216c:	2000040c 	.word	0x2000040c

08002170 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af02      	add	r7, sp, #8
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <SPIx_WriteRead+0x38>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f107 020f 	add.w	r2, r7, #15
 8002186:	1df9      	adds	r1, r7, #7
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2301      	movs	r3, #1
 800218c:	4807      	ldr	r0, [pc, #28]	; (80021ac <SPIx_WriteRead+0x3c>)
 800218e:	f005 f86e 	bl	800726e <HAL_SPI_TransmitReceive>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002198:	f000 f80a 	bl	80021b0 <SPIx_Error>
  }
  
  return receivedbyte;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000070 	.word	0x20000070
 80021ac:	2000040c 	.word	0x2000040c

080021b0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80021b4:	4803      	ldr	r0, [pc, #12]	; (80021c4 <SPIx_Error+0x14>)
 80021b6:	f004 fde5 	bl	8006d84 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80021ba:	f7ff ff61 	bl	8002080 <SPIx_Init>
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2000040c 	.word	0x2000040c

080021c8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80021d0:	2300      	movs	r3, #0
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <SPIx_MspInit+0x6c>)
 80021d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d8:	4a16      	ldr	r2, [pc, #88]	; (8002234 <SPIx_MspInit+0x6c>)
 80021da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021de:	6453      	str	r3, [r2, #68]	; 0x44
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <SPIx_MspInit+0x6c>)
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <SPIx_MspInit+0x6c>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <SPIx_MspInit+0x6c>)
 80021f6:	f043 0320 	orr.w	r3, r3, #32
 80021fa:	6313      	str	r3, [r2, #48]	; 0x30
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <SPIx_MspInit+0x6c>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002208:	f44f 7360 	mov.w	r3, #896	; 0x380
 800220c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002212:	2302      	movs	r3, #2
 8002214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002216:	2301      	movs	r3, #1
 8002218:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800221a:	2305      	movs	r3, #5
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	4804      	ldr	r0, [pc, #16]	; (8002238 <SPIx_MspInit+0x70>)
 8002226:	f001 fe31 	bl	8003e8c <HAL_GPIO_Init>
}
 800222a:	bf00      	nop
 800222c:	3728      	adds	r7, #40	; 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40021400 	.word	0x40021400

0800223c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002242:	4b36      	ldr	r3, [pc, #216]	; (800231c <LCD_IO_Init+0xe0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d164      	bne.n	8002314 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800224a:	4b34      	ldr	r3, [pc, #208]	; (800231c <LCD_IO_Init+0xe0>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	4b32      	ldr	r3, [pc, #200]	; (8002320 <LCD_IO_Init+0xe4>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	4a31      	ldr	r2, [pc, #196]	; (8002320 <LCD_IO_Init+0xe4>)
 800225a:	f043 0308 	orr.w	r3, r3, #8
 800225e:	6313      	str	r3, [r2, #48]	; 0x30
 8002260:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <LCD_IO_Init+0xe4>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800226c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002270:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002272:	2301      	movs	r3, #1
 8002274:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800227a:	2302      	movs	r3, #2
 800227c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800227e:	f107 030c 	add.w	r3, r7, #12
 8002282:	4619      	mov	r1, r3
 8002284:	4827      	ldr	r0, [pc, #156]	; (8002324 <LCD_IO_Init+0xe8>)
 8002286:	f001 fe01 	bl	8003e8c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <LCD_IO_Init+0xe4>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a23      	ldr	r2, [pc, #140]	; (8002320 <LCD_IO_Init+0xe4>)
 8002294:	f043 0308 	orr.w	r3, r3, #8
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <LCD_IO_Init+0xe4>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80022a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80022ac:	2301      	movs	r3, #1
 80022ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80022b4:	2302      	movs	r3, #2
 80022b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	4619      	mov	r1, r3
 80022be:	4819      	ldr	r0, [pc, #100]	; (8002324 <LCD_IO_Init+0xe8>)
 80022c0:	f001 fde4 	bl	8003e8c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80022c4:	2300      	movs	r3, #0
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	4b15      	ldr	r3, [pc, #84]	; (8002320 <LCD_IO_Init+0xe4>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <LCD_IO_Init+0xe4>)
 80022ce:	f043 0304 	orr.w	r3, r3, #4
 80022d2:	6313      	str	r3, [r2, #48]	; 0x30
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <LCD_IO_Init+0xe4>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80022e0:	2304      	movs	r3, #4
 80022e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80022e4:	2301      	movs	r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	4619      	mov	r1, r3
 80022f6:	480c      	ldr	r0, [pc, #48]	; (8002328 <LCD_IO_Init+0xec>)
 80022f8:	f001 fdc8 	bl	8003e8c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80022fc:	2200      	movs	r2, #0
 80022fe:	2104      	movs	r1, #4
 8002300:	4809      	ldr	r0, [pc, #36]	; (8002328 <LCD_IO_Init+0xec>)
 8002302:	f002 f87b 	bl	80043fc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002306:	2201      	movs	r2, #1
 8002308:	2104      	movs	r1, #4
 800230a:	4807      	ldr	r0, [pc, #28]	; (8002328 <LCD_IO_Init+0xec>)
 800230c:	f002 f876 	bl	80043fc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002310:	f7ff feb6 	bl	8002080 <SPIx_Init>
  }
}
 8002314:	bf00      	nop
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000464 	.word	0x20000464
 8002320:	40023800 	.word	0x40023800
 8002324:	40020c00 	.word	0x40020c00
 8002328:	40020800 	.word	0x40020800

0800232c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002336:	2201      	movs	r2, #1
 8002338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800233c:	480a      	ldr	r0, [pc, #40]	; (8002368 <LCD_IO_WriteData+0x3c>)
 800233e:	f002 f85d 	bl	80043fc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002342:	2200      	movs	r2, #0
 8002344:	2104      	movs	r1, #4
 8002346:	4809      	ldr	r0, [pc, #36]	; (800236c <LCD_IO_WriteData+0x40>)
 8002348:	f002 f858 	bl	80043fc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fef0 	bl	8002134 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002354:	2201      	movs	r2, #1
 8002356:	2104      	movs	r1, #4
 8002358:	4804      	ldr	r0, [pc, #16]	; (800236c <LCD_IO_WriteData+0x40>)
 800235a:	f002 f84f 	bl	80043fc <HAL_GPIO_WritePin>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40020c00 	.word	0x40020c00
 800236c:	40020800 	.word	0x40020800

08002370 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800237a:	2200      	movs	r2, #0
 800237c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002380:	480a      	ldr	r0, [pc, #40]	; (80023ac <LCD_IO_WriteReg+0x3c>)
 8002382:	f002 f83b 	bl	80043fc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002386:	2200      	movs	r2, #0
 8002388:	2104      	movs	r1, #4
 800238a:	4809      	ldr	r0, [pc, #36]	; (80023b0 <LCD_IO_WriteReg+0x40>)
 800238c:	f002 f836 	bl	80043fc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	b29b      	uxth	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fecd 	bl	8002134 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800239a:	2201      	movs	r2, #1
 800239c:	2104      	movs	r1, #4
 800239e:	4804      	ldr	r0, [pc, #16]	; (80023b0 <LCD_IO_WriteReg+0x40>)
 80023a0:	f002 f82c 	bl	80043fc <HAL_GPIO_WritePin>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40020c00 	.word	0x40020c00
 80023b0:	40020800 	.word	0x40020800

080023b4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	460a      	mov	r2, r1
 80023be:	80fb      	strh	r3, [r7, #6]
 80023c0:	4613      	mov	r3, r2
 80023c2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80023c8:	2200      	movs	r2, #0
 80023ca:	2104      	movs	r1, #4
 80023cc:	4810      	ldr	r0, [pc, #64]	; (8002410 <LCD_IO_ReadData+0x5c>)
 80023ce:	f002 f815 	bl	80043fc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80023d2:	2200      	movs	r2, #0
 80023d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023d8:	480e      	ldr	r0, [pc, #56]	; (8002414 <LCD_IO_ReadData+0x60>)
 80023da:	f002 f80f 	bl	80043fc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fea7 	bl	8002134 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80023e6:	797b      	ldrb	r3, [r7, #5]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fe83 	bl	80020f4 <SPIx_Read>
 80023ee:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80023f0:	2201      	movs	r2, #1
 80023f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023f6:	4807      	ldr	r0, [pc, #28]	; (8002414 <LCD_IO_ReadData+0x60>)
 80023f8:	f002 f800 	bl	80043fc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80023fc:	2201      	movs	r2, #1
 80023fe:	2104      	movs	r1, #4
 8002400:	4803      	ldr	r0, [pc, #12]	; (8002410 <LCD_IO_ReadData+0x5c>)
 8002402:	f001 fffb 	bl	80043fc <HAL_GPIO_WritePin>
  
  return readvalue;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40020800 	.word	0x40020800
 8002414:	40020c00 	.word	0x40020c00

08002418 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 ffa9 	bl	8003378 <HAL_Delay>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <GYRO_IO_Init+0x8c>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <GYRO_IO_Init+0x8c>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <GYRO_IO_Init+0x8c>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8002452:	2302      	movs	r3, #2
 8002454:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002456:	2301      	movs	r3, #1
 8002458:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800245e:	2301      	movs	r3, #1
 8002460:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8002462:	f107 030c 	add.w	r3, r7, #12
 8002466:	4619      	mov	r1, r3
 8002468:	4815      	ldr	r0, [pc, #84]	; (80024c0 <GYRO_IO_Init+0x90>)
 800246a:	f001 fd0f 	bl	8003e8c <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 800246e:	2201      	movs	r2, #1
 8002470:	2102      	movs	r1, #2
 8002472:	4813      	ldr	r0, [pc, #76]	; (80024c0 <GYRO_IO_Init+0x90>)
 8002474:	f001 ffc2 	bl	80043fc <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002478:	2300      	movs	r3, #0
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <GYRO_IO_Init+0x8c>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <GYRO_IO_Init+0x8c>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6313      	str	r3, [r2, #48]	; 0x30
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <GYRO_IO_Init+0x8c>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002494:	2306      	movs	r3, #6
 8002496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800249c:	2302      	movs	r3, #2
 800249e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80024a4:	f107 030c 	add.w	r3, r7, #12
 80024a8:	4619      	mov	r1, r3
 80024aa:	4806      	ldr	r0, [pc, #24]	; (80024c4 <GYRO_IO_Init+0x94>)
 80024ac:	f001 fcee 	bl	8003e8c <HAL_GPIO_Init>

  SPIx_Init();
 80024b0:	f7ff fde6 	bl	8002080 <SPIx_Init>
}
 80024b4:	bf00      	nop
 80024b6:	3720      	adds	r7, #32
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020800 	.word	0x40020800
 80024c4:	40020000 	.word	0x40020000

080024c8 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	70fb      	strb	r3, [r7, #3]
 80024d4:	4613      	mov	r3, r2
 80024d6:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80024d8:	883b      	ldrh	r3, [r7, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d903      	bls.n	80024e6 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e4:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80024e6:	2200      	movs	r2, #0
 80024e8:	2102      	movs	r1, #2
 80024ea:	480f      	ldr	r0, [pc, #60]	; (8002528 <GYRO_IO_Write+0x60>)
 80024ec:	f001 ff86 	bl	80043fc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fe3c 	bl	8002170 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80024f8:	e00a      	b.n	8002510 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fe36 	bl	8002170 <SPIx_WriteRead>
    NumByteToWrite--;
 8002504:	883b      	ldrh	r3, [r7, #0]
 8002506:	3b01      	subs	r3, #1
 8002508:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3301      	adds	r3, #1
 800250e:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8002510:	883b      	ldrh	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f1      	bne.n	80024fa <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002516:	2201      	movs	r2, #1
 8002518:	2102      	movs	r1, #2
 800251a:	4803      	ldr	r0, [pc, #12]	; (8002528 <GYRO_IO_Write+0x60>)
 800251c:	f001 ff6e 	bl	80043fc <HAL_GPIO_WritePin>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40020800 	.word	0x40020800

0800252c <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
 8002538:	4613      	mov	r3, r2
 800253a:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 800253c:	883b      	ldrh	r3, [r7, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d904      	bls.n	800254c <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002548:	70fb      	strb	r3, [r7, #3]
 800254a:	e003      	b.n	8002554 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002552:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002554:	2200      	movs	r2, #0
 8002556:	2102      	movs	r1, #2
 8002558:	4810      	ldr	r0, [pc, #64]	; (800259c <GYRO_IO_Read+0x70>)
 800255a:	f001 ff4f 	bl	80043fc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fe05 	bl	8002170 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8002566:	e00c      	b.n	8002582 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002568:	2000      	movs	r0, #0
 800256a:	f7ff fe01 	bl	8002170 <SPIx_WriteRead>
 800256e:	4603      	mov	r3, r0
 8002570:	461a      	mov	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002576:	883b      	ldrh	r3, [r7, #0]
 8002578:	3b01      	subs	r3, #1
 800257a:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3301      	adds	r3, #1
 8002580:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8002582:	883b      	ldrh	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1ef      	bne.n	8002568 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002588:	2201      	movs	r2, #1
 800258a:	2102      	movs	r1, #2
 800258c:	4803      	ldr	r0, [pc, #12]	; (800259c <GYRO_IO_Read+0x70>)
 800258e:	f001 ff35 	bl	80043fc <HAL_GPIO_WritePin>
}  
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40020800 	.word	0x40020800

080025a0 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80025aa:	2300      	movs	r3, #0
 80025ac:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 80025ae:	2300      	movs	r3, #0
 80025b0:	703b      	strb	r3, [r7, #0]
 80025b2:	2300      	movs	r3, #0
 80025b4:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80025b6:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <BSP_GYRO_Init+0xc4>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4798      	blx	r3
 80025bc:	4603      	mov	r3, r0
 80025be:	2bd4      	cmp	r3, #212	; 0xd4
 80025c0:	d005      	beq.n	80025ce <BSP_GYRO_Init+0x2e>
 80025c2:	4b28      	ldr	r3, [pc, #160]	; (8002664 <BSP_GYRO_Init+0xc4>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	4798      	blx	r3
 80025c8:	4603      	mov	r3, r0
 80025ca:	2bd5      	cmp	r3, #213	; 0xd5
 80025cc:	d145      	bne.n	800265a <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80025ce:	4b26      	ldr	r3, [pc, #152]	; (8002668 <BSP_GYRO_Init+0xc8>)
 80025d0:	4a24      	ldr	r2, [pc, #144]	; (8002664 <BSP_GYRO_Init+0xc4>)
 80025d2:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80025d4:	2308      	movs	r3, #8
 80025d6:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80025d8:	2300      	movs	r3, #0
 80025da:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80025dc:	2307      	movs	r3, #7
 80025de:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80025e0:	2330      	movs	r3, #48	; 0x30
 80025e2:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80025e4:	2300      	movs	r3, #0
 80025e6:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80025e8:	2300      	movs	r3, #0
 80025ea:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80025ec:	2310      	movs	r3, #16
 80025ee:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025f0:	793a      	ldrb	r2, [r7, #4]
 80025f2:	797b      	ldrb	r3, [r7, #5]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80025f8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025fa:	4313      	orrs	r3, r2
 80025fc:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80025fe:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002600:	4313      	orrs	r3, r2
 8002602:	b2db      	uxtb	r3, r3
 8002604:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002606:	7a3a      	ldrb	r2, [r7, #8]
 8002608:	7a7b      	ldrb	r3, [r7, #9]
 800260a:	4313      	orrs	r3, r2
 800260c:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 800260e:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002610:	4313      	orrs	r3, r2
 8002612:	b2db      	uxtb	r3, r3
 8002614:	b29b      	uxth	r3, r3
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	b29a      	uxth	r2, r3
 800261a:	89bb      	ldrh	r3, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <BSP_GYRO_Init+0xc8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	89ba      	ldrh	r2, [r7, #12]
 8002628:	4610      	mov	r0, r2
 800262a:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 800262c:	2300      	movs	r3, #0
 800262e:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002630:	2300      	movs	r3, #0
 8002632:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002634:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002636:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002638:	4313      	orrs	r3, r2
 800263a:	b2db      	uxtb	r3, r3
 800263c:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <BSP_GYRO_Init+0xc8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	89ba      	ldrh	r2, [r7, #12]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	4610      	mov	r0, r2
 800264a:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <BSP_GYRO_Init+0xc8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	2010      	movs	r0, #16
 8002654:	4798      	blx	r3

    ret = GYRO_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	2000003c 	.word	0x2000003c
 8002668:	20000468 	.word	0x20000468

0800266c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <BSP_GYRO_GetXYZ+0x24>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	2b00      	cmp	r3, #0
 800267c:	d004      	beq.n	8002688 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 800267e:	4b04      	ldr	r3, [pc, #16]	; (8002690 <BSP_GYRO_GetXYZ+0x24>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
  }
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000468 	.word	0x20000468

08002694 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002698:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <BSP_LCD_Init+0xbc>)
 800269a:	4a2e      	ldr	r2, [pc, #184]	; (8002754 <BSP_LCD_Init+0xc0>)
 800269c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800269e:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <BSP_LCD_Init+0xbc>)
 80026a0:	2209      	movs	r2, #9
 80026a2:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80026a4:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <BSP_LCD_Init+0xbc>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80026aa:	4b29      	ldr	r3, [pc, #164]	; (8002750 <BSP_LCD_Init+0xbc>)
 80026ac:	221d      	movs	r2, #29
 80026ae:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80026b0:	4b27      	ldr	r3, [pc, #156]	; (8002750 <BSP_LCD_Init+0xbc>)
 80026b2:	2203      	movs	r2, #3
 80026b4:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80026b6:	4b26      	ldr	r3, [pc, #152]	; (8002750 <BSP_LCD_Init+0xbc>)
 80026b8:	f240 120d 	movw	r2, #269	; 0x10d
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80026be:	4b24      	ldr	r3, [pc, #144]	; (8002750 <BSP_LCD_Init+0xbc>)
 80026c0:	f240 1243 	movw	r2, #323	; 0x143
 80026c4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <BSP_LCD_Init+0xbc>)
 80026c8:	f240 1217 	movw	r2, #279	; 0x117
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80026ce:	4b20      	ldr	r3, [pc, #128]	; (8002750 <BSP_LCD_Init+0xbc>)
 80026d0:	f240 1247 	movw	r2, #327	; 0x147
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <BSP_LCD_Init+0xbc>)
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80026de:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <BSP_LCD_Init+0xbc>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <BSP_LCD_Init+0xbc>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <BSP_LCD_Init+0xc4>)
 80026f0:	2208      	movs	r2, #8
 80026f2:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <BSP_LCD_Init+0xc4>)
 80026f6:	22c0      	movs	r2, #192	; 0xc0
 80026f8:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <BSP_LCD_Init+0xc4>)
 80026fc:	2204      	movs	r2, #4
 80026fe:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002700:	4b15      	ldr	r3, [pc, #84]	; (8002758 <BSP_LCD_Init+0xc4>)
 8002702:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002706:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002708:	4813      	ldr	r0, [pc, #76]	; (8002758 <BSP_LCD_Init+0xc4>)
 800270a:	f004 f857 	bl	80067bc <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <BSP_LCD_Init+0xbc>)
 8002710:	2200      	movs	r2, #0
 8002712:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <BSP_LCD_Init+0xbc>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <BSP_LCD_Init+0xbc>)
 800271c:	2200      	movs	r2, #0
 800271e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <BSP_LCD_Init+0xbc>)
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002726:	f000 fab7 	bl	8002c98 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800272a:	4809      	ldr	r0, [pc, #36]	; (8002750 <BSP_LCD_Init+0xbc>)
 800272c:	f001 fe80 	bl	8004430 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <BSP_LCD_Init+0xc8>)
 8002732:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <BSP_LCD_Init+0xcc>)
 8002734:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <BSP_LCD_Init+0xc8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800273e:	f000 fbdf 	bl	8002f00 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002742:	4808      	ldr	r0, [pc, #32]	; (8002764 <BSP_LCD_Init+0xd0>)
 8002744:	f000 f8ce 	bl	80028e4 <BSP_LCD_SetFont>

  return LCD_OK;
 8002748:	2300      	movs	r3, #0
}  
 800274a:	4618      	mov	r0, r3
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2000046c 	.word	0x2000046c
 8002754:	40016800 	.word	0x40016800
 8002758:	20000554 	.word	0x20000554
 800275c:	200005a0 	.word	0x200005a0
 8002760:	20000004 	.word	0x20000004
 8002764:	20000074 	.word	0x20000074

08002768 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <BSP_LCD_GetXSize+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	4798      	blx	r3
 8002774:	4603      	mov	r3, r0
}
 8002776:	4618      	mov	r0, r3
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200005a0 	.word	0x200005a0

08002780 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <BSP_LCD_GetYSize+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	4798      	blx	r3
 800278c:	4603      	mov	r3, r0
}
 800278e:	4618      	mov	r0, r3
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200005a0 	.word	0x200005a0

08002798 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002798:	b580      	push	{r7, lr}
 800279a:	b090      	sub	sp, #64	; 0x40
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80027a8:	f7ff ffde 	bl	8002768 <BSP_LCD_GetXSize>
 80027ac:	4603      	mov	r3, r0
 80027ae:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80027b4:	f7ff ffe4 	bl	8002780 <BSP_LCD_GetYSize>
 80027b8:	4603      	mov	r3, r0
 80027ba:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80027c4:	23ff      	movs	r3, #255	; 0xff
 80027c6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80027de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80027e4:	2307      	movs	r3, #7
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80027e8:	f7ff ffbe 	bl	8002768 <BSP_LCD_GetXSize>
 80027ec:	4603      	mov	r3, r0
 80027ee:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80027f0:	f7ff ffc6 	bl	8002780 <BSP_LCD_GetYSize>
 80027f4:	4603      	mov	r3, r0
 80027f6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	4619      	mov	r1, r3
 8002800:	4814      	ldr	r0, [pc, #80]	; (8002854 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002802:	f001 feef 	bl	80045e4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002806:	88fa      	ldrh	r2, [r7, #6]
 8002808:	4913      	ldr	r1, [pc, #76]	; (8002858 <BSP_LCD_LayerDefaultInit+0xc0>)
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	3304      	adds	r3, #4
 8002816:	f04f 32ff 	mov.w	r2, #4294967295
 800281a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800281c:	88fa      	ldrh	r2, [r7, #6]
 800281e:	490e      	ldr	r1, [pc, #56]	; (8002858 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002820:	4613      	mov	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	3308      	adds	r3, #8
 800282c:	4a0b      	ldr	r2, [pc, #44]	; (800285c <BSP_LCD_LayerDefaultInit+0xc4>)
 800282e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	4909      	ldr	r1, [pc, #36]	; (8002858 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002842:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002844:	4803      	ldr	r0, [pc, #12]	; (8002854 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002846:	f001 ff0b 	bl	8004660 <HAL_LTDC_EnableDither>
}
 800284a:	bf00      	nop
 800284c:	3740      	adds	r7, #64	; 0x40
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000046c 	.word	0x2000046c
 8002858:	20000588 	.word	0x20000588
 800285c:	20000074 	.word	0x20000074

08002860 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002868:	4a04      	ldr	r2, [pc, #16]	; (800287c <BSP_LCD_SelectLayer+0x1c>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6013      	str	r3, [r2, #0]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000584 	.word	0x20000584

08002880 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <BSP_LCD_SetTextColor+0x28>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4907      	ldr	r1, [pc, #28]	; (80028ac <BSP_LCD_SetTextColor+0x2c>)
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	601a      	str	r2, [r3, #0]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	20000584 	.word	0x20000584
 80028ac:	20000588 	.word	0x20000588

080028b0 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <BSP_LCD_SetBackColor+0x2c>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4908      	ldr	r1, [pc, #32]	; (80028e0 <BSP_LCD_SetBackColor+0x30>)
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3304      	adds	r3, #4
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	601a      	str	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000584 	.word	0x20000584
 80028e0:	20000588 	.word	0x20000588

080028e4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <BSP_LCD_SetFont+0x2c>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4908      	ldr	r1, [pc, #32]	; (8002914 <BSP_LCD_SetFont+0x30>)
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	3308      	adds	r3, #8
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	601a      	str	r2, [r3, #0]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000584 	.word	0x20000584
 8002914:	20000588 	.word	0x20000588

08002918 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800291a:	b085      	sub	sp, #20
 800291c:	af02      	add	r7, sp, #8
 800291e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <BSP_LCD_Clear+0x48>)
 8002922:	681c      	ldr	r4, [r3, #0]
 8002924:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <BSP_LCD_Clear+0x48>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <BSP_LCD_Clear+0x4c>)
 800292a:	2134      	movs	r1, #52	; 0x34
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	335c      	adds	r3, #92	; 0x5c
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	461e      	mov	r6, r3
 8002938:	f7ff ff16 	bl	8002768 <BSP_LCD_GetXSize>
 800293c:	4605      	mov	r5, r0
 800293e:	f7ff ff1f 	bl	8002780 <BSP_LCD_GetYSize>
 8002942:	4602      	mov	r2, r0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	2300      	movs	r3, #0
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	4613      	mov	r3, r2
 800294e:	462a      	mov	r2, r5
 8002950:	4631      	mov	r1, r6
 8002952:	4620      	mov	r0, r4
 8002954:	f000 fa9c 	bl	8002e90 <FillBuffer>
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002960:	20000584 	.word	0x20000584
 8002964:	2000046c 	.word	0x2000046c

08002968 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002968:	b590      	push	{r4, r7, lr}
 800296a:	b08b      	sub	sp, #44	; 0x2c
 800296c:	af00      	add	r7, sp, #0
 800296e:	4604      	mov	r4, r0
 8002970:	4608      	mov	r0, r1
 8002972:	4611      	mov	r1, r2
 8002974:	461a      	mov	r2, r3
 8002976:	4623      	mov	r3, r4
 8002978:	80fb      	strh	r3, [r7, #6]
 800297a:	4603      	mov	r3, r0
 800297c:	80bb      	strh	r3, [r7, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	807b      	strh	r3, [r7, #2]
 8002982:	4613      	mov	r3, r2
 8002984:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002986:	2300      	movs	r3, #0
 8002988:	823b      	strh	r3, [r7, #16]
 800298a:	2300      	movs	r3, #0
 800298c:	81fb      	strh	r3, [r7, #14]
 800298e:	2300      	movs	r3, #0
 8002990:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002992:	2300      	movs	r3, #0
 8002994:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002996:	2300      	movs	r3, #0
 8002998:	847b      	strh	r3, [r7, #34]	; 0x22
 800299a:	2300      	movs	r3, #0
 800299c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800299e:	2300      	movs	r3, #0
 80029a0:	83fb      	strh	r3, [r7, #30]
 80029a2:	2300      	movs	r3, #0
 80029a4:	83bb      	strh	r3, [r7, #28]
 80029a6:	2300      	movs	r3, #0
 80029a8:	837b      	strh	r3, [r7, #26]
 80029aa:	2300      	movs	r3, #0
 80029ac:	833b      	strh	r3, [r7, #24]
 80029ae:	2300      	movs	r3, #0
 80029b0:	82fb      	strh	r3, [r7, #22]
 80029b2:	2300      	movs	r3, #0
 80029b4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80029ba:	887a      	ldrh	r2, [r7, #2]
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bfb8      	it	lt
 80029c4:	425b      	neglt	r3, r3
 80029c6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80029c8:	883a      	ldrh	r2, [r7, #0]
 80029ca:	88bb      	ldrh	r3, [r7, #4]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bfb8      	it	lt
 80029d2:	425b      	neglt	r3, r3
 80029d4:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 80029da:	88bb      	ldrh	r3, [r7, #4]
 80029dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d304      	bcc.n	80029f0 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80029e6:	2301      	movs	r3, #1
 80029e8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80029ea:	2301      	movs	r3, #1
 80029ec:	843b      	strh	r3, [r7, #32]
 80029ee:	e005      	b.n	80029fc <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80029f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029f4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80029f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029fa:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 80029fc:	883a      	ldrh	r2, [r7, #0]
 80029fe:	88bb      	ldrh	r3, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d304      	bcc.n	8002a0e <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002a04:	2301      	movs	r3, #1
 8002a06:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	83bb      	strh	r3, [r7, #28]
 8002a0c:	e005      	b.n	8002a1a <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a12:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a18:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002a1a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002a1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	db10      	blt.n	8002a48 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002a26:	2300      	movs	r3, #0
 8002a28:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002a2e:	8a3b      	ldrh	r3, [r7, #16]
 8002a30:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002a32:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a36:	0fda      	lsrs	r2, r3, #31
 8002a38:	4413      	add	r3, r2
 8002a3a:	105b      	asrs	r3, r3, #1
 8002a3c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002a42:	8a3b      	ldrh	r3, [r7, #16]
 8002a44:	82bb      	strh	r3, [r7, #20]
 8002a46:	e00f      	b.n	8002a68 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002a48:	2300      	movs	r3, #0
 8002a4a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002a50:	89fb      	ldrh	r3, [r7, #14]
 8002a52:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002a54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a58:	0fda      	lsrs	r2, r3, #31
 8002a5a:	4413      	add	r3, r2
 8002a5c:	105b      	asrs	r3, r3, #1
 8002a5e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002a60:	8a3b      	ldrh	r3, [r7, #16]
 8002a62:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002a64:	89fb      	ldrh	r3, [r7, #14]
 8002a66:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	827b      	strh	r3, [r7, #18]
 8002a6c:	e037      	b.n	8002ade <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002a6e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002a70:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002a72:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <BSP_LCD_DrawLine+0x18c>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4c20      	ldr	r4, [pc, #128]	; (8002af8 <BSP_LCD_DrawLine+0x190>)
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4423      	add	r3, r4
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	f000 f9dd 	bl	8002e44 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002a8a:	8b3a      	ldrh	r2, [r7, #24]
 8002a8c:	8afb      	ldrh	r3, [r7, #22]
 8002a8e:	4413      	add	r3, r2
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002a94:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002a98:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	db0e      	blt.n	8002abe <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002aa0:	8b3a      	ldrh	r2, [r7, #24]
 8002aa2:	8b7b      	ldrh	r3, [r7, #26]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002aaa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002aac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002aae:	4413      	add	r3, r2
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002ab4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ab6:	8bfb      	ldrh	r3, [r7, #30]
 8002ab8:	4413      	add	r3, r2
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002abe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ac0:	8c3b      	ldrh	r3, [r7, #32]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002ac8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002aca:	8bbb      	ldrh	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002ad2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	827b      	strh	r3, [r7, #18]
 8002ade:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002ae2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	ddc1      	ble.n	8002a6e <BSP_LCD_DrawLine+0x106>
  }
}
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
 8002aee:	372c      	adds	r7, #44	; 0x2c
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd90      	pop	{r4, r7, pc}
 8002af4:	20000584 	.word	0x20000584
 8002af8:	20000588 	.word	0x20000588

08002afc <BSP_LCD_FillTriangle>:
  * @param  Y2: the point 2 y position
  * @param  X3: the point 3 x position
  * @param  Y3: the point 3 y position
  */
void BSP_LCD_FillTriangle(uint16_t X1, uint16_t X2, uint16_t X3, uint16_t Y1, uint16_t Y2, uint16_t Y3)
{ 
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b08b      	sub	sp, #44	; 0x2c
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4604      	mov	r4, r0
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	80fb      	strh	r3, [r7, #6]
 8002b0e:	4603      	mov	r3, r0
 8002b10:	80bb      	strh	r3, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	807b      	strh	r3, [r7, #2]
 8002b16:	4613      	mov	r3, r2
 8002b18:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	823b      	strh	r3, [r7, #16]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	81fb      	strh	r3, [r7, #14]
 8002b22:	2300      	movs	r3, #0
 8002b24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b26:	2300      	movs	r3, #0
 8002b28:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	847b      	strh	r3, [r7, #34]	; 0x22
 8002b2e:	2300      	movs	r3, #0
 8002b30:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8002b32:	2300      	movs	r3, #0
 8002b34:	83fb      	strh	r3, [r7, #30]
 8002b36:	2300      	movs	r3, #0
 8002b38:	83bb      	strh	r3, [r7, #28]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	837b      	strh	r3, [r7, #26]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	833b      	strh	r3, [r7, #24]
 8002b42:	2300      	movs	r3, #0
 8002b44:	82fb      	strh	r3, [r7, #22]
 8002b46:	2300      	movs	r3, #0
 8002b48:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002b4e:	88ba      	ldrh	r2, [r7, #4]
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bfb8      	it	lt
 8002b58:	425b      	neglt	r3, r3
 8002b5a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002b5c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002b5e:	883b      	ldrh	r3, [r7, #0]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bfb8      	it	lt
 8002b66:	425b      	neglt	r3, r3
 8002b68:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8002b6e:	883b      	ldrh	r3, [r7, #0]
 8002b70:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8002b72:	88ba      	ldrh	r2, [r7, #4]
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d304      	bcc.n	8002b84 <BSP_LCD_FillTriangle+0x88>
  {
    xinc1 = 1;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	843b      	strh	r3, [r7, #32]
 8002b82:	e005      	b.n	8002b90 <BSP_LCD_FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b88:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b8e:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8002b90:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002b92:	883b      	ldrh	r3, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d304      	bcc.n	8002ba2 <BSP_LCD_FillTriangle+0xa6>
  {
    yinc1 = 1;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	83bb      	strh	r3, [r7, #28]
 8002ba0:	e005      	b.n	8002bae <BSP_LCD_FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ba6:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bac:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002bae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002bb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	db10      	blt.n	8002bdc <BSP_LCD_FillTriangle+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002bba:	2300      	movs	r3, #0
 8002bbc:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002bc2:	8a3b      	ldrh	r3, [r7, #16]
 8002bc4:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002bc6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002bca:	0fda      	lsrs	r2, r3, #31
 8002bcc:	4413      	add	r3, r2
 8002bce:	105b      	asrs	r3, r3, #1
 8002bd0:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002bd2:	89fb      	ldrh	r3, [r7, #14]
 8002bd4:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002bd6:	8a3b      	ldrh	r3, [r7, #16]
 8002bd8:	82bb      	strh	r3, [r7, #20]
 8002bda:	e00f      	b.n	8002bfc <BSP_LCD_FillTriangle+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002bdc:	2300      	movs	r3, #0
 8002bde:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002be0:	2300      	movs	r3, #0
 8002be2:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002be8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bec:	0fda      	lsrs	r2, r3, #31
 8002bee:	4413      	add	r3, r2
 8002bf0:	105b      	asrs	r3, r3, #1
 8002bf2:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002bf4:	8a3b      	ldrh	r3, [r7, #16]
 8002bf6:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002bf8:	89fb      	ldrh	r3, [r7, #14]
 8002bfa:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	827b      	strh	r3, [r7, #18]
 8002c00:	e02f      	b.n	8002c62 <BSP_LCD_FillTriangle+0x166>
  {
    BSP_LCD_DrawLine(x, y, X3, Y3);
 8002c02:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002c04:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002c06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002c08:	887a      	ldrh	r2, [r7, #2]
 8002c0a:	f7ff fead 	bl	8002968 <BSP_LCD_DrawLine>
    
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8002c0e:	8b3a      	ldrh	r2, [r7, #24]
 8002c10:	8afb      	ldrh	r3, [r7, #22]
 8002c12:	4413      	add	r3, r2
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8002c18:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002c1c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	db0e      	blt.n	8002c42 <BSP_LCD_FillTriangle+0x146>
    {
      num -= den;               /* Calculate the new numerator value */
 8002c24:	8b3a      	ldrh	r2, [r7, #24]
 8002c26:	8b7b      	ldrh	r3, [r7, #26]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8002c2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c32:	4413      	add	r3, r2
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8002c38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c3a:	8bfb      	ldrh	r3, [r7, #30]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8002c42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c44:	8c3b      	ldrh	r3, [r7, #32]
 8002c46:	4413      	add	r3, r2
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8002c4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c4e:	8bbb      	ldrh	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002c56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	827b      	strh	r3, [r7, #18]
 8002c62:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	ddc9      	ble.n	8002c02 <BSP_LCD_FillTriangle+0x106>
  } 
}
 8002c6e:	bf00      	nop
 8002c70:	bf00      	nop
 8002c72:	372c      	adds	r7, #44	; 0x2c
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}

08002c78 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <BSP_LCD_DisplayOn+0x1c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002c86:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <BSP_LCD_DisplayOn+0x1c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4798      	blx	r3
  }
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200005a0 	.word	0x200005a0

08002c98 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08e      	sub	sp, #56	; 0x38
 8002c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	623b      	str	r3, [r7, #32]
 8002ca2:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	4a60      	ldr	r2, [pc, #384]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002ca8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cac:	6453      	str	r3, [r2, #68]	; 0x44
 8002cae:	4b5e      	ldr	r3, [pc, #376]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cb6:	623b      	str	r3, [r7, #32]
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	4b5a      	ldr	r3, [pc, #360]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	4a59      	ldr	r2, [pc, #356]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002cc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cca:	4b57      	ldr	r3, [pc, #348]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce6:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	4b4c      	ldr	r3, [pc, #304]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a4b      	ldr	r2, [pc, #300]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	4b45      	ldr	r3, [pc, #276]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a44      	ldr	r2, [pc, #272]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b42      	ldr	r3, [pc, #264]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b3e      	ldr	r3, [pc, #248]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a3d      	ldr	r2, [pc, #244]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002d34:	f043 0308 	orr.w	r3, r3, #8
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	4b37      	ldr	r3, [pc, #220]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a36      	ldr	r2, [pc, #216]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002d50:	f043 0320 	orr.w	r3, r3, #32
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b34      	ldr	r3, [pc, #208]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	607b      	str	r3, [r7, #4]
 8002d66:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <BSP_LCD_MspInit+0x190>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002d7e:	f641 0358 	movw	r3, #6232	; 0x1858
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002d90:	230e      	movs	r3, #14
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4824      	ldr	r0, [pc, #144]	; (8002e2c <BSP_LCD_MspInit+0x194>)
 8002d9c:	f001 f876 	bl	8003e8c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002da0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002daa:	4619      	mov	r1, r3
 8002dac:	4820      	ldr	r0, [pc, #128]	; (8002e30 <BSP_LCD_MspInit+0x198>)
 8002dae:	f001 f86d 	bl	8003e8c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002db2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	481d      	ldr	r0, [pc, #116]	; (8002e34 <BSP_LCD_MspInit+0x19c>)
 8002dc0:	f001 f864 	bl	8003e8c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002dc4:	2348      	movs	r3, #72	; 0x48
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dcc:	4619      	mov	r1, r3
 8002dce:	481a      	ldr	r0, [pc, #104]	; (8002e38 <BSP_LCD_MspInit+0x1a0>)
 8002dd0:	f001 f85c 	bl	8003e8c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dde:	4619      	mov	r1, r3
 8002de0:	4816      	ldr	r0, [pc, #88]	; (8002e3c <BSP_LCD_MspInit+0x1a4>)
 8002de2:	f001 f853 	bl	8003e8c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002de6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df0:	4619      	mov	r1, r3
 8002df2:	4813      	ldr	r0, [pc, #76]	; (8002e40 <BSP_LCD_MspInit+0x1a8>)
 8002df4:	f001 f84a 	bl	8003e8c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002dfc:	2309      	movs	r3, #9
 8002dfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e04:	4619      	mov	r1, r3
 8002e06:	480a      	ldr	r0, [pc, #40]	; (8002e30 <BSP_LCD_MspInit+0x198>)
 8002e08:	f001 f840 	bl	8003e8c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002e0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e16:	4619      	mov	r1, r3
 8002e18:	4809      	ldr	r0, [pc, #36]	; (8002e40 <BSP_LCD_MspInit+0x1a8>)
 8002e1a:	f001 f837 	bl	8003e8c <HAL_GPIO_Init>
}
 8002e1e:	bf00      	nop
 8002e20:	3738      	adds	r7, #56	; 0x38
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020000 	.word	0x40020000
 8002e30:	40020400 	.word	0x40020400
 8002e34:	40020800 	.word	0x40020800
 8002e38:	40020c00 	.word	0x40020c00
 8002e3c:	40021400 	.word	0x40021400
 8002e40:	40021800 	.word	0x40021800

08002e44 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002e44:	b5b0      	push	{r4, r5, r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	603a      	str	r2, [r7, #0]
 8002e4e:	80fb      	strh	r3, [r7, #6]
 8002e50:	460b      	mov	r3, r1
 8002e52:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <BSP_LCD_DrawPixel+0x44>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0c      	ldr	r2, [pc, #48]	; (8002e8c <BSP_LCD_DrawPixel+0x48>)
 8002e5a:	2134      	movs	r1, #52	; 0x34
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	335c      	adds	r3, #92	; 0x5c
 8002e64:	681c      	ldr	r4, [r3, #0]
 8002e66:	88bd      	ldrh	r5, [r7, #4]
 8002e68:	f7ff fc7e 	bl	8002768 <BSP_LCD_GetXSize>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	fb03 f205 	mul.w	r2, r3, r5
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4423      	add	r3, r4
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bdb0      	pop	{r4, r5, r7, pc}
 8002e88:	20000584 	.word	0x20000584
 8002e8c:	2000046c 	.word	0x2000046c

08002e90 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <FillBuffer+0x68>)
 8002ea0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ea4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002ea6:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <FillBuffer+0x68>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002eac:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <FillBuffer+0x68>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002eb2:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <FillBuffer+0x68>)
 8002eb4:	4a11      	ldr	r2, [pc, #68]	; (8002efc <FillBuffer+0x6c>)
 8002eb6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002eb8:	480f      	ldr	r0, [pc, #60]	; (8002ef8 <FillBuffer+0x68>)
 8002eba:	f000 fd51 	bl	8003960 <HAL_DMA2D_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d115      	bne.n	8002ef0 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002ec4:	68f9      	ldr	r1, [r7, #12]
 8002ec6:	480c      	ldr	r0, [pc, #48]	; (8002ef8 <FillBuffer+0x68>)
 8002ec8:	f000 feb2 	bl	8003c30 <HAL_DMA2D_ConfigLayer>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10e      	bne.n	8002ef0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69f9      	ldr	r1, [r7, #28]
 8002edc:	4806      	ldr	r0, [pc, #24]	; (8002ef8 <FillBuffer+0x68>)
 8002ede:	f000 fd92 	bl	8003a06 <HAL_DMA2D_Start>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d103      	bne.n	8002ef0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002ee8:	210a      	movs	r1, #10
 8002eea:	4803      	ldr	r0, [pc, #12]	; (8002ef8 <FillBuffer+0x68>)
 8002eec:	f000 fdb6 	bl	8003a5c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000514 	.word	0x20000514
 8002efc:	4002b000 	.word	0x4002b000

08002f00 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002f04:	4b29      	ldr	r3, [pc, #164]	; (8002fac <BSP_SDRAM_Init+0xac>)
 8002f06:	4a2a      	ldr	r2, [pc, #168]	; (8002fb0 <BSP_SDRAM_Init+0xb0>)
 8002f08:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002f0a:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <BSP_SDRAM_Init+0xb4>)
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002f10:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <BSP_SDRAM_Init+0xb4>)
 8002f12:	2207      	movs	r2, #7
 8002f14:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002f16:	4b27      	ldr	r3, [pc, #156]	; (8002fb4 <BSP_SDRAM_Init+0xb4>)
 8002f18:	2204      	movs	r2, #4
 8002f1a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <BSP_SDRAM_Init+0xb4>)
 8002f1e:	2207      	movs	r2, #7
 8002f20:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002f22:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <BSP_SDRAM_Init+0xb4>)
 8002f24:	2202      	movs	r2, #2
 8002f26:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <BSP_SDRAM_Init+0xb4>)
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002f2e:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <BSP_SDRAM_Init+0xb4>)
 8002f30:	2202      	movs	r2, #2
 8002f32:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <BSP_SDRAM_Init+0xac>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002f3a:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <BSP_SDRAM_Init+0xac>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <BSP_SDRAM_Init+0xac>)
 8002f42:	2204      	movs	r2, #4
 8002f44:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002f46:	4b19      	ldr	r3, [pc, #100]	; (8002fac <BSP_SDRAM_Init+0xac>)
 8002f48:	2210      	movs	r2, #16
 8002f4a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002f4c:	4b17      	ldr	r3, [pc, #92]	; (8002fac <BSP_SDRAM_Init+0xac>)
 8002f4e:	2240      	movs	r2, #64	; 0x40
 8002f50:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002f52:	4b16      	ldr	r3, [pc, #88]	; (8002fac <BSP_SDRAM_Init+0xac>)
 8002f54:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002f58:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <BSP_SDRAM_Init+0xac>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <BSP_SDRAM_Init+0xac>)
 8002f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f66:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002f68:	4b10      	ldr	r3, [pc, #64]	; (8002fac <BSP_SDRAM_Init+0xac>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <BSP_SDRAM_Init+0xac>)
 8002f70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002f76:	2100      	movs	r1, #0
 8002f78:	480c      	ldr	r0, [pc, #48]	; (8002fac <BSP_SDRAM_Init+0xac>)
 8002f7a:	f000 f87f 	bl	800307c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002f7e:	490d      	ldr	r1, [pc, #52]	; (8002fb4 <BSP_SDRAM_Init+0xb4>)
 8002f80:	480a      	ldr	r0, [pc, #40]	; (8002fac <BSP_SDRAM_Init+0xac>)
 8002f82:	f003 fddb 	bl	8006b3c <HAL_SDRAM_Init>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <BSP_SDRAM_Init+0xb8>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	e002      	b.n	8002f9a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <BSP_SDRAM_Init+0xb8>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002f9a:	f240 506a 	movw	r0, #1386	; 0x56a
 8002f9e:	f000 f80d 	bl	8002fbc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <BSP_SDRAM_Init+0xb8>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200005a4 	.word	0x200005a4
 8002fb0:	a0000140 	.word	0xa0000140
 8002fb4:	200005d8 	.word	0x200005d8
 8002fb8:	2000007c 	.word	0x2000007c

08002fbc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002fce:	4b29      	ldr	r3, [pc, #164]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002fd4:	4b27      	ldr	r3, [pc, #156]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002fda:	4b26      	ldr	r3, [pc, #152]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fe4:	4923      	ldr	r1, [pc, #140]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002fe6:	4824      	ldr	r0, [pc, #144]	; (8003078 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002fe8:	f003 fde6 	bl	8006bb8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002fec:	2001      	movs	r0, #1
 8002fee:	f000 f9c3 	bl	8003378 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002ff8:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ffa:	2208      	movs	r2, #8
 8002ffc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003000:	2201      	movs	r2, #1
 8003002:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003006:	2200      	movs	r2, #0
 8003008:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800300a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800300e:	4919      	ldr	r1, [pc, #100]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003010:	4819      	ldr	r0, [pc, #100]	; (8003078 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003012:	f003 fdd1 	bl	8006bb8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003016:	4b17      	ldr	r3, [pc, #92]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003018:	2203      	movs	r2, #3
 800301a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800301c:	4b15      	ldr	r3, [pc, #84]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800301e:	2208      	movs	r2, #8
 8003020:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003024:	2204      	movs	r2, #4
 8003026:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800302a:	2200      	movs	r2, #0
 800302c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800302e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003032:	4910      	ldr	r1, [pc, #64]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003034:	4810      	ldr	r0, [pc, #64]	; (8003078 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003036:	f003 fdbf 	bl	8006bb8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800303a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800303e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003042:	2204      	movs	r2, #4
 8003044:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003048:	2208      	movs	r2, #8
 800304a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800304c:	4b09      	ldr	r3, [pc, #36]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800304e:	2201      	movs	r2, #1
 8003050:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4a07      	ldr	r2, [pc, #28]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003056:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800305c:	4905      	ldr	r1, [pc, #20]	; (8003074 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800305e:	4806      	ldr	r0, [pc, #24]	; (8003078 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003060:	f003 fdaa 	bl	8006bb8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4804      	ldr	r0, [pc, #16]	; (8003078 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003068:	f003 fddb 	bl	8006c22 <HAL_SDRAM_ProgramRefreshRate>
}
 800306c:	bf00      	nop
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	200005f4 	.word	0x200005f4
 8003078:	200005a4 	.word	0x200005a4

0800307c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b090      	sub	sp, #64	; 0x40
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80ec 	beq.w	8003266 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
 8003092:	4b77      	ldr	r3, [pc, #476]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	4a76      	ldr	r2, [pc, #472]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	6393      	str	r3, [r2, #56]	; 0x38
 800309e:	4b74      	ldr	r3, [pc, #464]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
 80030ae:	4b70      	ldr	r3, [pc, #448]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	4a6f      	ldr	r2, [pc, #444]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 80030b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030b8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ba:	4b6d      	ldr	r3, [pc, #436]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]
 80030ca:	4b69      	ldr	r3, [pc, #420]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a68      	ldr	r2, [pc, #416]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b66      	ldr	r3, [pc, #408]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	623b      	str	r3, [r7, #32]
 80030e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	4b62      	ldr	r3, [pc, #392]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4a61      	ldr	r2, [pc, #388]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	6313      	str	r3, [r2, #48]	; 0x30
 80030f2:	4b5f      	ldr	r3, [pc, #380]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	4b5b      	ldr	r3, [pc, #364]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a5a      	ldr	r2, [pc, #360]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 8003108:	f043 0308 	orr.w	r3, r3, #8
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b58      	ldr	r3, [pc, #352]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	4b54      	ldr	r3, [pc, #336]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	4a53      	ldr	r2, [pc, #332]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 8003124:	f043 0310 	orr.w	r3, r3, #16
 8003128:	6313      	str	r3, [r2, #48]	; 0x30
 800312a:	4b51      	ldr	r3, [pc, #324]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	4b4d      	ldr	r3, [pc, #308]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a4c      	ldr	r2, [pc, #304]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 8003140:	f043 0320 	orr.w	r3, r3, #32
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	4b4a      	ldr	r3, [pc, #296]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	4b46      	ldr	r3, [pc, #280]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4a45      	ldr	r2, [pc, #276]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 800315c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003160:	6313      	str	r3, [r2, #48]	; 0x30
 8003162:	4b43      	ldr	r3, [pc, #268]	; (8003270 <BSP_SDRAM_MspInit+0x1f4>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003172:	2302      	movs	r3, #2
 8003174:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800317a:	230c      	movs	r3, #12
 800317c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800317e:	2360      	movs	r3, #96	; 0x60
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003186:	4619      	mov	r1, r3
 8003188:	483a      	ldr	r0, [pc, #232]	; (8003274 <BSP_SDRAM_MspInit+0x1f8>)
 800318a:	f000 fe7f 	bl	8003e8c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800318e:	2301      	movs	r3, #1
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003196:	4619      	mov	r1, r3
 8003198:	4837      	ldr	r0, [pc, #220]	; (8003278 <BSP_SDRAM_MspInit+0x1fc>)
 800319a:	f000 fe77 	bl	8003e8c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800319e:	f24c 7303 	movw	r3, #50947	; 0xc703
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80031a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a8:	4619      	mov	r1, r3
 80031aa:	4834      	ldr	r0, [pc, #208]	; (800327c <BSP_SDRAM_MspInit+0x200>)
 80031ac:	f000 fe6e 	bl	8003e8c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80031b0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80031b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031ba:	4619      	mov	r1, r3
 80031bc:	4830      	ldr	r0, [pc, #192]	; (8003280 <BSP_SDRAM_MspInit+0x204>)
 80031be:	f000 fe65 	bl	8003e8c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80031c2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80031c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031cc:	4619      	mov	r1, r3
 80031ce:	482d      	ldr	r0, [pc, #180]	; (8003284 <BSP_SDRAM_MspInit+0x208>)
 80031d0:	f000 fe5c 	bl	8003e8c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80031d4:	f248 1333 	movw	r3, #33075	; 0x8133
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80031da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031de:	4619      	mov	r1, r3
 80031e0:	4829      	ldr	r0, [pc, #164]	; (8003288 <BSP_SDRAM_MspInit+0x20c>)
 80031e2:	f000 fe53 	bl	8003e8c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80031e6:	4b29      	ldr	r3, [pc, #164]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80031ec:	4b27      	ldr	r3, [pc, #156]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 80031ee:	2280      	movs	r2, #128	; 0x80
 80031f0:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80031f2:	4b26      	ldr	r3, [pc, #152]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 80031f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f8:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80031fa:	4b24      	ldr	r3, [pc, #144]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 80031fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003200:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003202:	4b22      	ldr	r3, [pc, #136]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 8003204:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003208:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 800320c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003210:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003212:	4b1e      	ldr	r3, [pc, #120]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 8003214:	2200      	movs	r2, #0
 8003216:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003218:	4b1c      	ldr	r3, [pc, #112]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 800321a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800321e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 8003222:	2200      	movs	r2, #0
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003226:	4b19      	ldr	r3, [pc, #100]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 8003228:	2203      	movs	r2, #3
 800322a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 800322e:	2200      	movs	r2, #0
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 800323a:	4a15      	ldr	r2, [pc, #84]	; (8003290 <BSP_SDRAM_MspInit+0x214>)
 800323c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a12      	ldr	r2, [pc, #72]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
 8003244:	4a11      	ldr	r2, [pc, #68]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800324a:	4810      	ldr	r0, [pc, #64]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 800324c:	f000 fa78 	bl	8003740 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003250:	480e      	ldr	r0, [pc, #56]	; (800328c <BSP_SDRAM_MspInit+0x210>)
 8003252:	f000 f9c7 	bl	80035e4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003256:	2200      	movs	r2, #0
 8003258:	210f      	movs	r1, #15
 800325a:	2038      	movs	r0, #56	; 0x38
 800325c:	f000 f98b 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003260:	2038      	movs	r0, #56	; 0x38
 8003262:	f000 f9a4 	bl	80035ae <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003266:	bf00      	nop
 8003268:	3740      	adds	r7, #64	; 0x40
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	40020400 	.word	0x40020400
 8003278:	40020800 	.word	0x40020800
 800327c:	40020c00 	.word	0x40020c00
 8003280:	40021000 	.word	0x40021000
 8003284:	40021400 	.word	0x40021400
 8003288:	40021800 	.word	0x40021800
 800328c:	20000604 	.word	0x20000604
 8003290:	40026410 	.word	0x40026410

08003294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003298:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <HAL_Init+0x40>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a0d      	ldr	r2, [pc, #52]	; (80032d4 <HAL_Init+0x40>)
 800329e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_Init+0x40>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <HAL_Init+0x40>)
 80032aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b0:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_Init+0x40>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a07      	ldr	r2, [pc, #28]	; (80032d4 <HAL_Init+0x40>)
 80032b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032bc:	2003      	movs	r0, #3
 80032be:	f000 f94f 	bl	8003560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032c2:	200f      	movs	r0, #15
 80032c4:	f000 f808 	bl	80032d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032c8:	f7fe f97e 	bl	80015c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023c00 	.word	0x40023c00

080032d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_InitTick+0x54>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_InitTick+0x58>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	4619      	mov	r1, r3
 80032ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f967 	bl	80035ca <HAL_SYSTICK_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e00e      	b.n	8003324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b0f      	cmp	r3, #15
 800330a:	d80a      	bhi.n	8003322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800330c:	2200      	movs	r2, #0
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	f04f 30ff 	mov.w	r0, #4294967295
 8003314:	f000 f92f 	bl	8003576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003318:	4a06      	ldr	r2, [pc, #24]	; (8003334 <HAL_InitTick+0x5c>)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000000 	.word	0x20000000
 8003330:	20000084 	.word	0x20000084
 8003334:	20000080 	.word	0x20000080

08003338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_IncTick+0x20>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_IncTick+0x24>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4413      	add	r3, r2
 8003348:	4a04      	ldr	r2, [pc, #16]	; (800335c <HAL_IncTick+0x24>)
 800334a:	6013      	str	r3, [r2, #0]
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	20000084 	.word	0x20000084
 800335c:	20000664 	.word	0x20000664

08003360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return uwTick;
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <HAL_GetTick+0x14>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000664 	.word	0x20000664

08003378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003380:	f7ff ffee 	bl	8003360 <HAL_GetTick>
 8003384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d005      	beq.n	800339e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HAL_Delay+0x44>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800339e:	bf00      	nop
 80033a0:	f7ff ffde 	bl	8003360 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d8f7      	bhi.n	80033a0 <HAL_Delay+0x28>
  {
  }
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000084 	.word	0x20000084

080033c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <__NVIC_SetPriorityGrouping+0x44>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033dc:	4013      	ands	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033f2:	4a04      	ldr	r2, [pc, #16]	; (8003404 <__NVIC_SetPriorityGrouping+0x44>)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	60d3      	str	r3, [r2, #12]
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <__NVIC_GetPriorityGrouping+0x18>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	0a1b      	lsrs	r3, r3, #8
 8003412:	f003 0307 	and.w	r3, r3, #7
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	2b00      	cmp	r3, #0
 8003434:	db0b      	blt.n	800344e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	4907      	ldr	r1, [pc, #28]	; (800345c <__NVIC_EnableIRQ+0x38>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2001      	movs	r0, #1
 8003446:	fa00 f202 	lsl.w	r2, r0, r2
 800344a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	e000e100 	.word	0xe000e100

08003460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	6039      	str	r1, [r7, #0]
 800346a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	2b00      	cmp	r3, #0
 8003472:	db0a      	blt.n	800348a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	490c      	ldr	r1, [pc, #48]	; (80034ac <__NVIC_SetPriority+0x4c>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	0112      	lsls	r2, r2, #4
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	440b      	add	r3, r1
 8003484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003488:	e00a      	b.n	80034a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4908      	ldr	r1, [pc, #32]	; (80034b0 <__NVIC_SetPriority+0x50>)
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	3b04      	subs	r3, #4
 8003498:	0112      	lsls	r2, r2, #4
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	440b      	add	r3, r1
 800349e:	761a      	strb	r2, [r3, #24]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000e100 	.word	0xe000e100
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f1c3 0307 	rsb	r3, r3, #7
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	bf28      	it	cs
 80034d2:	2304      	movcs	r3, #4
 80034d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3304      	adds	r3, #4
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d902      	bls.n	80034e4 <NVIC_EncodePriority+0x30>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3b03      	subs	r3, #3
 80034e2:	e000      	b.n	80034e6 <NVIC_EncodePriority+0x32>
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	401a      	ands	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	43d9      	mvns	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	4313      	orrs	r3, r2
         );
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	; 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800352c:	d301      	bcc.n	8003532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800352e:	2301      	movs	r3, #1
 8003530:	e00f      	b.n	8003552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003532:	4a0a      	ldr	r2, [pc, #40]	; (800355c <SysTick_Config+0x40>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353a:	210f      	movs	r1, #15
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	f7ff ff8e 	bl	8003460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <SysTick_Config+0x40>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <SysTick_Config+0x40>)
 800354c:	2207      	movs	r2, #7
 800354e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	e000e010 	.word	0xe000e010

08003560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff29 	bl	80033c0 <__NVIC_SetPriorityGrouping>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003588:	f7ff ff3e 	bl	8003408 <__NVIC_GetPriorityGrouping>
 800358c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f7ff ff8e 	bl	80034b4 <NVIC_EncodePriority>
 8003598:	4602      	mov	r2, r0
 800359a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff5d 	bl	8003460 <__NVIC_SetPriority>
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff31 	bl	8003424 <__NVIC_EnableIRQ>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ffa2 	bl	800351c <SysTick_Config>
 80035d8:	4603      	mov	r3, r0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035f0:	f7ff feb6 	bl	8003360 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e099      	b.n	8003734 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003620:	e00f      	b.n	8003642 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003622:	f7ff fe9d 	bl	8003360 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b05      	cmp	r3, #5
 800362e:	d908      	bls.n	8003642 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2203      	movs	r2, #3
 800363a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e078      	b.n	8003734 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e8      	bne.n	8003622 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4b38      	ldr	r3, [pc, #224]	; (800373c <HAL_DMA_Init+0x158>)
 800365c:	4013      	ands	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800366e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800367a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003686:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	2b04      	cmp	r3, #4
 800369a:	d107      	bne.n	80036ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	4313      	orrs	r3, r2
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f023 0307 	bic.w	r3, r3, #7
 80036c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d117      	bne.n	8003706 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00e      	beq.n	8003706 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8bd 	bl	8003868 <DMA_CheckFifoParam>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2240      	movs	r2, #64	; 0x40
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003702:	2301      	movs	r3, #1
 8003704:	e016      	b.n	8003734 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f874 	bl	80037fc <DMA_CalcBaseAndBitshift>
 8003714:	4603      	mov	r3, r0
 8003716:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	223f      	movs	r2, #63	; 0x3f
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	f010803f 	.word	0xf010803f

08003740 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e050      	b.n	80037f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d101      	bne.n	8003762 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
 8003760:	e048      	b.n	80037f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2221      	movs	r2, #33	; 0x21
 80037a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f82a 	bl	80037fc <DMA_CalcBaseAndBitshift>
 80037a8:	4603      	mov	r3, r0
 80037aa:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	223f      	movs	r2, #63	; 0x3f
 80037d6:	409a      	lsls	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	3b10      	subs	r3, #16
 800380c:	4a14      	ldr	r2, [pc, #80]	; (8003860 <DMA_CalcBaseAndBitshift+0x64>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003816:	4a13      	ldr	r2, [pc, #76]	; (8003864 <DMA_CalcBaseAndBitshift+0x68>)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b03      	cmp	r3, #3
 8003828:	d909      	bls.n	800383e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003832:	f023 0303 	bic.w	r3, r3, #3
 8003836:	1d1a      	adds	r2, r3, #4
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	659a      	str	r2, [r3, #88]	; 0x58
 800383c:	e007      	b.n	800384e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	aaaaaaab 	.word	0xaaaaaaab
 8003864:	08010634 	.word	0x08010634

08003868 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d11f      	bne.n	80038c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d856      	bhi.n	8003936 <DMA_CheckFifoParam+0xce>
 8003888:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <DMA_CheckFifoParam+0x28>)
 800388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388e:	bf00      	nop
 8003890:	080038a1 	.word	0x080038a1
 8003894:	080038b3 	.word	0x080038b3
 8003898:	080038a1 	.word	0x080038a1
 800389c:	08003937 	.word	0x08003937
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d046      	beq.n	800393a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b0:	e043      	b.n	800393a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038ba:	d140      	bne.n	800393e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c0:	e03d      	b.n	800393e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ca:	d121      	bne.n	8003910 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d837      	bhi.n	8003942 <DMA_CheckFifoParam+0xda>
 80038d2:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <DMA_CheckFifoParam+0x70>)
 80038d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d8:	080038e9 	.word	0x080038e9
 80038dc:	080038ef 	.word	0x080038ef
 80038e0:	080038e9 	.word	0x080038e9
 80038e4:	08003901 	.word	0x08003901
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
      break;
 80038ec:	e030      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d025      	beq.n	8003946 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fe:	e022      	b.n	8003946 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003908:	d11f      	bne.n	800394a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800390e:	e01c      	b.n	800394a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d903      	bls.n	800391e <DMA_CheckFifoParam+0xb6>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d003      	beq.n	8003924 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800391c:	e018      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
      break;
 8003922:	e015      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00e      	beq.n	800394e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      break;
 8003934:	e00b      	b.n	800394e <DMA_CheckFifoParam+0xe6>
      break;
 8003936:	bf00      	nop
 8003938:	e00a      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      break;
 800393a:	bf00      	nop
 800393c:	e008      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      break;
 800393e:	bf00      	nop
 8003940:	e006      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      break;
 8003942:	bf00      	nop
 8003944:	e004      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      break;
 8003946:	bf00      	nop
 8003948:	e002      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      break;   
 800394a:	bf00      	nop
 800394c:	e000      	b.n	8003950 <DMA_CheckFifoParam+0xe8>
      break;
 800394e:	bf00      	nop
    }
  } 
  
  return status; 
 8003950:	7bfb      	ldrb	r3, [r7, #15]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop

08003960 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e03b      	b.n	80039ea <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f833 	bl	80039f2 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b0:	f023 0107 	bic.w	r1, r3, #7
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d1      	ldr	r1, [r2, #12]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	430b      	orrs	r3, r1
 80039d8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af02      	add	r7, sp, #8
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_DMA2D_Start+0x1c>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e018      	b.n	8003a54 <HAL_DMA2D_Start+0x4e>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f989 	bl	8003d54 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d056      	beq.n	8003b26 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a78:	f7ff fc72 	bl	8003360 <HAL_GetTick>
 8003a7c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003a7e:	e04b      	b.n	8003b18 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d023      	beq.n	8003ada <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	f043 0202 	orr.w	r2, r3, #2
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2221      	movs	r2, #33	; 0x21
 8003ac4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2204      	movs	r2, #4
 8003aca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e0a5      	b.n	8003c26 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d01a      	beq.n	8003b18 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ae2:	f7ff fc3d 	bl	8003360 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d302      	bcc.n	8003af8 <HAL_DMA2D_PollForTransfer+0x9c>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10f      	bne.n	8003b18 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2203      	movs	r2, #3
 8003b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e086      	b.n	8003c26 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0ac      	beq.n	8003a80 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d061      	beq.n	8003c0c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b48:	f7ff fc0a 	bl	8003360 <HAL_GetTick>
 8003b4c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003b4e:	e056      	b.n	8003bfe <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d02e      	beq.n	8003bc0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b70:	f043 0204 	orr.w	r2, r3, #4
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	f043 0202 	orr.w	r2, r3, #2
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	f043 0201 	orr.w	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2229      	movs	r2, #41	; 0x29
 8003baa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2204      	movs	r2, #4
 8003bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e032      	b.n	8003c26 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d01a      	beq.n	8003bfe <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bc8:	f7ff fbca 	bl	8003360 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d302      	bcc.n	8003bde <HAL_DMA2D_PollForTransfer+0x182>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10f      	bne.n	8003bfe <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	f043 0220 	orr.w	r2, r3, #32
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2203      	movs	r2, #3
 8003bee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e013      	b.n	8003c26 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0a1      	beq.n	8003b50 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2212      	movs	r2, #18
 8003c12:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_DMA2D_ConfigLayer+0x20>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e079      	b.n	8003d44 <HAL_DMA2D_ConfigLayer+0x114>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	3318      	adds	r3, #24
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003c7a:	4b35      	ldr	r3, [pc, #212]	; (8003d50 <HAL_DMA2D_ConfigLayer+0x120>)
 8003c7c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b0a      	cmp	r3, #10
 8003c84:	d003      	beq.n	8003c8e <HAL_DMA2D_ConfigLayer+0x5e>
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b09      	cmp	r3, #9
 8003c8c:	d107      	bne.n	8003c9e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e005      	b.n	8003caa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	061b      	lsls	r3, r3, #24
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d120      	bne.n	8003cf2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	ea02 0103 	and.w	r1, r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b0a      	cmp	r3, #10
 8003cd8:	d003      	beq.n	8003ce2 <HAL_DMA2D_ConfigLayer+0xb2>
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b09      	cmp	r3, #9
 8003ce0:	d127      	bne.n	8003d32 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
 8003cf0:	e01f      	b.n	8003d32 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	ea02 0103 	and.w	r1, r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b0a      	cmp	r3, #10
 8003d1a:	d003      	beq.n	8003d24 <HAL_DMA2D_ConfigLayer+0xf4>
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b09      	cmp	r3, #9
 8003d22:	d106      	bne.n	8003d32 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d30:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	ff03000f 	.word	0xff03000f

08003d54 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b08b      	sub	sp, #44	; 0x2c
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	041a      	lsls	r2, r3, #16
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	431a      	orrs	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d8c:	d174      	bne.n	8003e78 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d94:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d9c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003da4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d108      	bne.n	8003dc6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc4:	e053      	b.n	8003e6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d106      	bne.n	8003ddc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dda:	e048      	b.n	8003e6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d111      	bne.n	8003e08 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	0cdb      	lsrs	r3, r3, #19
 8003de8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	0a9b      	lsrs	r3, r3, #10
 8003dee:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	08db      	lsrs	r3, r3, #3
 8003df4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	02db      	lsls	r3, r3, #11
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	e032      	b.n	8003e6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d117      	bne.n	8003e40 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	0fdb      	lsrs	r3, r3, #31
 8003e14:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	0cdb      	lsrs	r3, r3, #19
 8003e1a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	0adb      	lsrs	r3, r3, #11
 8003e20:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	08db      	lsrs	r3, r3, #3
 8003e26:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	029b      	lsls	r3, r3, #10
 8003e30:	431a      	orrs	r2, r3
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	03db      	lsls	r3, r3, #15
 8003e36:	4313      	orrs	r3, r2
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	e016      	b.n	8003e6e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	0f1b      	lsrs	r3, r3, #28
 8003e44:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	0d1b      	lsrs	r3, r3, #20
 8003e4a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	0b1b      	lsrs	r3, r3, #12
 8003e50:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	011a      	lsls	r2, r3, #4
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	431a      	orrs	r2, r3
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	031b      	lsls	r3, r3, #12
 8003e66:	4313      	orrs	r3, r2
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003e76:	e003      	b.n	8003e80 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	60da      	str	r2, [r3, #12]
}
 8003e80:	bf00      	nop
 8003e82:	372c      	adds	r7, #44	; 0x2c
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	; 0x24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	e177      	b.n	8004198 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	f040 8166 	bne.w	8004192 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d005      	beq.n	8003ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d130      	bne.n	8003f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	2203      	movs	r2, #3
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f14:	2201      	movs	r2, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 0201 	and.w	r2, r3, #1
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d017      	beq.n	8003f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d123      	bne.n	8003fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	08da      	lsrs	r2, r3, #3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3208      	adds	r2, #8
 8003f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	220f      	movs	r2, #15
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	08da      	lsrs	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3208      	adds	r2, #8
 8003fca:	69b9      	ldr	r1, [r7, #24]
 8003fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0203 	and.w	r2, r3, #3
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80c0 	beq.w	8004192 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	4b66      	ldr	r3, [pc, #408]	; (80041b0 <HAL_GPIO_Init+0x324>)
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	4a65      	ldr	r2, [pc, #404]	; (80041b0 <HAL_GPIO_Init+0x324>)
 800401c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004020:	6453      	str	r3, [r2, #68]	; 0x44
 8004022:	4b63      	ldr	r3, [pc, #396]	; (80041b0 <HAL_GPIO_Init+0x324>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800402e:	4a61      	ldr	r2, [pc, #388]	; (80041b4 <HAL_GPIO_Init+0x328>)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	3302      	adds	r3, #2
 8004036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	220f      	movs	r2, #15
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a58      	ldr	r2, [pc, #352]	; (80041b8 <HAL_GPIO_Init+0x32c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d037      	beq.n	80040ca <HAL_GPIO_Init+0x23e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a57      	ldr	r2, [pc, #348]	; (80041bc <HAL_GPIO_Init+0x330>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d031      	beq.n	80040c6 <HAL_GPIO_Init+0x23a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a56      	ldr	r2, [pc, #344]	; (80041c0 <HAL_GPIO_Init+0x334>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d02b      	beq.n	80040c2 <HAL_GPIO_Init+0x236>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a55      	ldr	r2, [pc, #340]	; (80041c4 <HAL_GPIO_Init+0x338>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d025      	beq.n	80040be <HAL_GPIO_Init+0x232>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a54      	ldr	r2, [pc, #336]	; (80041c8 <HAL_GPIO_Init+0x33c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01f      	beq.n	80040ba <HAL_GPIO_Init+0x22e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a53      	ldr	r2, [pc, #332]	; (80041cc <HAL_GPIO_Init+0x340>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d019      	beq.n	80040b6 <HAL_GPIO_Init+0x22a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a52      	ldr	r2, [pc, #328]	; (80041d0 <HAL_GPIO_Init+0x344>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_GPIO_Init+0x226>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a51      	ldr	r2, [pc, #324]	; (80041d4 <HAL_GPIO_Init+0x348>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00d      	beq.n	80040ae <HAL_GPIO_Init+0x222>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a50      	ldr	r2, [pc, #320]	; (80041d8 <HAL_GPIO_Init+0x34c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d007      	beq.n	80040aa <HAL_GPIO_Init+0x21e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a4f      	ldr	r2, [pc, #316]	; (80041dc <HAL_GPIO_Init+0x350>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <HAL_GPIO_Init+0x21a>
 80040a2:	2309      	movs	r3, #9
 80040a4:	e012      	b.n	80040cc <HAL_GPIO_Init+0x240>
 80040a6:	230a      	movs	r3, #10
 80040a8:	e010      	b.n	80040cc <HAL_GPIO_Init+0x240>
 80040aa:	2308      	movs	r3, #8
 80040ac:	e00e      	b.n	80040cc <HAL_GPIO_Init+0x240>
 80040ae:	2307      	movs	r3, #7
 80040b0:	e00c      	b.n	80040cc <HAL_GPIO_Init+0x240>
 80040b2:	2306      	movs	r3, #6
 80040b4:	e00a      	b.n	80040cc <HAL_GPIO_Init+0x240>
 80040b6:	2305      	movs	r3, #5
 80040b8:	e008      	b.n	80040cc <HAL_GPIO_Init+0x240>
 80040ba:	2304      	movs	r3, #4
 80040bc:	e006      	b.n	80040cc <HAL_GPIO_Init+0x240>
 80040be:	2303      	movs	r3, #3
 80040c0:	e004      	b.n	80040cc <HAL_GPIO_Init+0x240>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e002      	b.n	80040cc <HAL_GPIO_Init+0x240>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <HAL_GPIO_Init+0x240>
 80040ca:	2300      	movs	r3, #0
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	f002 0203 	and.w	r2, r2, #3
 80040d2:	0092      	lsls	r2, r2, #2
 80040d4:	4093      	lsls	r3, r2
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040dc:	4935      	ldr	r1, [pc, #212]	; (80041b4 <HAL_GPIO_Init+0x328>)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	3302      	adds	r3, #2
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ea:	4b3d      	ldr	r3, [pc, #244]	; (80041e0 <HAL_GPIO_Init+0x354>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800410e:	4a34      	ldr	r2, [pc, #208]	; (80041e0 <HAL_GPIO_Init+0x354>)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004114:	4b32      	ldr	r3, [pc, #200]	; (80041e0 <HAL_GPIO_Init+0x354>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	43db      	mvns	r3, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4013      	ands	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004138:	4a29      	ldr	r2, [pc, #164]	; (80041e0 <HAL_GPIO_Init+0x354>)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800413e:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <HAL_GPIO_Init+0x354>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	43db      	mvns	r3, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4013      	ands	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004162:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <HAL_GPIO_Init+0x354>)
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004168:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <HAL_GPIO_Init+0x354>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	43db      	mvns	r3, r3
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4013      	ands	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800418c:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <HAL_GPIO_Init+0x354>)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	3301      	adds	r3, #1
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	2b0f      	cmp	r3, #15
 800419c:	f67f ae84 	bls.w	8003ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	3724      	adds	r7, #36	; 0x24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800
 80041b4:	40013800 	.word	0x40013800
 80041b8:	40020000 	.word	0x40020000
 80041bc:	40020400 	.word	0x40020400
 80041c0:	40020800 	.word	0x40020800
 80041c4:	40020c00 	.word	0x40020c00
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40021400 	.word	0x40021400
 80041d0:	40021800 	.word	0x40021800
 80041d4:	40021c00 	.word	0x40021c00
 80041d8:	40022000 	.word	0x40022000
 80041dc:	40022400 	.word	0x40022400
 80041e0:	40013c00 	.word	0x40013c00

080041e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e0d9      	b.n	80043b4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004200:	2201      	movs	r2, #1
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4013      	ands	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	429a      	cmp	r2, r3
 8004218:	f040 80c9 	bne.w	80043ae <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800421c:	4a6b      	ldr	r2, [pc, #428]	; (80043cc <HAL_GPIO_DeInit+0x1e8>)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	089b      	lsrs	r3, r3, #2
 8004222:	3302      	adds	r3, #2
 8004224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004228:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	220f      	movs	r2, #15
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a63      	ldr	r2, [pc, #396]	; (80043d0 <HAL_GPIO_DeInit+0x1ec>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d037      	beq.n	80042b6 <HAL_GPIO_DeInit+0xd2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a62      	ldr	r2, [pc, #392]	; (80043d4 <HAL_GPIO_DeInit+0x1f0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d031      	beq.n	80042b2 <HAL_GPIO_DeInit+0xce>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a61      	ldr	r2, [pc, #388]	; (80043d8 <HAL_GPIO_DeInit+0x1f4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d02b      	beq.n	80042ae <HAL_GPIO_DeInit+0xca>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a60      	ldr	r2, [pc, #384]	; (80043dc <HAL_GPIO_DeInit+0x1f8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d025      	beq.n	80042aa <HAL_GPIO_DeInit+0xc6>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a5f      	ldr	r2, [pc, #380]	; (80043e0 <HAL_GPIO_DeInit+0x1fc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01f      	beq.n	80042a6 <HAL_GPIO_DeInit+0xc2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a5e      	ldr	r2, [pc, #376]	; (80043e4 <HAL_GPIO_DeInit+0x200>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d019      	beq.n	80042a2 <HAL_GPIO_DeInit+0xbe>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a5d      	ldr	r2, [pc, #372]	; (80043e8 <HAL_GPIO_DeInit+0x204>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <HAL_GPIO_DeInit+0xba>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a5c      	ldr	r2, [pc, #368]	; (80043ec <HAL_GPIO_DeInit+0x208>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00d      	beq.n	800429a <HAL_GPIO_DeInit+0xb6>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a5b      	ldr	r2, [pc, #364]	; (80043f0 <HAL_GPIO_DeInit+0x20c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <HAL_GPIO_DeInit+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a5a      	ldr	r2, [pc, #360]	; (80043f4 <HAL_GPIO_DeInit+0x210>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d101      	bne.n	8004292 <HAL_GPIO_DeInit+0xae>
 800428e:	2309      	movs	r3, #9
 8004290:	e012      	b.n	80042b8 <HAL_GPIO_DeInit+0xd4>
 8004292:	230a      	movs	r3, #10
 8004294:	e010      	b.n	80042b8 <HAL_GPIO_DeInit+0xd4>
 8004296:	2308      	movs	r3, #8
 8004298:	e00e      	b.n	80042b8 <HAL_GPIO_DeInit+0xd4>
 800429a:	2307      	movs	r3, #7
 800429c:	e00c      	b.n	80042b8 <HAL_GPIO_DeInit+0xd4>
 800429e:	2306      	movs	r3, #6
 80042a0:	e00a      	b.n	80042b8 <HAL_GPIO_DeInit+0xd4>
 80042a2:	2305      	movs	r3, #5
 80042a4:	e008      	b.n	80042b8 <HAL_GPIO_DeInit+0xd4>
 80042a6:	2304      	movs	r3, #4
 80042a8:	e006      	b.n	80042b8 <HAL_GPIO_DeInit+0xd4>
 80042aa:	2303      	movs	r3, #3
 80042ac:	e004      	b.n	80042b8 <HAL_GPIO_DeInit+0xd4>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e002      	b.n	80042b8 <HAL_GPIO_DeInit+0xd4>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <HAL_GPIO_DeInit+0xd4>
 80042b6:	2300      	movs	r3, #0
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	f002 0203 	and.w	r2, r2, #3
 80042be:	0092      	lsls	r2, r2, #2
 80042c0:	4093      	lsls	r3, r2
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d132      	bne.n	800432e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80042c8:	4b4b      	ldr	r3, [pc, #300]	; (80043f8 <HAL_GPIO_DeInit+0x214>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	43db      	mvns	r3, r3
 80042d0:	4949      	ldr	r1, [pc, #292]	; (80043f8 <HAL_GPIO_DeInit+0x214>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80042d6:	4b48      	ldr	r3, [pc, #288]	; (80043f8 <HAL_GPIO_DeInit+0x214>)
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	43db      	mvns	r3, r3
 80042de:	4946      	ldr	r1, [pc, #280]	; (80043f8 <HAL_GPIO_DeInit+0x214>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80042e4:	4b44      	ldr	r3, [pc, #272]	; (80043f8 <HAL_GPIO_DeInit+0x214>)
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	43db      	mvns	r3, r3
 80042ec:	4942      	ldr	r1, [pc, #264]	; (80043f8 <HAL_GPIO_DeInit+0x214>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80042f2:	4b41      	ldr	r3, [pc, #260]	; (80043f8 <HAL_GPIO_DeInit+0x214>)
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	43db      	mvns	r3, r3
 80042fa:	493f      	ldr	r1, [pc, #252]	; (80043f8 <HAL_GPIO_DeInit+0x214>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	220f      	movs	r2, #15
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004310:	4a2e      	ldr	r2, [pc, #184]	; (80043cc <HAL_GPIO_DeInit+0x1e8>)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	089b      	lsrs	r3, r3, #2
 8004316:	3302      	adds	r3, #2
 8004318:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	43da      	mvns	r2, r3
 8004320:	482a      	ldr	r0, [pc, #168]	; (80043cc <HAL_GPIO_DeInit+0x1e8>)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	089b      	lsrs	r3, r3, #2
 8004326:	400a      	ands	r2, r1
 8004328:	3302      	adds	r3, #2
 800432a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	2103      	movs	r1, #3
 8004338:	fa01 f303 	lsl.w	r3, r1, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	401a      	ands	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	08da      	lsrs	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3208      	adds	r2, #8
 800434c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	220f      	movs	r2, #15
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	08d2      	lsrs	r2, r2, #3
 8004364:	4019      	ands	r1, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3208      	adds	r2, #8
 800436a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	2103      	movs	r1, #3
 8004378:	fa01 f303 	lsl.w	r3, r1, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	401a      	ands	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	2101      	movs	r1, #1
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	fa01 f303 	lsl.w	r3, r1, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	401a      	ands	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	2103      	movs	r1, #3
 80043a2:	fa01 f303 	lsl.w	r3, r1, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	401a      	ands	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	3301      	adds	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b0f      	cmp	r3, #15
 80043b8:	f67f af22 	bls.w	8004200 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80043bc:	bf00      	nop
 80043be:	bf00      	nop
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40013800 	.word	0x40013800
 80043d0:	40020000 	.word	0x40020000
 80043d4:	40020400 	.word	0x40020400
 80043d8:	40020800 	.word	0x40020800
 80043dc:	40020c00 	.word	0x40020c00
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40021400 	.word	0x40021400
 80043e8:	40021800 	.word	0x40021800
 80043ec:	40021c00 	.word	0x40021c00
 80043f0:	40022000 	.word	0x40022000
 80043f4:	40022400 	.word	0x40022400
 80043f8:	40013c00 	.word	0x40013c00

080043fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
 8004408:	4613      	mov	r3, r2
 800440a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800440c:	787b      	ldrb	r3, [r7, #1]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004418:	e003      	b.n	8004422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	041a      	lsls	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	619a      	str	r2, [r3, #24]
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e0bf      	b.n	80045c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f8ba 	bl	80045d0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004472:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6999      	ldr	r1, [r3, #24]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004488:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6899      	ldr	r1, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4b4a      	ldr	r3, [pc, #296]	; (80045cc <HAL_LTDC_Init+0x19c>)
 80044a4:	400b      	ands	r3, r1
 80044a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	041b      	lsls	r3, r3, #16
 80044ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6899      	ldr	r1, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68d9      	ldr	r1, [r3, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4b3e      	ldr	r3, [pc, #248]	; (80045cc <HAL_LTDC_Init+0x19c>)
 80044d2:	400b      	ands	r3, r1
 80044d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68d9      	ldr	r1, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1a      	ldr	r2, [r3, #32]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6919      	ldr	r1, [r3, #16]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	4b33      	ldr	r3, [pc, #204]	; (80045cc <HAL_LTDC_Init+0x19c>)
 8004500:	400b      	ands	r3, r1
 8004502:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	041b      	lsls	r3, r3, #16
 800450a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6919      	ldr	r1, [r3, #16]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6959      	ldr	r1, [r3, #20]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4b27      	ldr	r3, [pc, #156]	; (80045cc <HAL_LTDC_Init+0x19c>)
 800452e:	400b      	ands	r3, r1
 8004530:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004536:	041b      	lsls	r3, r3, #16
 8004538:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6959      	ldr	r1, [r3, #20]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004560:	041b      	lsls	r3, r3, #16
 8004562:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004572:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0206 	orr.w	r2, r2, #6
 800459e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	f000f800 	.word	0xf000f800

080045d0 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80045e4:	b5b0      	push	{r4, r5, r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_LTDC_ConfigLayer+0x1a>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e02c      	b.n	8004658 <HAL_LTDC_ConfigLayer+0x74>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2134      	movs	r1, #52	; 0x34
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	4413      	add	r3, r2
 800461a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4614      	mov	r4, r2
 8004622:	461d      	mov	r5, r3
 8004624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800462a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800462c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800462e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f83b 	bl	80046b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2201      	movs	r2, #1
 8004644:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bdb0      	pop	{r4, r5, r7, pc}

08004660 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_LTDC_EnableDither+0x16>
 8004672:	2302      	movs	r3, #2
 8004674:	e016      	b.n	80046a4 <HAL_LTDC_EnableDither+0x44>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004686:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <HAL_LTDC_EnableDither+0x50>)
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	4a09      	ldr	r2, [pc, #36]	; (80046b0 <HAL_LTDC_EnableDither+0x50>)
 800468c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004690:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	40016800 	.word	0x40016800

080046b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b089      	sub	sp, #36	; 0x24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	0c1b      	lsrs	r3, r3, #16
 80046cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d0:	4413      	add	r3, r2
 80046d2:	041b      	lsls	r3, r3, #16
 80046d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	01db      	lsls	r3, r3, #7
 80046e0:	4413      	add	r3, r2
 80046e2:	3384      	adds	r3, #132	; 0x84
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	4611      	mov	r1, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	01d2      	lsls	r2, r2, #7
 80046f0:	440a      	add	r2, r1
 80046f2:	3284      	adds	r2, #132	; 0x84
 80046f4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80046f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	0c1b      	lsrs	r3, r3, #16
 8004706:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800470a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800470c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4619      	mov	r1, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	01db      	lsls	r3, r3, #7
 8004718:	440b      	add	r3, r1
 800471a:	3384      	adds	r3, #132	; 0x84
 800471c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004722:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004732:	4413      	add	r3, r2
 8004734:	041b      	lsls	r3, r3, #16
 8004736:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	01db      	lsls	r3, r3, #7
 8004742:	4413      	add	r3, r2
 8004744:	3384      	adds	r3, #132	; 0x84
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	4611      	mov	r1, r2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	01d2      	lsls	r2, r2, #7
 8004752:	440a      	add	r2, r1
 8004754:	3284      	adds	r2, #132	; 0x84
 8004756:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800475a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800476a:	4413      	add	r3, r2
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	01db      	lsls	r3, r3, #7
 8004778:	440b      	add	r3, r1
 800477a:	3384      	adds	r3, #132	; 0x84
 800477c:	4619      	mov	r1, r3
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4313      	orrs	r3, r2
 8004782:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	01db      	lsls	r3, r3, #7
 800478e:	4413      	add	r3, r2
 8004790:	3384      	adds	r3, #132	; 0x84
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	4611      	mov	r1, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	01d2      	lsls	r2, r2, #7
 800479e:	440a      	add	r2, r1
 80047a0:	3284      	adds	r2, #132	; 0x84
 80047a2:	f023 0307 	bic.w	r3, r3, #7
 80047a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	01db      	lsls	r3, r3, #7
 80047b2:	4413      	add	r3, r2
 80047b4:	3384      	adds	r3, #132	; 0x84
 80047b6:	461a      	mov	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80047ce:	041b      	lsls	r3, r3, #16
 80047d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	061b      	lsls	r3, r3, #24
 80047d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	01db      	lsls	r3, r3, #7
 80047e4:	4413      	add	r3, r2
 80047e6:	3384      	adds	r3, #132	; 0x84
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	01db      	lsls	r3, r3, #7
 80047f4:	4413      	add	r3, r2
 80047f6:	3384      	adds	r3, #132	; 0x84
 80047f8:	461a      	mov	r2, r3
 80047fa:	2300      	movs	r3, #0
 80047fc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004804:	461a      	mov	r2, r3
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	431a      	orrs	r2, r3
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	431a      	orrs	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4619      	mov	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	01db      	lsls	r3, r3, #7
 8004818:	440b      	add	r3, r1
 800481a:	3384      	adds	r3, #132	; 0x84
 800481c:	4619      	mov	r1, r3
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	4313      	orrs	r3, r2
 8004822:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	01db      	lsls	r3, r3, #7
 800482e:	4413      	add	r3, r2
 8004830:	3384      	adds	r3, #132	; 0x84
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	4611      	mov	r1, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	01d2      	lsls	r2, r2, #7
 800483e:	440a      	add	r2, r1
 8004840:	3284      	adds	r2, #132	; 0x84
 8004842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004846:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	01db      	lsls	r3, r3, #7
 8004852:	4413      	add	r3, r2
 8004854:	3384      	adds	r3, #132	; 0x84
 8004856:	461a      	mov	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	01db      	lsls	r3, r3, #7
 8004868:	4413      	add	r3, r2
 800486a:	3384      	adds	r3, #132	; 0x84
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	4611      	mov	r1, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	01d2      	lsls	r2, r2, #7
 8004878:	440a      	add	r2, r1
 800487a:	3284      	adds	r2, #132	; 0x84
 800487c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004880:	f023 0307 	bic.w	r3, r3, #7
 8004884:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	69da      	ldr	r2, [r3, #28]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	6809      	ldr	r1, [r1, #0]
 8004892:	4608      	mov	r0, r1
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	01c9      	lsls	r1, r1, #7
 8004898:	4401      	add	r1, r0
 800489a:	3184      	adds	r1, #132	; 0x84
 800489c:	4313      	orrs	r3, r2
 800489e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	01db      	lsls	r3, r3, #7
 80048aa:	4413      	add	r3, r2
 80048ac:	3384      	adds	r3, #132	; 0x84
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	01db      	lsls	r3, r3, #7
 80048ba:	4413      	add	r3, r2
 80048bc:	3384      	adds	r3, #132	; 0x84
 80048be:	461a      	mov	r2, r3
 80048c0:	2300      	movs	r3, #0
 80048c2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	01db      	lsls	r3, r3, #7
 80048ce:	4413      	add	r3, r2
 80048d0:	3384      	adds	r3, #132	; 0x84
 80048d2:	461a      	mov	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80048e2:	2304      	movs	r3, #4
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	e01b      	b.n	8004920 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d102      	bne.n	80048f6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80048f0:	2303      	movs	r3, #3
 80048f2:	61fb      	str	r3, [r7, #28]
 80048f4:	e014      	b.n	8004920 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d00b      	beq.n	8004916 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004902:	2b02      	cmp	r3, #2
 8004904:	d007      	beq.n	8004916 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800490a:	2b03      	cmp	r3, #3
 800490c:	d003      	beq.n	8004916 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004912:	2b07      	cmp	r3, #7
 8004914:	d102      	bne.n	800491c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004916:	2302      	movs	r3, #2
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	e001      	b.n	8004920 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800491c:	2301      	movs	r3, #1
 800491e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	01db      	lsls	r3, r3, #7
 800492a:	4413      	add	r3, r2
 800492c:	3384      	adds	r3, #132	; 0x84
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	4611      	mov	r1, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	01d2      	lsls	r2, r2, #7
 800493a:	440a      	add	r2, r1
 800493c:	3284      	adds	r2, #132	; 0x84
 800493e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004942:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	6859      	ldr	r1, [r3, #4]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	1acb      	subs	r3, r1, r3
 800495a:	69f9      	ldr	r1, [r7, #28]
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	6809      	ldr	r1, [r1, #0]
 8004966:	4608      	mov	r0, r1
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	01c9      	lsls	r1, r1, #7
 800496c:	4401      	add	r1, r0
 800496e:	3184      	adds	r1, #132	; 0x84
 8004970:	4313      	orrs	r3, r2
 8004972:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	01db      	lsls	r3, r3, #7
 800497e:	4413      	add	r3, r2
 8004980:	3384      	adds	r3, #132	; 0x84
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	4611      	mov	r1, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	01d2      	lsls	r2, r2, #7
 800498e:	440a      	add	r2, r1
 8004990:	3284      	adds	r2, #132	; 0x84
 8004992:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004996:	f023 0307 	bic.w	r3, r3, #7
 800499a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	01db      	lsls	r3, r3, #7
 80049a6:	4413      	add	r3, r2
 80049a8:	3384      	adds	r3, #132	; 0x84
 80049aa:	461a      	mov	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	01db      	lsls	r3, r3, #7
 80049bc:	4413      	add	r3, r2
 80049be:	3384      	adds	r3, #132	; 0x84
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	4611      	mov	r1, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	01d2      	lsls	r2, r2, #7
 80049cc:	440a      	add	r2, r1
 80049ce:	3284      	adds	r2, #132	; 0x84
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	6013      	str	r3, [r2, #0]
}
 80049d6:	bf00      	nop
 80049d8:	3724      	adds	r7, #36	; 0x24
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e4:	b08f      	sub	sp, #60	; 0x3c
 80049e6:	af0a      	add	r7, sp, #40	; 0x28
 80049e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e10f      	b.n	8004c14 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f006 fe44 	bl	800b69c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2203      	movs	r2, #3
 8004a18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f003 f92b 	bl	8007c8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	603b      	str	r3, [r7, #0]
 8004a3e:	687e      	ldr	r6, [r7, #4]
 8004a40:	466d      	mov	r5, sp
 8004a42:	f106 0410 	add.w	r4, r6, #16
 8004a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a52:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a56:	1d33      	adds	r3, r6, #4
 8004a58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a5a:	6838      	ldr	r0, [r7, #0]
 8004a5c:	f003 f802 	bl	8007a64 <USB_CoreInit>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d005      	beq.n	8004a72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e0d0      	b.n	8004c14 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2100      	movs	r1, #0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f003 f919 	bl	8007cb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]
 8004a82:	e04a      	b.n	8004b1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a84:	7bfa      	ldrb	r2, [r7, #15]
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	333d      	adds	r3, #61	; 0x3d
 8004a94:	2201      	movs	r2, #1
 8004a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a98:	7bfa      	ldrb	r2, [r7, #15]
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	333c      	adds	r3, #60	; 0x3c
 8004aa8:	7bfa      	ldrb	r2, [r7, #15]
 8004aaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004aac:	7bfa      	ldrb	r2, [r7, #15]
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	b298      	uxth	r0, r3
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	3344      	adds	r3, #68	; 0x44
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ac4:	7bfa      	ldrb	r2, [r7, #15]
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	3340      	adds	r3, #64	; 0x40
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ad8:	7bfa      	ldrb	r2, [r7, #15]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	3348      	adds	r3, #72	; 0x48
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004aec:	7bfa      	ldrb	r2, [r7, #15]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	334c      	adds	r3, #76	; 0x4c
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b00:	7bfa      	ldrb	r2, [r7, #15]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	3354      	adds	r3, #84	; 0x54
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	3301      	adds	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
 8004b1a:	7bfa      	ldrb	r2, [r7, #15]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d3af      	bcc.n	8004a84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b24:	2300      	movs	r3, #0
 8004b26:	73fb      	strb	r3, [r7, #15]
 8004b28:	e044      	b.n	8004bb4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b2a:	7bfa      	ldrb	r2, [r7, #15]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b40:	7bfa      	ldrb	r2, [r7, #15]
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004b52:	7bfa      	ldrb	r2, [r7, #15]
 8004b54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b56:	7bfa      	ldrb	r2, [r7, #15]
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b68:	2200      	movs	r2, #0
 8004b6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b6c:	7bfa      	ldrb	r2, [r7, #15]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b82:	7bfa      	ldrb	r2, [r7, #15]
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b98:	7bfa      	ldrb	r2, [r7, #15]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
 8004bb4:	7bfa      	ldrb	r2, [r7, #15]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d3b5      	bcc.n	8004b2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	687e      	ldr	r6, [r7, #4]
 8004bc6:	466d      	mov	r5, sp
 8004bc8:	f106 0410 	add.w	r4, r6, #16
 8004bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bdc:	1d33      	adds	r3, r6, #4
 8004bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004be0:	6838      	ldr	r0, [r7, #0]
 8004be2:	f003 f8b1 	bl	8007d48 <USB_DevInit>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e00d      	b.n	8004c14 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f004 fa00 	bl	8009012 <USB_DevDisconnect>

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_PCD_Start+0x1c>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e020      	b.n	8004c7a <HAL_PCD_Start+0x5e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d109      	bne.n	8004c5c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d005      	beq.n	8004c5c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f003 f803 	bl	8007c6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f004 f9b0 	bl	8008fd0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c82:	b590      	push	{r4, r7, lr}
 8004c84:	b08d      	sub	sp, #52	; 0x34
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f004 fa6e 	bl	800917a <USB_GetMode>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f040 848a 	bne.w	80055ba <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f004 f9d2 	bl	8009054 <USB_ReadInterrupts>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8480 	beq.w	80055b8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	0a1b      	lsrs	r3, r3, #8
 8004cc2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f004 f9bf 	bl	8009054 <USB_ReadInterrupts>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d107      	bne.n	8004cf0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695a      	ldr	r2, [r3, #20]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f002 0202 	and.w	r2, r2, #2
 8004cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f004 f9ad 	bl	8009054 <USB_ReadInterrupts>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	d161      	bne.n	8004dc8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0210 	bic.w	r2, r2, #16
 8004d12:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	f003 020f 	and.w	r2, r3, #15
 8004d20:	4613      	mov	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	4413      	add	r3, r2
 8004d30:	3304      	adds	r3, #4
 8004d32:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	0c5b      	lsrs	r3, r3, #17
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d124      	bne.n	8004d8a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d035      	beq.n	8004db8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	091b      	lsrs	r3, r3, #4
 8004d54:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6a38      	ldr	r0, [r7, #32]
 8004d60:	f003 ffe4 	bl	8008d2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	091b      	lsrs	r3, r3, #4
 8004d6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d70:	441a      	add	r2, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	6a1a      	ldr	r2, [r3, #32]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d82:	441a      	add	r2, r3
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	621a      	str	r2, [r3, #32]
 8004d88:	e016      	b.n	8004db8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	0c5b      	lsrs	r3, r3, #17
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	2b06      	cmp	r3, #6
 8004d94:	d110      	bne.n	8004db8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6a38      	ldr	r0, [r7, #32]
 8004da2:	f003 ffc3 	bl	8008d2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	6a1a      	ldr	r2, [r3, #32]
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004db2:	441a      	add	r2, r3
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0210 	orr.w	r2, r2, #16
 8004dc6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f004 f941 	bl	8009054 <USB_ReadInterrupts>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ddc:	f040 80a7 	bne.w	8004f2e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f004 f946 	bl	800907a <USB_ReadDevAllOutEpInterrupt>
 8004dee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004df0:	e099      	b.n	8004f26 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 808e 	beq.w	8004f1a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	4611      	mov	r1, r2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f004 f96a 	bl	80090e2 <USB_ReadDevOutEPInterrupt>
 8004e0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00c      	beq.n	8004e34 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	461a      	mov	r2, r3
 8004e28:	2301      	movs	r3, #1
 8004e2a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fec2 	bl	8005bb8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00c      	beq.n	8004e58 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004e50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 ff98 	bl	8005d88 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f003 0310 	and.w	r3, r3, #16
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6e:	461a      	mov	r2, r3
 8004e70:	2310      	movs	r3, #16
 8004e72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d030      	beq.n	8004ee0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e86:	2b80      	cmp	r3, #128	; 0x80
 8004e88:	d109      	bne.n	8004e9e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e9c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	4413      	add	r3, r2
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	78db      	ldrb	r3, [r3, #3]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d108      	bne.n	8004ece <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f006 fce9 	bl	800b8a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eda:	461a      	mov	r2, r3
 8004edc:	2302      	movs	r3, #2
 8004ede:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	2320      	movs	r3, #32
 8004efa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	461a      	mov	r2, r3
 8004f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f18:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f47f af62 	bne.w	8004df2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f004 f88e 	bl	8009054 <USB_ReadInterrupts>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f42:	f040 80db 	bne.w	80050fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f004 f8af 	bl	80090ae <USB_ReadDevAllInEpInterrupt>
 8004f50:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004f56:	e0cd      	b.n	80050f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80c2 	beq.w	80050e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f004 f8d5 	bl	800911e <USB_ReadDevInEPInterrupt>
 8004f74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d057      	beq.n	8005030 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	2201      	movs	r2, #1
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69f9      	ldr	r1, [r7, #28]
 8004f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d132      	bne.n	8005024 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	334c      	adds	r3, #76	; 0x4c
 8004fce:	6819      	ldr	r1, [r3, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4403      	add	r3, r0
 8004fde:	3348      	adds	r3, #72	; 0x48
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4419      	add	r1, r3
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe8:	4613      	mov	r3, r2
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	4413      	add	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4403      	add	r3, r0
 8004ff2:	334c      	adds	r3, #76	; 0x4c
 8004ff4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d113      	bne.n	8005024 <HAL_PCD_IRQHandler+0x3a2>
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005000:	4613      	mov	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	3354      	adds	r3, #84	; 0x54
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d108      	bne.n	8005024 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800501c:	461a      	mov	r2, r3
 800501e:	2101      	movs	r1, #1
 8005020:	f004 f8dc 	bl	80091dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	b2db      	uxtb	r3, r3
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f006 fbb3 	bl	800b796 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d008      	beq.n	800504c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005046:	461a      	mov	r2, r3
 8005048:	2308      	movs	r3, #8
 800504a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b00      	cmp	r3, #0
 8005054:	d008      	beq.n	8005068 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005062:	461a      	mov	r2, r3
 8005064:	2310      	movs	r3, #16
 8005066:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d008      	beq.n	8005084 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507e:	461a      	mov	r2, r3
 8005080:	2340      	movs	r3, #64	; 0x40
 8005082:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d023      	beq.n	80050d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800508e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005090:	6a38      	ldr	r0, [r7, #32]
 8005092:	f002 ffbd 	bl	8008010 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005098:	4613      	mov	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	3338      	adds	r3, #56	; 0x38
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4413      	add	r3, r2
 80050a6:	3304      	adds	r3, #4
 80050a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	78db      	ldrb	r3, [r3, #3]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d108      	bne.n	80050c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2200      	movs	r2, #0
 80050b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f006 fc00 	bl	800b8c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d0:	461a      	mov	r2, r3
 80050d2:	2302      	movs	r3, #2
 80050d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80050e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fcdb 	bl	8005a9e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	3301      	adds	r3, #1
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	085b      	lsrs	r3, r3, #1
 80050f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80050f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f47f af2e 	bne.w	8004f58 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f003 ffa7 	bl	8009054 <USB_ReadInterrupts>
 8005106:	4603      	mov	r3, r0
 8005108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800510c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005110:	d122      	bne.n	8005158 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005120:	f023 0301 	bic.w	r3, r3, #1
 8005124:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800512c:	2b01      	cmp	r3, #1
 800512e:	d108      	bne.n	8005142 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005138:	2100      	movs	r1, #0
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fec2 	bl	8005ec4 <HAL_PCDEx_LPM_Callback>
 8005140:	e002      	b.n	8005148 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f006 fb9e 	bl	800b884 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695a      	ldr	r2, [r3, #20]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005156:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4618      	mov	r0, r3
 800515e:	f003 ff79 	bl	8009054 <USB_ReadInterrupts>
 8005162:	4603      	mov	r3, r0
 8005164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516c:	d112      	bne.n	8005194 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b01      	cmp	r3, #1
 800517c:	d102      	bne.n	8005184 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f006 fb5a 	bl	800b838 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005192:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f003 ff5b 	bl	8009054 <USB_ReadInterrupts>
 800519e:	4603      	mov	r3, r0
 80051a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a8:	f040 80b7 	bne.w	800531a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ba:	f023 0301 	bic.w	r3, r3, #1
 80051be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2110      	movs	r1, #16
 80051c6:	4618      	mov	r0, r3
 80051c8:	f002 ff22 	bl	8008010 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051cc:	2300      	movs	r3, #0
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d0:	e046      	b.n	8005260 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	461a      	mov	r2, r3
 80051e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f6:	0151      	lsls	r1, r2, #5
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	440a      	add	r2, r1
 80051fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005200:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005204:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005212:	461a      	mov	r2, r3
 8005214:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005218:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800521a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	440a      	add	r2, r1
 8005230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005234:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005238:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	440a      	add	r2, r1
 8005250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005254:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005258:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525c:	3301      	adds	r3, #1
 800525e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005266:	429a      	cmp	r2, r3
 8005268:	d3b3      	bcc.n	80051d2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005278:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800527c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	2b00      	cmp	r3, #0
 8005284:	d016      	beq.n	80052b4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005296:	f043 030b 	orr.w	r3, r3, #11
 800529a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ac:	f043 030b 	orr.w	r3, r3, #11
 80052b0:	6453      	str	r3, [r2, #68]	; 0x44
 80052b2:	e015      	b.n	80052e0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80052c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80052ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052da:	f043 030b 	orr.w	r3, r3, #11
 80052de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6818      	ldr	r0, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005304:	461a      	mov	r2, r3
 8005306:	f003 ff69 	bl	80091dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695a      	ldr	r2, [r3, #20]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005318:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f003 fe98 	bl	8009054 <USB_ReadInterrupts>
 8005324:	4603      	mov	r3, r0
 8005326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800532a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800532e:	d124      	bne.n	800537a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f003 ff2e 	bl	8009196 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f002 fee3 	bl	800810a <USB_GetDevSpeed>
 8005344:	4603      	mov	r3, r0
 8005346:	461a      	mov	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681c      	ldr	r4, [r3, #0]
 8005350:	f001 fa28 	bl	80067a4 <HAL_RCC_GetHCLKFreq>
 8005354:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800535a:	b2db      	uxtb	r3, r3
 800535c:	461a      	mov	r2, r3
 800535e:	4620      	mov	r0, r4
 8005360:	f002 fbe2 	bl	8007b28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f006 fa3e 	bl	800b7e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695a      	ldr	r2, [r3, #20]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005378:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f003 fe68 	bl	8009054 <USB_ReadInterrupts>
 8005384:	4603      	mov	r3, r0
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b08      	cmp	r3, #8
 800538c:	d10a      	bne.n	80053a4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f006 fa1b 	bl	800b7ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695a      	ldr	r2, [r3, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f002 0208 	and.w	r2, r2, #8
 80053a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f003 fe53 	bl	8009054 <USB_ReadInterrupts>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	2b80      	cmp	r3, #128	; 0x80
 80053b6:	d122      	bne.n	80053fe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053c4:	2301      	movs	r3, #1
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
 80053c8:	e014      	b.n	80053f4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ce:	4613      	mov	r3, r2
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d105      	bne.n	80053ee <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fb27 	bl	8005a3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	3301      	adds	r3, #1
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d3e5      	bcc.n	80053ca <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f003 fe26 	bl	8009054 <USB_ReadInterrupts>
 8005408:	4603      	mov	r3, r0
 800540a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800540e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005412:	d13b      	bne.n	800548c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005414:	2301      	movs	r3, #1
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
 8005418:	e02b      	b.n	8005472 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542e:	4613      	mov	r3, r2
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	3340      	adds	r3, #64	; 0x40
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d115      	bne.n	800546c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005440:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005442:	2b00      	cmp	r3, #0
 8005444:	da12      	bge.n	800546c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544a:	4613      	mov	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	4413      	add	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	440b      	add	r3, r1
 8005454:	333f      	adds	r3, #63	; 0x3f
 8005456:	2201      	movs	r2, #1
 8005458:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005462:	b2db      	uxtb	r3, r3
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fae8 	bl	8005a3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	3301      	adds	r3, #1
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005478:	429a      	cmp	r2, r3
 800547a:	d3ce      	bcc.n	800541a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695a      	ldr	r2, [r3, #20]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800548a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f003 fddf 	bl	8009054 <USB_ReadInterrupts>
 8005496:	4603      	mov	r3, r0
 8005498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800549c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054a0:	d155      	bne.n	800554e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054a2:	2301      	movs	r3, #1
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
 80054a6:	e045      	b.n	8005534 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054bc:	4613      	mov	r3, r2
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4413      	add	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d12e      	bne.n	800552e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80054d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	da2b      	bge.n	800552e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80054e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d121      	bne.n	800552e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ee:	4613      	mov	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800552a:	6053      	str	r3, [r2, #4]
            break;
 800552c:	e007      	b.n	800553e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	3301      	adds	r3, #1
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553a:	429a      	cmp	r2, r3
 800553c:	d3b4      	bcc.n	80054a8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695a      	ldr	r2, [r3, #20]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800554c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f003 fd7e 	bl	8009054 <USB_ReadInterrupts>
 8005558:	4603      	mov	r3, r0
 800555a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800555e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005562:	d10a      	bne.n	800557a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f006 f9bf 	bl	800b8e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f003 fd68 	bl	8009054 <USB_ReadInterrupts>
 8005584:	4603      	mov	r3, r0
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b04      	cmp	r3, #4
 800558c:	d115      	bne.n	80055ba <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f006 f9af 	bl	800b904 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6859      	ldr	r1, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	e000      	b.n	80055ba <HAL_PCD_IRQHandler+0x938>
      return;
 80055b8:	bf00      	nop
    }
  }
}
 80055ba:	3734      	adds	r7, #52	; 0x34
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd90      	pop	{r4, r7, pc}

080055c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_PCD_SetAddress+0x1a>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e013      	b.n	8005602 <HAL_PCD_SetAddress+0x42>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	78fa      	ldrb	r2, [r7, #3]
 80055e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	78fa      	ldrb	r2, [r7, #3]
 80055f0:	4611      	mov	r1, r2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f003 fcc6 	bl	8008f84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	4608      	mov	r0, r1
 8005614:	4611      	mov	r1, r2
 8005616:	461a      	mov	r2, r3
 8005618:	4603      	mov	r3, r0
 800561a:	70fb      	strb	r3, [r7, #3]
 800561c:	460b      	mov	r3, r1
 800561e:	803b      	strh	r3, [r7, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800562c:	2b00      	cmp	r3, #0
 800562e:	da0f      	bge.n	8005650 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	f003 020f 	and.w	r2, r3, #15
 8005636:	4613      	mov	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	3338      	adds	r3, #56	; 0x38
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4413      	add	r3, r2
 8005644:	3304      	adds	r3, #4
 8005646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	705a      	strb	r2, [r3, #1]
 800564e:	e00f      	b.n	8005670 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	f003 020f 	and.w	r2, r3, #15
 8005656:	4613      	mov	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	4413      	add	r3, r2
 8005666:	3304      	adds	r3, #4
 8005668:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	b2da      	uxtb	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800567c:	883a      	ldrh	r2, [r7, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	78ba      	ldrb	r2, [r7, #2]
 8005686:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d004      	beq.n	800569a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800569a:	78bb      	ldrb	r3, [r7, #2]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d102      	bne.n	80056a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_PCD_EP_Open+0xaa>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e00e      	b.n	80056d2 <HAL_PCD_EP_Open+0xc8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68f9      	ldr	r1, [r7, #12]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f002 fd46 	bl	8008154 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80056d0:	7afb      	ldrb	r3, [r7, #11]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	460b      	mov	r3, r1
 80056e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	da0f      	bge.n	800570e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	f003 020f 	and.w	r2, r3, #15
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	3338      	adds	r3, #56	; 0x38
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4413      	add	r3, r2
 8005702:	3304      	adds	r3, #4
 8005704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2201      	movs	r2, #1
 800570a:	705a      	strb	r2, [r3, #1]
 800570c:	e00f      	b.n	800572e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	f003 020f 	and.w	r2, r3, #15
 8005714:	4613      	mov	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	4413      	add	r3, r2
 8005724:	3304      	adds	r3, #4
 8005726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	b2da      	uxtb	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_PCD_EP_Close+0x6e>
 8005744:	2302      	movs	r3, #2
 8005746:	e00e      	b.n	8005766 <HAL_PCD_EP_Close+0x8c>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68f9      	ldr	r1, [r7, #12]
 8005756:	4618      	mov	r0, r3
 8005758:	f002 fd84 	bl	8008264 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b086      	sub	sp, #24
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
 800577a:	460b      	mov	r3, r1
 800577c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800577e:	7afb      	ldrb	r3, [r7, #11]
 8005780:	f003 020f 	and.w	r2, r3, #15
 8005784:	4613      	mov	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	3304      	adds	r3, #4
 8005796:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2200      	movs	r2, #0
 80057a8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2200      	movs	r2, #0
 80057ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057b0:	7afb      	ldrb	r3, [r7, #11]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d102      	bne.n	80057ca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057ca:	7afb      	ldrb	r3, [r7, #11]
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	6979      	ldr	r1, [r7, #20]
 80057e2:	f003 f863 	bl	80088ac <USB_EP0StartXfer>
 80057e6:	e008      	b.n	80057fa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	6979      	ldr	r1, [r7, #20]
 80057f6:	f002 fe11 	bl	800841c <USB_EPStartXfer>
  }

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	f003 020f 	and.w	r2, r3, #15
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005826:	681b      	ldr	r3, [r3, #0]
}
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	607a      	str	r2, [r7, #4]
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	460b      	mov	r3, r1
 8005842:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005844:	7afb      	ldrb	r3, [r7, #11]
 8005846:	f003 020f 	and.w	r2, r3, #15
 800584a:	4613      	mov	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	3338      	adds	r3, #56	; 0x38
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	3304      	adds	r3, #4
 800585a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2200      	movs	r2, #0
 800586c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2201      	movs	r2, #1
 8005872:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005874:	7afb      	ldrb	r3, [r7, #11]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	b2da      	uxtb	r2, r3
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d102      	bne.n	800588e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800588e:	7afb      	ldrb	r3, [r7, #11]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	2b00      	cmp	r3, #0
 8005896:	d109      	bne.n	80058ac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	6979      	ldr	r1, [r7, #20]
 80058a6:	f003 f801 	bl	80088ac <USB_EP0StartXfer>
 80058aa:	e008      	b.n	80058be <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	6979      	ldr	r1, [r7, #20]
 80058ba:	f002 fdaf 	bl	800841c <USB_EPStartXfer>
  }

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	f003 020f 	and.w	r2, r3, #15
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d901      	bls.n	80058e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e050      	b.n	8005988 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	da0f      	bge.n	800590e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058ee:	78fb      	ldrb	r3, [r7, #3]
 80058f0:	f003 020f 	and.w	r2, r3, #15
 80058f4:	4613      	mov	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	3338      	adds	r3, #56	; 0x38
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	4413      	add	r3, r2
 8005902:	3304      	adds	r3, #4
 8005904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	705a      	strb	r2, [r3, #1]
 800590c:	e00d      	b.n	800592a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800590e:	78fa      	ldrb	r2, [r7, #3]
 8005910:	4613      	mov	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	4413      	add	r3, r2
 8005920:	3304      	adds	r3, #4
 8005922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	b2da      	uxtb	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_PCD_EP_SetStall+0x82>
 8005946:	2302      	movs	r3, #2
 8005948:	e01e      	b.n	8005988 <HAL_PCD_EP_SetStall+0xc0>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	4618      	mov	r0, r3
 800595a:	f003 fa3f 	bl	8008ddc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800595e:	78fb      	ldrb	r3, [r7, #3]
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6818      	ldr	r0, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	b2d9      	uxtb	r1, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005978:	461a      	mov	r2, r3
 800597a:	f003 fc2f 	bl	80091dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	f003 020f 	and.w	r2, r3, #15
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d901      	bls.n	80059ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e042      	b.n	8005a34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	da0f      	bge.n	80059d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059b6:	78fb      	ldrb	r3, [r7, #3]
 80059b8:	f003 020f 	and.w	r2, r3, #15
 80059bc:	4613      	mov	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	3338      	adds	r3, #56	; 0x38
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4413      	add	r3, r2
 80059ca:	3304      	adds	r3, #4
 80059cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	705a      	strb	r2, [r3, #1]
 80059d4:	e00f      	b.n	80059f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	f003 020f 	and.w	r2, r3, #15
 80059dc:	4613      	mov	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	4413      	add	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	4413      	add	r3, r2
 80059ec:	3304      	adds	r3, #4
 80059ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_PCD_EP_ClrStall+0x86>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e00e      	b.n	8005a34 <HAL_PCD_EP_ClrStall+0xa4>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f003 fa47 	bl	8008eb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005a48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	da0c      	bge.n	8005a6a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	f003 020f 	and.w	r2, r3, #15
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	3338      	adds	r3, #56	; 0x38
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	4413      	add	r3, r2
 8005a64:	3304      	adds	r3, #4
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	e00c      	b.n	8005a84 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	f003 020f 	and.w	r2, r3, #15
 8005a70:	4613      	mov	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	4413      	add	r3, r2
 8005a80:	3304      	adds	r3, #4
 8005a82:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68f9      	ldr	r1, [r7, #12]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f003 f866 	bl	8008b5c <USB_EPStopXfer>
 8005a90:	4603      	mov	r3, r0
 8005a92:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005a94:	7afb      	ldrb	r3, [r7, #11]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b08a      	sub	sp, #40	; 0x28
 8005aa2:	af02      	add	r7, sp, #8
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	3338      	adds	r3, #56	; 0x38
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a1a      	ldr	r2, [r3, #32]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d901      	bls.n	8005ad6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e06c      	b.n	8005bb0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d902      	bls.n	8005af2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	3303      	adds	r3, #3
 8005af6:	089b      	lsrs	r3, r3, #2
 8005af8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005afa:	e02b      	b.n	8005b54 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	699a      	ldr	r2, [r3, #24]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d902      	bls.n	8005b18 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	3303      	adds	r3, #3
 8005b1c:	089b      	lsrs	r3, r3, #2
 8005b1e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6919      	ldr	r1, [r3, #16]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	4603      	mov	r3, r0
 8005b36:	6978      	ldr	r0, [r7, #20]
 8005b38:	f003 f8ba 	bl	8008cb0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	441a      	add	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a1a      	ldr	r2, [r3, #32]
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	441a      	add	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d809      	bhi.n	8005b7e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a1a      	ldr	r2, [r3, #32]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d203      	bcs.n	8005b7e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1be      	bne.n	8005afc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d811      	bhi.n	8005bae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	2201      	movs	r2, #1
 8005b92:	fa02 f303 	lsl.w	r3, r2, r3
 8005b96:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	6939      	ldr	r1, [r7, #16]
 8005ba6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005baa:	4013      	ands	r3, r2
 8005bac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3720      	adds	r7, #32
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	333c      	adds	r3, #60	; 0x3c
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d17b      	bne.n	8005ce6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d015      	beq.n	8005c24 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	4a61      	ldr	r2, [pc, #388]	; (8005d80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	f240 80b9 	bls.w	8005d74 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 80b3 	beq.w	8005d74 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c20:	6093      	str	r3, [r2, #8]
 8005c22:	e0a7      	b.n	8005d74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d009      	beq.n	8005c42 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	2320      	movs	r3, #32
 8005c3e:	6093      	str	r3, [r2, #8]
 8005c40:	e098      	b.n	8005d74 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f040 8093 	bne.w	8005d74 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	4a4b      	ldr	r2, [pc, #300]	; (8005d80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d90f      	bls.n	8005c76 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c72:	6093      	str	r3, [r2, #8]
 8005c74:	e07e      	b.n	8005d74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	4413      	add	r3, r2
 8005c88:	3304      	adds	r3, #4
 8005c8a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	0159      	lsls	r1, r3, #5
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	440b      	add	r3, r1
 8005c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ca2:	1ad2      	subs	r2, r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d114      	bne.n	8005cd8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	f003 fa8a 	bl	80091dc <USB_EP0_OutStart>
 8005cc8:	e006      	b.n	8005cd8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	691a      	ldr	r2, [r3, #16]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	441a      	add	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f005 fd3e 	bl	800b760 <HAL_PCD_DataOutStageCallback>
 8005ce4:	e046      	b.n	8005d74 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	4a26      	ldr	r2, [pc, #152]	; (8005d84 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d124      	bne.n	8005d38 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d04:	461a      	mov	r2, r3
 8005d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0a:	6093      	str	r3, [r2, #8]
 8005d0c:	e032      	b.n	8005d74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d008      	beq.n	8005d2a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d24:	461a      	mov	r2, r3
 8005d26:	2320      	movs	r3, #32
 8005d28:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f005 fd15 	bl	800b760 <HAL_PCD_DataOutStageCallback>
 8005d36:	e01d      	b.n	8005d74 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d114      	bne.n	8005d68 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	4613      	mov	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	4413      	add	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	440b      	add	r3, r1
 8005d4c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d108      	bne.n	8005d68 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d60:	461a      	mov	r2, r3
 8005d62:	2100      	movs	r1, #0
 8005d64:	f003 fa3a 	bl	80091dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f005 fcf6 	bl	800b760 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3720      	adds	r7, #32
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	4f54300a 	.word	0x4f54300a
 8005d84:	4f54310a 	.word	0x4f54310a

08005d88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	333c      	adds	r3, #60	; 0x3c
 8005da0:	3304      	adds	r3, #4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4a15      	ldr	r2, [pc, #84]	; (8005e10 <PCD_EP_OutSetupPacket_int+0x88>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d90e      	bls.n	8005ddc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d009      	beq.n	8005ddc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dda:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f005 fcad 	bl	800b73c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4a0a      	ldr	r2, [pc, #40]	; (8005e10 <PCD_EP_OutSetupPacket_int+0x88>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d90c      	bls.n	8005e04 <PCD_EP_OutSetupPacket_int+0x7c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d108      	bne.n	8005e04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	2101      	movs	r1, #1
 8005e00:	f003 f9ec 	bl	80091dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	4f54300a 	.word	0x4f54300a

08005e14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	70fb      	strb	r3, [r7, #3]
 8005e20:	4613      	mov	r3, r2
 8005e22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d107      	bne.n	8005e42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e32:	883b      	ldrh	r3, [r7, #0]
 8005e34:	0419      	lsls	r1, r3, #16
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e40:	e028      	b.n	8005e94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	0c1b      	lsrs	r3, r3, #16
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e50:	2300      	movs	r3, #0
 8005e52:	73fb      	strb	r3, [r7, #15]
 8005e54:	e00d      	b.n	8005e72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	3340      	adds	r3, #64	; 0x40
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	0c1b      	lsrs	r3, r3, #16
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	4413      	add	r3, r2
 8005e6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	73fb      	strb	r3, [r7, #15]
 8005e72:	7bfa      	ldrb	r2, [r7, #15]
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d3ec      	bcc.n	8005e56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005e7c:	883b      	ldrh	r3, [r7, #0]
 8005e7e:	0418      	lsls	r0, r3, #16
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	4302      	orrs	r2, r0
 8005e8c:	3340      	adds	r3, #64	; 0x40
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	887a      	ldrh	r2, [r7, #2]
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e267      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d075      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005efa:	4b88      	ldr	r3, [pc, #544]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 030c 	and.w	r3, r3, #12
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d00c      	beq.n	8005f20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f06:	4b85      	ldr	r3, [pc, #532]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	d112      	bne.n	8005f38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f12:	4b82      	ldr	r3, [pc, #520]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f1e:	d10b      	bne.n	8005f38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f20:	4b7e      	ldr	r3, [pc, #504]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d05b      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x108>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d157      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e242      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f40:	d106      	bne.n	8005f50 <HAL_RCC_OscConfig+0x74>
 8005f42:	4b76      	ldr	r3, [pc, #472]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a75      	ldr	r2, [pc, #468]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	e01d      	b.n	8005f8c <HAL_RCC_OscConfig+0xb0>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f58:	d10c      	bne.n	8005f74 <HAL_RCC_OscConfig+0x98>
 8005f5a:	4b70      	ldr	r3, [pc, #448]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a6f      	ldr	r2, [pc, #444]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	4b6d      	ldr	r3, [pc, #436]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a6c      	ldr	r2, [pc, #432]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	e00b      	b.n	8005f8c <HAL_RCC_OscConfig+0xb0>
 8005f74:	4b69      	ldr	r3, [pc, #420]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a68      	ldr	r2, [pc, #416]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	4b66      	ldr	r3, [pc, #408]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a65      	ldr	r2, [pc, #404]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d013      	beq.n	8005fbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f94:	f7fd f9e4 	bl	8003360 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f9c:	f7fd f9e0 	bl	8003360 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b64      	cmp	r3, #100	; 0x64
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e207      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fae:	4b5b      	ldr	r3, [pc, #364]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0f0      	beq.n	8005f9c <HAL_RCC_OscConfig+0xc0>
 8005fba:	e014      	b.n	8005fe6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbc:	f7fd f9d0 	bl	8003360 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fc4:	f7fd f9cc 	bl	8003360 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b64      	cmp	r3, #100	; 0x64
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e1f3      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fd6:	4b51      	ldr	r3, [pc, #324]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1f0      	bne.n	8005fc4 <HAL_RCC_OscConfig+0xe8>
 8005fe2:	e000      	b.n	8005fe6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d063      	beq.n	80060ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ff2:	4b4a      	ldr	r3, [pc, #296]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 030c 	and.w	r3, r3, #12
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00b      	beq.n	8006016 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ffe:	4b47      	ldr	r3, [pc, #284]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006006:	2b08      	cmp	r3, #8
 8006008:	d11c      	bne.n	8006044 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800600a:	4b44      	ldr	r3, [pc, #272]	; (800611c <HAL_RCC_OscConfig+0x240>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d116      	bne.n	8006044 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006016:	4b41      	ldr	r3, [pc, #260]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <HAL_RCC_OscConfig+0x152>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d001      	beq.n	800602e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e1c7      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800602e:	4b3b      	ldr	r3, [pc, #236]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	4937      	ldr	r1, [pc, #220]	; (800611c <HAL_RCC_OscConfig+0x240>)
 800603e:	4313      	orrs	r3, r2
 8006040:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006042:	e03a      	b.n	80060ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d020      	beq.n	800608e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800604c:	4b34      	ldr	r3, [pc, #208]	; (8006120 <HAL_RCC_OscConfig+0x244>)
 800604e:	2201      	movs	r2, #1
 8006050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006052:	f7fd f985 	bl	8003360 <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800605a:	f7fd f981 	bl	8003360 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e1a8      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800606c:	4b2b      	ldr	r3, [pc, #172]	; (800611c <HAL_RCC_OscConfig+0x240>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0f0      	beq.n	800605a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006078:	4b28      	ldr	r3, [pc, #160]	; (800611c <HAL_RCC_OscConfig+0x240>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	4925      	ldr	r1, [pc, #148]	; (800611c <HAL_RCC_OscConfig+0x240>)
 8006088:	4313      	orrs	r3, r2
 800608a:	600b      	str	r3, [r1, #0]
 800608c:	e015      	b.n	80060ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800608e:	4b24      	ldr	r3, [pc, #144]	; (8006120 <HAL_RCC_OscConfig+0x244>)
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006094:	f7fd f964 	bl	8003360 <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800609a:	e008      	b.n	80060ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800609c:	f7fd f960 	bl	8003360 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e187      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ae:	4b1b      	ldr	r3, [pc, #108]	; (800611c <HAL_RCC_OscConfig+0x240>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1f0      	bne.n	800609c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d036      	beq.n	8006134 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d016      	beq.n	80060fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060ce:	4b15      	ldr	r3, [pc, #84]	; (8006124 <HAL_RCC_OscConfig+0x248>)
 80060d0:	2201      	movs	r2, #1
 80060d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d4:	f7fd f944 	bl	8003360 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060dc:	f7fd f940 	bl	8003360 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e167      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ee:	4b0b      	ldr	r3, [pc, #44]	; (800611c <HAL_RCC_OscConfig+0x240>)
 80060f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0f0      	beq.n	80060dc <HAL_RCC_OscConfig+0x200>
 80060fa:	e01b      	b.n	8006134 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060fc:	4b09      	ldr	r3, [pc, #36]	; (8006124 <HAL_RCC_OscConfig+0x248>)
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006102:	f7fd f92d 	bl	8003360 <HAL_GetTick>
 8006106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006108:	e00e      	b.n	8006128 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800610a:	f7fd f929 	bl	8003360 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d907      	bls.n	8006128 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e150      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
 800611c:	40023800 	.word	0x40023800
 8006120:	42470000 	.word	0x42470000
 8006124:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006128:	4b88      	ldr	r3, [pc, #544]	; (800634c <HAL_RCC_OscConfig+0x470>)
 800612a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1ea      	bne.n	800610a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8097 	beq.w	8006270 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006142:	2300      	movs	r3, #0
 8006144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006146:	4b81      	ldr	r3, [pc, #516]	; (800634c <HAL_RCC_OscConfig+0x470>)
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10f      	bne.n	8006172 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006152:	2300      	movs	r3, #0
 8006154:	60bb      	str	r3, [r7, #8]
 8006156:	4b7d      	ldr	r3, [pc, #500]	; (800634c <HAL_RCC_OscConfig+0x470>)
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	4a7c      	ldr	r2, [pc, #496]	; (800634c <HAL_RCC_OscConfig+0x470>)
 800615c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006160:	6413      	str	r3, [r2, #64]	; 0x40
 8006162:	4b7a      	ldr	r3, [pc, #488]	; (800634c <HAL_RCC_OscConfig+0x470>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616a:	60bb      	str	r3, [r7, #8]
 800616c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800616e:	2301      	movs	r3, #1
 8006170:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006172:	4b77      	ldr	r3, [pc, #476]	; (8006350 <HAL_RCC_OscConfig+0x474>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617a:	2b00      	cmp	r3, #0
 800617c:	d118      	bne.n	80061b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800617e:	4b74      	ldr	r3, [pc, #464]	; (8006350 <HAL_RCC_OscConfig+0x474>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a73      	ldr	r2, [pc, #460]	; (8006350 <HAL_RCC_OscConfig+0x474>)
 8006184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800618a:	f7fd f8e9 	bl	8003360 <HAL_GetTick>
 800618e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006190:	e008      	b.n	80061a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006192:	f7fd f8e5 	bl	8003360 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e10c      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a4:	4b6a      	ldr	r3, [pc, #424]	; (8006350 <HAL_RCC_OscConfig+0x474>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0f0      	beq.n	8006192 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d106      	bne.n	80061c6 <HAL_RCC_OscConfig+0x2ea>
 80061b8:	4b64      	ldr	r3, [pc, #400]	; (800634c <HAL_RCC_OscConfig+0x470>)
 80061ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061bc:	4a63      	ldr	r2, [pc, #396]	; (800634c <HAL_RCC_OscConfig+0x470>)
 80061be:	f043 0301 	orr.w	r3, r3, #1
 80061c2:	6713      	str	r3, [r2, #112]	; 0x70
 80061c4:	e01c      	b.n	8006200 <HAL_RCC_OscConfig+0x324>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b05      	cmp	r3, #5
 80061cc:	d10c      	bne.n	80061e8 <HAL_RCC_OscConfig+0x30c>
 80061ce:	4b5f      	ldr	r3, [pc, #380]	; (800634c <HAL_RCC_OscConfig+0x470>)
 80061d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d2:	4a5e      	ldr	r2, [pc, #376]	; (800634c <HAL_RCC_OscConfig+0x470>)
 80061d4:	f043 0304 	orr.w	r3, r3, #4
 80061d8:	6713      	str	r3, [r2, #112]	; 0x70
 80061da:	4b5c      	ldr	r3, [pc, #368]	; (800634c <HAL_RCC_OscConfig+0x470>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061de:	4a5b      	ldr	r2, [pc, #364]	; (800634c <HAL_RCC_OscConfig+0x470>)
 80061e0:	f043 0301 	orr.w	r3, r3, #1
 80061e4:	6713      	str	r3, [r2, #112]	; 0x70
 80061e6:	e00b      	b.n	8006200 <HAL_RCC_OscConfig+0x324>
 80061e8:	4b58      	ldr	r3, [pc, #352]	; (800634c <HAL_RCC_OscConfig+0x470>)
 80061ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ec:	4a57      	ldr	r2, [pc, #348]	; (800634c <HAL_RCC_OscConfig+0x470>)
 80061ee:	f023 0301 	bic.w	r3, r3, #1
 80061f2:	6713      	str	r3, [r2, #112]	; 0x70
 80061f4:	4b55      	ldr	r3, [pc, #340]	; (800634c <HAL_RCC_OscConfig+0x470>)
 80061f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f8:	4a54      	ldr	r2, [pc, #336]	; (800634c <HAL_RCC_OscConfig+0x470>)
 80061fa:	f023 0304 	bic.w	r3, r3, #4
 80061fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d015      	beq.n	8006234 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006208:	f7fd f8aa 	bl	8003360 <HAL_GetTick>
 800620c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800620e:	e00a      	b.n	8006226 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006210:	f7fd f8a6 	bl	8003360 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	f241 3288 	movw	r2, #5000	; 0x1388
 800621e:	4293      	cmp	r3, r2
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e0cb      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006226:	4b49      	ldr	r3, [pc, #292]	; (800634c <HAL_RCC_OscConfig+0x470>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0ee      	beq.n	8006210 <HAL_RCC_OscConfig+0x334>
 8006232:	e014      	b.n	800625e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006234:	f7fd f894 	bl	8003360 <HAL_GetTick>
 8006238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800623a:	e00a      	b.n	8006252 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800623c:	f7fd f890 	bl	8003360 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	f241 3288 	movw	r2, #5000	; 0x1388
 800624a:	4293      	cmp	r3, r2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e0b5      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006252:	4b3e      	ldr	r3, [pc, #248]	; (800634c <HAL_RCC_OscConfig+0x470>)
 8006254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1ee      	bne.n	800623c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800625e:	7dfb      	ldrb	r3, [r7, #23]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d105      	bne.n	8006270 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006264:	4b39      	ldr	r3, [pc, #228]	; (800634c <HAL_RCC_OscConfig+0x470>)
 8006266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006268:	4a38      	ldr	r2, [pc, #224]	; (800634c <HAL_RCC_OscConfig+0x470>)
 800626a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800626e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 80a1 	beq.w	80063bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800627a:	4b34      	ldr	r3, [pc, #208]	; (800634c <HAL_RCC_OscConfig+0x470>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 030c 	and.w	r3, r3, #12
 8006282:	2b08      	cmp	r3, #8
 8006284:	d05c      	beq.n	8006340 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	2b02      	cmp	r3, #2
 800628c:	d141      	bne.n	8006312 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800628e:	4b31      	ldr	r3, [pc, #196]	; (8006354 <HAL_RCC_OscConfig+0x478>)
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006294:	f7fd f864 	bl	8003360 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800629c:	f7fd f860 	bl	8003360 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e087      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ae:	4b27      	ldr	r3, [pc, #156]	; (800634c <HAL_RCC_OscConfig+0x470>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1f0      	bne.n	800629c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69da      	ldr	r2, [r3, #28]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	019b      	lsls	r3, r3, #6
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	085b      	lsrs	r3, r3, #1
 80062d2:	3b01      	subs	r3, #1
 80062d4:	041b      	lsls	r3, r3, #16
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	061b      	lsls	r3, r3, #24
 80062de:	491b      	ldr	r1, [pc, #108]	; (800634c <HAL_RCC_OscConfig+0x470>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062e4:	4b1b      	ldr	r3, [pc, #108]	; (8006354 <HAL_RCC_OscConfig+0x478>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ea:	f7fd f839 	bl	8003360 <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062f2:	f7fd f835 	bl	8003360 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e05c      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006304:	4b11      	ldr	r3, [pc, #68]	; (800634c <HAL_RCC_OscConfig+0x470>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f0      	beq.n	80062f2 <HAL_RCC_OscConfig+0x416>
 8006310:	e054      	b.n	80063bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006312:	4b10      	ldr	r3, [pc, #64]	; (8006354 <HAL_RCC_OscConfig+0x478>)
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006318:	f7fd f822 	bl	8003360 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006320:	f7fd f81e 	bl	8003360 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e045      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <HAL_RCC_OscConfig+0x470>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f0      	bne.n	8006320 <HAL_RCC_OscConfig+0x444>
 800633e:	e03d      	b.n	80063bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d107      	bne.n	8006358 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e038      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
 800634c:	40023800 	.word	0x40023800
 8006350:	40007000 	.word	0x40007000
 8006354:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006358:	4b1b      	ldr	r3, [pc, #108]	; (80063c8 <HAL_RCC_OscConfig+0x4ec>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d028      	beq.n	80063b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006370:	429a      	cmp	r2, r3
 8006372:	d121      	bne.n	80063b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800637e:	429a      	cmp	r2, r3
 8006380:	d11a      	bne.n	80063b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006388:	4013      	ands	r3, r2
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800638e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006390:	4293      	cmp	r3, r2
 8006392:	d111      	bne.n	80063b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	3b01      	subs	r3, #1
 80063a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d107      	bne.n	80063b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d001      	beq.n	80063bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e000      	b.n	80063be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40023800 	.word	0x40023800

080063cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e0cc      	b.n	800657a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063e0:	4b68      	ldr	r3, [pc, #416]	; (8006584 <HAL_RCC_ClockConfig+0x1b8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d90c      	bls.n	8006408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ee:	4b65      	ldr	r3, [pc, #404]	; (8006584 <HAL_RCC_ClockConfig+0x1b8>)
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f6:	4b63      	ldr	r3, [pc, #396]	; (8006584 <HAL_RCC_ClockConfig+0x1b8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d001      	beq.n	8006408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e0b8      	b.n	800657a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d020      	beq.n	8006456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006420:	4b59      	ldr	r3, [pc, #356]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	4a58      	ldr	r2, [pc, #352]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800642a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006438:	4b53      	ldr	r3, [pc, #332]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	4a52      	ldr	r2, [pc, #328]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800643e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006444:	4b50      	ldr	r3, [pc, #320]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	494d      	ldr	r1, [pc, #308]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	4313      	orrs	r3, r2
 8006454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d044      	beq.n	80064ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d107      	bne.n	800647a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800646a:	4b47      	ldr	r3, [pc, #284]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d119      	bne.n	80064aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e07f      	b.n	800657a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b02      	cmp	r3, #2
 8006480:	d003      	beq.n	800648a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006486:	2b03      	cmp	r3, #3
 8006488:	d107      	bne.n	800649a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800648a:	4b3f      	ldr	r3, [pc, #252]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e06f      	b.n	800657a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800649a:	4b3b      	ldr	r3, [pc, #236]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e067      	b.n	800657a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064aa:	4b37      	ldr	r3, [pc, #220]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f023 0203 	bic.w	r2, r3, #3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	4934      	ldr	r1, [pc, #208]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064bc:	f7fc ff50 	bl	8003360 <HAL_GetTick>
 80064c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064c2:	e00a      	b.n	80064da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064c4:	f7fc ff4c 	bl	8003360 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e04f      	b.n	800657a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064da:	4b2b      	ldr	r3, [pc, #172]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 020c 	and.w	r2, r3, #12
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d1eb      	bne.n	80064c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064ec:	4b25      	ldr	r3, [pc, #148]	; (8006584 <HAL_RCC_ClockConfig+0x1b8>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d20c      	bcs.n	8006514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fa:	4b22      	ldr	r3, [pc, #136]	; (8006584 <HAL_RCC_ClockConfig+0x1b8>)
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006502:	4b20      	ldr	r3, [pc, #128]	; (8006584 <HAL_RCC_ClockConfig+0x1b8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d001      	beq.n	8006514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e032      	b.n	800657a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006520:	4b19      	ldr	r3, [pc, #100]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	4916      	ldr	r1, [pc, #88]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	4313      	orrs	r3, r2
 8006530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800653e:	4b12      	ldr	r3, [pc, #72]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	490e      	ldr	r1, [pc, #56]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800654e:	4313      	orrs	r3, r2
 8006550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006552:	f000 f821 	bl	8006598 <HAL_RCC_GetSysClockFreq>
 8006556:	4602      	mov	r2, r0
 8006558:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	091b      	lsrs	r3, r3, #4
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	490a      	ldr	r1, [pc, #40]	; (800658c <HAL_RCC_ClockConfig+0x1c0>)
 8006564:	5ccb      	ldrb	r3, [r1, r3]
 8006566:	fa22 f303 	lsr.w	r3, r2, r3
 800656a:	4a09      	ldr	r2, [pc, #36]	; (8006590 <HAL_RCC_ClockConfig+0x1c4>)
 800656c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800656e:	4b09      	ldr	r3, [pc, #36]	; (8006594 <HAL_RCC_ClockConfig+0x1c8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f7fc feb0 	bl	80032d8 <HAL_InitTick>

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	40023c00 	.word	0x40023c00
 8006588:	40023800 	.word	0x40023800
 800658c:	0800eb6c 	.word	0x0800eb6c
 8006590:	20000000 	.word	0x20000000
 8006594:	20000080 	.word	0x20000080

08006598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800659c:	b094      	sub	sp, #80	; 0x50
 800659e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	647b      	str	r3, [r7, #68]	; 0x44
 80065a4:	2300      	movs	r3, #0
 80065a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065a8:	2300      	movs	r3, #0
 80065aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065b0:	4b79      	ldr	r3, [pc, #484]	; (8006798 <HAL_RCC_GetSysClockFreq+0x200>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 030c 	and.w	r3, r3, #12
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d00d      	beq.n	80065d8 <HAL_RCC_GetSysClockFreq+0x40>
 80065bc:	2b08      	cmp	r3, #8
 80065be:	f200 80e1 	bhi.w	8006784 <HAL_RCC_GetSysClockFreq+0x1ec>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <HAL_RCC_GetSysClockFreq+0x34>
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d003      	beq.n	80065d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80065ca:	e0db      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065cc:	4b73      	ldr	r3, [pc, #460]	; (800679c <HAL_RCC_GetSysClockFreq+0x204>)
 80065ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80065d0:	e0db      	b.n	800678a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065d2:	4b73      	ldr	r3, [pc, #460]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80065d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065d6:	e0d8      	b.n	800678a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065d8:	4b6f      	ldr	r3, [pc, #444]	; (8006798 <HAL_RCC_GetSysClockFreq+0x200>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065e2:	4b6d      	ldr	r3, [pc, #436]	; (8006798 <HAL_RCC_GetSysClockFreq+0x200>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d063      	beq.n	80066b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ee:	4b6a      	ldr	r3, [pc, #424]	; (8006798 <HAL_RCC_GetSysClockFreq+0x200>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	099b      	lsrs	r3, r3, #6
 80065f4:	2200      	movs	r2, #0
 80065f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006600:	633b      	str	r3, [r7, #48]	; 0x30
 8006602:	2300      	movs	r3, #0
 8006604:	637b      	str	r3, [r7, #52]	; 0x34
 8006606:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800660a:	4622      	mov	r2, r4
 800660c:	462b      	mov	r3, r5
 800660e:	f04f 0000 	mov.w	r0, #0
 8006612:	f04f 0100 	mov.w	r1, #0
 8006616:	0159      	lsls	r1, r3, #5
 8006618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800661c:	0150      	lsls	r0, r2, #5
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4621      	mov	r1, r4
 8006624:	1a51      	subs	r1, r2, r1
 8006626:	6139      	str	r1, [r7, #16]
 8006628:	4629      	mov	r1, r5
 800662a:	eb63 0301 	sbc.w	r3, r3, r1
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	f04f 0300 	mov.w	r3, #0
 8006638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800663c:	4659      	mov	r1, fp
 800663e:	018b      	lsls	r3, r1, #6
 8006640:	4651      	mov	r1, sl
 8006642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006646:	4651      	mov	r1, sl
 8006648:	018a      	lsls	r2, r1, #6
 800664a:	4651      	mov	r1, sl
 800664c:	ebb2 0801 	subs.w	r8, r2, r1
 8006650:	4659      	mov	r1, fp
 8006652:	eb63 0901 	sbc.w	r9, r3, r1
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	f04f 0300 	mov.w	r3, #0
 800665e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800666a:	4690      	mov	r8, r2
 800666c:	4699      	mov	r9, r3
 800666e:	4623      	mov	r3, r4
 8006670:	eb18 0303 	adds.w	r3, r8, r3
 8006674:	60bb      	str	r3, [r7, #8]
 8006676:	462b      	mov	r3, r5
 8006678:	eb49 0303 	adc.w	r3, r9, r3
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800668a:	4629      	mov	r1, r5
 800668c:	024b      	lsls	r3, r1, #9
 800668e:	4621      	mov	r1, r4
 8006690:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006694:	4621      	mov	r1, r4
 8006696:	024a      	lsls	r2, r1, #9
 8006698:	4610      	mov	r0, r2
 800669a:	4619      	mov	r1, r3
 800669c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800669e:	2200      	movs	r2, #0
 80066a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066a8:	f7fa fade 	bl	8000c68 <__aeabi_uldivmod>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4613      	mov	r3, r2
 80066b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b4:	e058      	b.n	8006768 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066b6:	4b38      	ldr	r3, [pc, #224]	; (8006798 <HAL_RCC_GetSysClockFreq+0x200>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	099b      	lsrs	r3, r3, #6
 80066bc:	2200      	movs	r2, #0
 80066be:	4618      	mov	r0, r3
 80066c0:	4611      	mov	r1, r2
 80066c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066c6:	623b      	str	r3, [r7, #32]
 80066c8:	2300      	movs	r3, #0
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
 80066cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066d0:	4642      	mov	r2, r8
 80066d2:	464b      	mov	r3, r9
 80066d4:	f04f 0000 	mov.w	r0, #0
 80066d8:	f04f 0100 	mov.w	r1, #0
 80066dc:	0159      	lsls	r1, r3, #5
 80066de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066e2:	0150      	lsls	r0, r2, #5
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4641      	mov	r1, r8
 80066ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80066ee:	4649      	mov	r1, r9
 80066f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006700:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006704:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006708:	ebb2 040a 	subs.w	r4, r2, sl
 800670c:	eb63 050b 	sbc.w	r5, r3, fp
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	00eb      	lsls	r3, r5, #3
 800671a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800671e:	00e2      	lsls	r2, r4, #3
 8006720:	4614      	mov	r4, r2
 8006722:	461d      	mov	r5, r3
 8006724:	4643      	mov	r3, r8
 8006726:	18e3      	adds	r3, r4, r3
 8006728:	603b      	str	r3, [r7, #0]
 800672a:	464b      	mov	r3, r9
 800672c:	eb45 0303 	adc.w	r3, r5, r3
 8006730:	607b      	str	r3, [r7, #4]
 8006732:	f04f 0200 	mov.w	r2, #0
 8006736:	f04f 0300 	mov.w	r3, #0
 800673a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800673e:	4629      	mov	r1, r5
 8006740:	028b      	lsls	r3, r1, #10
 8006742:	4621      	mov	r1, r4
 8006744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006748:	4621      	mov	r1, r4
 800674a:	028a      	lsls	r2, r1, #10
 800674c:	4610      	mov	r0, r2
 800674e:	4619      	mov	r1, r3
 8006750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006752:	2200      	movs	r2, #0
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	61fa      	str	r2, [r7, #28]
 8006758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800675c:	f7fa fa84 	bl	8000c68 <__aeabi_uldivmod>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4613      	mov	r3, r2
 8006766:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006768:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <HAL_RCC_GetSysClockFreq+0x200>)
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	0c1b      	lsrs	r3, r3, #16
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	3301      	adds	r3, #1
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800677a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800677c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006780:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006782:	e002      	b.n	800678a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006784:	4b05      	ldr	r3, [pc, #20]	; (800679c <HAL_RCC_GetSysClockFreq+0x204>)
 8006786:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800678a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800678c:	4618      	mov	r0, r3
 800678e:	3750      	adds	r7, #80	; 0x50
 8006790:	46bd      	mov	sp, r7
 8006792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006796:	bf00      	nop
 8006798:	40023800 	.word	0x40023800
 800679c:	00f42400 	.word	0x00f42400
 80067a0:	007a1200 	.word	0x007a1200

080067a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067a8:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80067aa:	681b      	ldr	r3, [r3, #0]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	20000000 	.word	0x20000000

080067bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10b      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d105      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d075      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067f0:	4b91      	ldr	r3, [pc, #580]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067f6:	f7fc fdb3 	bl	8003360 <HAL_GetTick>
 80067fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067fc:	e008      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067fe:	f7fc fdaf 	bl	8003360 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d901      	bls.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e189      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006810:	4b8a      	ldr	r3, [pc, #552]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1f0      	bne.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b00      	cmp	r3, #0
 8006826:	d009      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	019a      	lsls	r2, r3, #6
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	071b      	lsls	r3, r3, #28
 8006834:	4981      	ldr	r1, [pc, #516]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006836:	4313      	orrs	r3, r2
 8006838:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d01f      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006848:	4b7c      	ldr	r3, [pc, #496]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800684a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800684e:	0f1b      	lsrs	r3, r3, #28
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	019a      	lsls	r2, r3, #6
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	061b      	lsls	r3, r3, #24
 8006862:	431a      	orrs	r2, r3
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	071b      	lsls	r3, r3, #28
 8006868:	4974      	ldr	r1, [pc, #464]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800686a:	4313      	orrs	r3, r2
 800686c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006870:	4b72      	ldr	r3, [pc, #456]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006876:	f023 021f 	bic.w	r2, r3, #31
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	3b01      	subs	r3, #1
 8006880:	496e      	ldr	r1, [pc, #440]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006882:	4313      	orrs	r3, r2
 8006884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00d      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	019a      	lsls	r2, r3, #6
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	061b      	lsls	r3, r3, #24
 80068a0:	431a      	orrs	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	071b      	lsls	r3, r3, #28
 80068a8:	4964      	ldr	r1, [pc, #400]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80068b0:	4b61      	ldr	r3, [pc, #388]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068b6:	f7fc fd53 	bl	8003360 <HAL_GetTick>
 80068ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068bc:	e008      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068be:	f7fc fd4f 	bl	8003360 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e129      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068d0:	4b5a      	ldr	r3, [pc, #360]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0f0      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d105      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d079      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80068f4:	4b52      	ldr	r3, [pc, #328]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068fa:	f7fc fd31 	bl	8003360 <HAL_GetTick>
 80068fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006900:	e008      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006902:	f7fc fd2d 	bl	8003360 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d901      	bls.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e107      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006914:	4b49      	ldr	r3, [pc, #292]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800691c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006920:	d0ef      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	d020      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800692e:	4b43      	ldr	r3, [pc, #268]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006934:	0f1b      	lsrs	r3, r3, #28
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	019a      	lsls	r2, r3, #6
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	061b      	lsls	r3, r3, #24
 8006948:	431a      	orrs	r2, r3
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	071b      	lsls	r3, r3, #28
 800694e:	493b      	ldr	r1, [pc, #236]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006950:	4313      	orrs	r3, r2
 8006952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006956:	4b39      	ldr	r3, [pc, #228]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800695c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	3b01      	subs	r3, #1
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	4934      	ldr	r1, [pc, #208]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800696a:	4313      	orrs	r3, r2
 800696c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01e      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800697c:	4b2f      	ldr	r3, [pc, #188]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800697e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006982:	0e1b      	lsrs	r3, r3, #24
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	019a      	lsls	r2, r3, #6
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	061b      	lsls	r3, r3, #24
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	071b      	lsls	r3, r3, #28
 800699c:	4927      	ldr	r1, [pc, #156]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80069a4:	4b25      	ldr	r3, [pc, #148]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	4922      	ldr	r1, [pc, #136]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80069ba:	4b21      	ldr	r3, [pc, #132]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80069bc:	2201      	movs	r2, #1
 80069be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069c0:	f7fc fcce 	bl	8003360 <HAL_GetTick>
 80069c4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069c6:	e008      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80069c8:	f7fc fcca 	bl	8003360 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e0a4      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069da:	4b18      	ldr	r3, [pc, #96]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069e6:	d1ef      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 808b 	beq.w	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	4b10      	ldr	r3, [pc, #64]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	4a0f      	ldr	r2, [pc, #60]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a04:	6413      	str	r3, [r2, #64]	; 0x40
 8006a06:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006a12:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a0b      	ldr	r2, [pc, #44]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a1e:	f7fc fc9f 	bl	8003360 <HAL_GetTick>
 8006a22:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a24:	e010      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a26:	f7fc fc9b 	bl	8003360 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d909      	bls.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e075      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006a38:	42470068 	.word	0x42470068
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	42470070 	.word	0x42470070
 8006a44:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a48:	4b38      	ldr	r3, [pc, #224]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0e8      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a54:	4b36      	ldr	r3, [pc, #216]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a5c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d02f      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d028      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a72:	4b2f      	ldr	r3, [pc, #188]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a7c:	4b2d      	ldr	r3, [pc, #180]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a82:	4b2c      	ldr	r3, [pc, #176]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a88:	4a29      	ldr	r2, [pc, #164]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a8e:	4b28      	ldr	r3, [pc, #160]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d114      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a9a:	f7fc fc61 	bl	8003360 <HAL_GetTick>
 8006a9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aa0:	e00a      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aa2:	f7fc fc5d 	bl	8003360 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d901      	bls.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e035      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab8:	4b1d      	ldr	r3, [pc, #116]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0ee      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ad0:	d10d      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006ad2:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ae6:	4912      	ldr	r1, [pc, #72]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	608b      	str	r3, [r1, #8]
 8006aec:	e005      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006aee:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	4a0f      	ldr	r2, [pc, #60]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006af4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006af8:	6093      	str	r3, [r2, #8]
 8006afa:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006afc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b06:	490a      	ldr	r1, [pc, #40]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0310 	and.w	r3, r3, #16
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006b1e:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006b20:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	40007000 	.word	0x40007000
 8006b30:	40023800 	.word	0x40023800
 8006b34:	42470e40 	.word	0x42470e40
 8006b38:	424711e0 	.word	0x424711e0

08006b3c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e025      	b.n	8006b9c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d106      	bne.n	8006b6a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f81d 	bl	8006ba4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	f000 fe57 	bl	8007830 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	f000 feac 	bl	80078ea <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006bca:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d101      	bne.n	8006bd6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e021      	b.n	8006c1a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d002      	beq.n	8006be2 <HAL_SDRAM_SendCommand+0x2a>
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	2b05      	cmp	r3, #5
 8006be0:	d118      	bne.n	8006c14 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2202      	movs	r2, #2
 8006be6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	68b9      	ldr	r1, [r7, #8]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fee2 	bl	80079bc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d104      	bne.n	8006c0a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2205      	movs	r2, #5
 8006c04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006c08:	e006      	b.n	8006c18 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006c12:	e001      	b.n	8006c18 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e000      	b.n	8006c1a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b082      	sub	sp, #8
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d101      	bne.n	8006c3c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e016      	b.n	8006c6a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d10f      	bne.n	8006c68 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 feed 	bl	8007a36 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	e000      	b.n	8006c6a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b082      	sub	sp, #8
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e07b      	b.n	8006d7c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d108      	bne.n	8006c9e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c94:	d009      	beq.n	8006caa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	61da      	str	r2, [r3, #28]
 8006c9c:	e005      	b.n	8006caa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7fa fca7 	bl	8001618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2202      	movs	r2, #2
 8006cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ce0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	431a      	orrs	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2e:	ea42 0103 	orr.w	r1, r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	0c1b      	lsrs	r3, r3, #16
 8006d48:	f003 0104 	and.w	r1, r3, #4
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	f003 0210 	and.w	r2, r3, #16
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	69da      	ldr	r2, [r3, #28]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e01a      	b.n	8006dcc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2202      	movs	r2, #2
 8006d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fa fc7a 	bl	80016a8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	4613      	mov	r3, r2
 8006de2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d101      	bne.n	8006df6 <HAL_SPI_Transmit+0x22>
 8006df2:	2302      	movs	r3, #2
 8006df4:	e126      	b.n	8007044 <HAL_SPI_Transmit+0x270>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dfe:	f7fc faaf 	bl	8003360 <HAL_GetTick>
 8006e02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e04:	88fb      	ldrh	r3, [r7, #6]
 8006e06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d002      	beq.n	8006e1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e14:	2302      	movs	r3, #2
 8006e16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e18:	e10b      	b.n	8007032 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <HAL_SPI_Transmit+0x52>
 8006e20:	88fb      	ldrh	r3, [r7, #6]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d102      	bne.n	8006e2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e2a:	e102      	b.n	8007032 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2203      	movs	r2, #3
 8006e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	88fa      	ldrh	r2, [r7, #6]
 8006e44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	88fa      	ldrh	r2, [r7, #6]
 8006e4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e72:	d10f      	bne.n	8006e94 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9e:	2b40      	cmp	r3, #64	; 0x40
 8006ea0:	d007      	beq.n	8006eb2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eba:	d14b      	bne.n	8006f54 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <HAL_SPI_Transmit+0xf6>
 8006ec4:	8afb      	ldrh	r3, [r7, #22]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d13e      	bne.n	8006f48 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	881a      	ldrh	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	1c9a      	adds	r2, r3, #2
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006eee:	e02b      	b.n	8006f48 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d112      	bne.n	8006f24 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	881a      	ldrh	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0e:	1c9a      	adds	r2, r3, #2
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f22:	e011      	b.n	8006f48 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f24:	f7fc fa1c 	bl	8003360 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d803      	bhi.n	8006f3c <HAL_SPI_Transmit+0x168>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3a:	d102      	bne.n	8006f42 <HAL_SPI_Transmit+0x16e>
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d102      	bne.n	8006f48 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f46:	e074      	b.n	8007032 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1ce      	bne.n	8006ef0 <HAL_SPI_Transmit+0x11c>
 8006f52:	e04c      	b.n	8006fee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <HAL_SPI_Transmit+0x18e>
 8006f5c:	8afb      	ldrh	r3, [r7, #22]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d140      	bne.n	8006fe4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	330c      	adds	r3, #12
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f88:	e02c      	b.n	8006fe4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d113      	bne.n	8006fc0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	330c      	adds	r3, #12
 8006fa2:	7812      	ldrb	r2, [r2, #0]
 8006fa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fbe:	e011      	b.n	8006fe4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fc0:	f7fc f9ce 	bl	8003360 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d803      	bhi.n	8006fd8 <HAL_SPI_Transmit+0x204>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd6:	d102      	bne.n	8006fde <HAL_SPI_Transmit+0x20a>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d102      	bne.n	8006fe4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fe2:	e026      	b.n	8007032 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1cd      	bne.n	8006f8a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 fbda 	bl	80077ac <SPI_EndRxTxTransaction>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2220      	movs	r2, #32
 8007002:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10a      	bne.n	8007022 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800700c:	2300      	movs	r3, #0
 800700e:	613b      	str	r3, [r7, #16]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	613b      	str	r3, [r7, #16]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	77fb      	strb	r3, [r7, #31]
 800702e:	e000      	b.n	8007032 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007030:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007042:	7ffb      	ldrb	r3, [r7, #31]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3720      	adds	r7, #32
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af02      	add	r7, sp, #8
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007068:	d112      	bne.n	8007090 <HAL_SPI_Receive+0x44>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10e      	bne.n	8007090 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2204      	movs	r2, #4
 8007076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800707a:	88fa      	ldrh	r2, [r7, #6]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	4613      	mov	r3, r2
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 f8f1 	bl	800726e <HAL_SPI_TransmitReceive>
 800708c:	4603      	mov	r3, r0
 800708e:	e0ea      	b.n	8007266 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007096:	2b01      	cmp	r3, #1
 8007098:	d101      	bne.n	800709e <HAL_SPI_Receive+0x52>
 800709a:	2302      	movs	r3, #2
 800709c:	e0e3      	b.n	8007266 <HAL_SPI_Receive+0x21a>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070a6:	f7fc f95b 	bl	8003360 <HAL_GetTick>
 80070aa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d002      	beq.n	80070be <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80070b8:	2302      	movs	r3, #2
 80070ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070bc:	e0ca      	b.n	8007254 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <HAL_SPI_Receive+0x7e>
 80070c4:	88fb      	ldrh	r3, [r7, #6]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d102      	bne.n	80070d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070ce:	e0c1      	b.n	8007254 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2204      	movs	r2, #4
 80070d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	88fa      	ldrh	r2, [r7, #6]
 80070e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	88fa      	ldrh	r2, [r7, #6]
 80070ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007116:	d10f      	bne.n	8007138 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007126:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007136:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007142:	2b40      	cmp	r3, #64	; 0x40
 8007144:	d007      	beq.n	8007156 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007154:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d162      	bne.n	8007224 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800715e:	e02e      	b.n	80071be <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b01      	cmp	r3, #1
 800716c:	d115      	bne.n	800719a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f103 020c 	add.w	r2, r3, #12
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	7812      	ldrb	r2, [r2, #0]
 800717c:	b2d2      	uxtb	r2, r2
 800717e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718e:	b29b      	uxth	r3, r3
 8007190:	3b01      	subs	r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007198:	e011      	b.n	80071be <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800719a:	f7fc f8e1 	bl	8003360 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d803      	bhi.n	80071b2 <HAL_SPI_Receive+0x166>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d102      	bne.n	80071b8 <HAL_SPI_Receive+0x16c>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80071bc:	e04a      	b.n	8007254 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1cb      	bne.n	8007160 <HAL_SPI_Receive+0x114>
 80071c8:	e031      	b.n	800722e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d113      	bne.n	8007200 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	b292      	uxth	r2, r2
 80071e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ea:	1c9a      	adds	r2, r3, #2
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071fe:	e011      	b.n	8007224 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007200:	f7fc f8ae 	bl	8003360 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	429a      	cmp	r2, r3
 800720e:	d803      	bhi.n	8007218 <HAL_SPI_Receive+0x1cc>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007216:	d102      	bne.n	800721e <HAL_SPI_Receive+0x1d2>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d102      	bne.n	8007224 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007222:	e017      	b.n	8007254 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1cd      	bne.n	80071ca <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 fa54 	bl	80076e0 <SPI_EndRxTransaction>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2220      	movs	r2, #32
 8007242:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	75fb      	strb	r3, [r7, #23]
 8007250:	e000      	b.n	8007254 <HAL_SPI_Receive+0x208>
  }

error :
 8007252:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007264:	7dfb      	ldrb	r3, [r7, #23]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b08c      	sub	sp, #48	; 0x30
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	607a      	str	r2, [r7, #4]
 800727a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800727c:	2301      	movs	r3, #1
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800728c:	2b01      	cmp	r3, #1
 800728e:	d101      	bne.n	8007294 <HAL_SPI_TransmitReceive+0x26>
 8007290:	2302      	movs	r3, #2
 8007292:	e18a      	b.n	80075aa <HAL_SPI_TransmitReceive+0x33c>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800729c:	f7fc f860 	bl	8003360 <HAL_GetTick>
 80072a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80072b2:	887b      	ldrh	r3, [r7, #2]
 80072b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d00f      	beq.n	80072de <HAL_SPI_TransmitReceive+0x70>
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072c4:	d107      	bne.n	80072d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d103      	bne.n	80072d6 <HAL_SPI_TransmitReceive+0x68>
 80072ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d003      	beq.n	80072de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80072d6:	2302      	movs	r3, #2
 80072d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80072dc:	e15b      	b.n	8007596 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d005      	beq.n	80072f0 <HAL_SPI_TransmitReceive+0x82>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <HAL_SPI_TransmitReceive+0x82>
 80072ea:	887b      	ldrh	r3, [r7, #2]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d103      	bne.n	80072f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80072f6:	e14e      	b.n	8007596 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b04      	cmp	r3, #4
 8007302:	d003      	beq.n	800730c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2205      	movs	r2, #5
 8007308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	887a      	ldrh	r2, [r7, #2]
 800731c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	887a      	ldrh	r2, [r7, #2]
 8007322:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	887a      	ldrh	r2, [r7, #2]
 800732e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	887a      	ldrh	r2, [r7, #2]
 8007334:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734c:	2b40      	cmp	r3, #64	; 0x40
 800734e:	d007      	beq.n	8007360 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800735e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007368:	d178      	bne.n	800745c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <HAL_SPI_TransmitReceive+0x10a>
 8007372:	8b7b      	ldrh	r3, [r7, #26]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d166      	bne.n	8007446 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737c:	881a      	ldrh	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	1c9a      	adds	r2, r3, #2
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800739c:	e053      	b.n	8007446 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d11b      	bne.n	80073e4 <HAL_SPI_TransmitReceive+0x176>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d016      	beq.n	80073e4 <HAL_SPI_TransmitReceive+0x176>
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d113      	bne.n	80073e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c0:	881a      	ldrh	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073cc:	1c9a      	adds	r2, r3, #2
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	3b01      	subs	r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d119      	bne.n	8007426 <HAL_SPI_TransmitReceive+0x1b8>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d014      	beq.n	8007426 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	b292      	uxth	r2, r2
 8007408:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	1c9a      	adds	r2, r3, #2
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007418:	b29b      	uxth	r3, r3
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007422:	2301      	movs	r3, #1
 8007424:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007426:	f7fb ff9b 	bl	8003360 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007432:	429a      	cmp	r2, r3
 8007434:	d807      	bhi.n	8007446 <HAL_SPI_TransmitReceive+0x1d8>
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743c:	d003      	beq.n	8007446 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007444:	e0a7      	b.n	8007596 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800744a:	b29b      	uxth	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1a6      	bne.n	800739e <HAL_SPI_TransmitReceive+0x130>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007454:	b29b      	uxth	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1a1      	bne.n	800739e <HAL_SPI_TransmitReceive+0x130>
 800745a:	e07c      	b.n	8007556 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <HAL_SPI_TransmitReceive+0x1fc>
 8007464:	8b7b      	ldrh	r3, [r7, #26]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d16b      	bne.n	8007542 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	330c      	adds	r3, #12
 8007474:	7812      	ldrb	r2, [r2, #0]
 8007476:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007490:	e057      	b.n	8007542 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b02      	cmp	r3, #2
 800749e:	d11c      	bne.n	80074da <HAL_SPI_TransmitReceive+0x26c>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d017      	beq.n	80074da <HAL_SPI_TransmitReceive+0x26c>
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d114      	bne.n	80074da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	330c      	adds	r3, #12
 80074ba:	7812      	ldrb	r2, [r2, #0]
 80074bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	3b01      	subs	r3, #1
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d119      	bne.n	800751c <HAL_SPI_TransmitReceive+0x2ae>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d014      	beq.n	800751c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fc:	b2d2      	uxtb	r2, r2
 80074fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007518:	2301      	movs	r3, #1
 800751a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800751c:	f7fb ff20 	bl	8003360 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007528:	429a      	cmp	r2, r3
 800752a:	d803      	bhi.n	8007534 <HAL_SPI_TransmitReceive+0x2c6>
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007532:	d102      	bne.n	800753a <HAL_SPI_TransmitReceive+0x2cc>
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	2b00      	cmp	r3, #0
 8007538:	d103      	bne.n	8007542 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007540:	e029      	b.n	8007596 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007546:	b29b      	uxth	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1a2      	bne.n	8007492 <HAL_SPI_TransmitReceive+0x224>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d19d      	bne.n	8007492 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007558:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 f926 	bl	80077ac <SPI_EndRxTxTransaction>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d006      	beq.n	8007574 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2220      	movs	r2, #32
 8007570:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007572:	e010      	b.n	8007596 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10b      	bne.n	8007594 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800757c:	2300      	movs	r3, #0
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	e000      	b.n	8007596 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007594:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3730      	adds	r7, #48	; 0x30
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075c0:	b2db      	uxtb	r3, r3
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
	...

080075d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075e0:	f7fb febe 	bl	8003360 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	1a9b      	subs	r3, r3, r2
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	4413      	add	r3, r2
 80075ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80075f0:	f7fb feb6 	bl	8003360 <HAL_GetTick>
 80075f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80075f6:	4b39      	ldr	r3, [pc, #228]	; (80076dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	015b      	lsls	r3, r3, #5
 80075fc:	0d1b      	lsrs	r3, r3, #20
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	fb02 f303 	mul.w	r3, r2, r3
 8007604:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007606:	e054      	b.n	80076b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760e:	d050      	beq.n	80076b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007610:	f7fb fea6 	bl	8003360 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	429a      	cmp	r2, r3
 800761e:	d902      	bls.n	8007626 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d13d      	bne.n	80076a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007634:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800763e:	d111      	bne.n	8007664 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007648:	d004      	beq.n	8007654 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007652:	d107      	bne.n	8007664 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007662:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800766c:	d10f      	bne.n	800768e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800768c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e017      	b.n	80076d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	3b01      	subs	r3, #1
 80076b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	4013      	ands	r3, r2
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	429a      	cmp	r2, r3
 80076c0:	bf0c      	ite	eq
 80076c2:	2301      	moveq	r3, #1
 80076c4:	2300      	movne	r3, #0
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	79fb      	ldrb	r3, [r7, #7]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d19b      	bne.n	8007608 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3720      	adds	r7, #32
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20000000 	.word	0x20000000

080076e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af02      	add	r7, sp, #8
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076f4:	d111      	bne.n	800771a <SPI_EndRxTransaction+0x3a>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076fe:	d004      	beq.n	800770a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007708:	d107      	bne.n	800771a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007718:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007722:	d12a      	bne.n	800777a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800772c:	d012      	beq.n	8007754 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2200      	movs	r2, #0
 8007736:	2180      	movs	r1, #128	; 0x80
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7ff ff49 	bl	80075d0 <SPI_WaitFlagStateUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d02d      	beq.n	80077a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007748:	f043 0220 	orr.w	r2, r3, #32
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e026      	b.n	80077a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2200      	movs	r2, #0
 800775c:	2101      	movs	r1, #1
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f7ff ff36 	bl	80075d0 <SPI_WaitFlagStateUntilTimeout>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d01a      	beq.n	80077a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776e:	f043 0220 	orr.w	r2, r3, #32
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e013      	b.n	80077a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2200      	movs	r2, #0
 8007782:	2101      	movs	r1, #1
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f7ff ff23 	bl	80075d0 <SPI_WaitFlagStateUntilTimeout>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d007      	beq.n	80077a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007794:	f043 0220 	orr.w	r2, r3, #32
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e000      	b.n	80077a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b088      	sub	sp, #32
 80077b0:	af02      	add	r7, sp, #8
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077b8:	4b1b      	ldr	r3, [pc, #108]	; (8007828 <SPI_EndRxTxTransaction+0x7c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a1b      	ldr	r2, [pc, #108]	; (800782c <SPI_EndRxTxTransaction+0x80>)
 80077be:	fba2 2303 	umull	r2, r3, r2, r3
 80077c2:	0d5b      	lsrs	r3, r3, #21
 80077c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077c8:	fb02 f303 	mul.w	r3, r2, r3
 80077cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077d6:	d112      	bne.n	80077fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2200      	movs	r2, #0
 80077e0:	2180      	movs	r1, #128	; 0x80
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f7ff fef4 	bl	80075d0 <SPI_WaitFlagStateUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d016      	beq.n	800781c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f2:	f043 0220 	orr.w	r2, r3, #32
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e00f      	b.n	800781e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00a      	beq.n	800781a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	3b01      	subs	r3, #1
 8007808:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007814:	2b80      	cmp	r3, #128	; 0x80
 8007816:	d0f2      	beq.n	80077fe <SPI_EndRxTxTransaction+0x52>
 8007818:	e000      	b.n	800781c <SPI_EndRxTxTransaction+0x70>
        break;
 800781a:	bf00      	nop
  }

  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000000 	.word	0x20000000
 800782c:	165e9f81 	.word	0x165e9f81

08007830 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d123      	bne.n	800788a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800784a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	6851      	ldr	r1, [r2, #4]
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	6892      	ldr	r2, [r2, #8]
 8007856:	4311      	orrs	r1, r2
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	68d2      	ldr	r2, [r2, #12]
 800785c:	4311      	orrs	r1, r2
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	6912      	ldr	r2, [r2, #16]
 8007862:	4311      	orrs	r1, r2
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	6952      	ldr	r2, [r2, #20]
 8007868:	4311      	orrs	r1, r2
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	6992      	ldr	r2, [r2, #24]
 800786e:	4311      	orrs	r1, r2
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	69d2      	ldr	r2, [r2, #28]
 8007874:	4311      	orrs	r1, r2
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	6a12      	ldr	r2, [r2, #32]
 800787a:	4311      	orrs	r1, r2
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007880:	430a      	orrs	r2, r1
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	e028      	b.n	80078dc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	69d9      	ldr	r1, [r3, #28]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	4319      	orrs	r1, r3
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	430b      	orrs	r3, r1
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80078b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	6851      	ldr	r1, [r2, #4]
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	6892      	ldr	r2, [r2, #8]
 80078bc:	4311      	orrs	r1, r2
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	68d2      	ldr	r2, [r2, #12]
 80078c2:	4311      	orrs	r1, r2
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	6912      	ldr	r2, [r2, #16]
 80078c8:	4311      	orrs	r1, r2
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	6952      	ldr	r2, [r2, #20]
 80078ce:	4311      	orrs	r1, r2
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	6992      	ldr	r2, [r2, #24]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b085      	sub	sp, #20
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	60f8      	str	r0, [r7, #12]
 80078f2:	60b9      	str	r1, [r7, #8]
 80078f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d128      	bne.n	800794e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	1e59      	subs	r1, r3, #1
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	3b01      	subs	r3, #1
 8007910:	011b      	lsls	r3, r3, #4
 8007912:	4319      	orrs	r1, r3
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	3b01      	subs	r3, #1
 800791a:	021b      	lsls	r3, r3, #8
 800791c:	4319      	orrs	r1, r3
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	3b01      	subs	r3, #1
 8007924:	031b      	lsls	r3, r3, #12
 8007926:	4319      	orrs	r1, r3
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	3b01      	subs	r3, #1
 800792e:	041b      	lsls	r3, r3, #16
 8007930:	4319      	orrs	r1, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	3b01      	subs	r3, #1
 8007938:	051b      	lsls	r3, r3, #20
 800793a:	4319      	orrs	r1, r3
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	3b01      	subs	r3, #1
 8007942:	061b      	lsls	r3, r3, #24
 8007944:	430b      	orrs	r3, r1
 8007946:	431a      	orrs	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	609a      	str	r2, [r3, #8]
 800794c:	e02f      	b.n	80079ae <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007956:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	68d2      	ldr	r2, [r2, #12]
 800795e:	3a01      	subs	r2, #1
 8007960:	0311      	lsls	r1, r2, #12
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	6952      	ldr	r2, [r2, #20]
 8007966:	3a01      	subs	r2, #1
 8007968:	0512      	lsls	r2, r2, #20
 800796a:	430a      	orrs	r2, r1
 800796c:	431a      	orrs	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	1e59      	subs	r1, r3, #1
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	3b01      	subs	r3, #1
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	4319      	orrs	r1, r3
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	3b01      	subs	r3, #1
 8007990:	021b      	lsls	r3, r3, #8
 8007992:	4319      	orrs	r1, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	3b01      	subs	r3, #1
 800799a:	041b      	lsls	r3, r3, #16
 800799c:	4319      	orrs	r1, r3
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	061b      	lsls	r3, r3, #24
 80079a6:	430b      	orrs	r3, r1
 80079a8:	431a      	orrs	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	0d9b      	lsrs	r3, r3, #22
 80079d2:	059b      	lsls	r3, r3, #22
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	6811      	ldr	r1, [r2, #0]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	6852      	ldr	r2, [r2, #4]
 80079dc:	4311      	orrs	r1, r2
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	6892      	ldr	r2, [r2, #8]
 80079e2:	3a01      	subs	r2, #1
 80079e4:	0152      	lsls	r2, r2, #5
 80079e6:	4311      	orrs	r1, r2
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	68d2      	ldr	r2, [r2, #12]
 80079ec:	0252      	lsls	r2, r2, #9
 80079ee:	430a      	orrs	r2, r1
 80079f0:	431a      	orrs	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80079f6:	f7fb fcb3 	bl	8003360 <HAL_GetTick>
 80079fa:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80079fc:	e010      	b.n	8007a20 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a04:	d00c      	beq.n	8007a20 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d007      	beq.n	8007a1c <FMC_SDRAM_SendCommand+0x60>
 8007a0c:	f7fb fca8 	bl	8003360 <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d201      	bcs.n	8007a20 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e006      	b.n	8007a2e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	f003 0320 	and.w	r3, r3, #32
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	d0e8      	beq.n	80079fe <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007a48:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	0052      	lsls	r2, r2, #1
 8007a50:	431a      	orrs	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a64:	b084      	sub	sp, #16
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	f107 001c 	add.w	r0, r7, #28
 8007a72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d122      	bne.n	8007ac2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d105      	bne.n	8007ab6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fbee 	bl	8009298 <USB_CoreReset>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73fb      	strb	r3, [r7, #15]
 8007ac0:	e01a      	b.n	8007af8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f001 fbe2 	bl	8009298 <USB_CoreReset>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d106      	bne.n	8007aec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	639a      	str	r2, [r3, #56]	; 0x38
 8007aea:	e005      	b.n	8007af8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d10b      	bne.n	8007b16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f043 0206 	orr.w	r2, r3, #6
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f043 0220 	orr.w	r2, r3, #32
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b22:	b004      	add	sp, #16
 8007b24:	4770      	bx	lr
	...

08007b28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	4613      	mov	r3, r2
 8007b34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d165      	bne.n	8007c08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	4a41      	ldr	r2, [pc, #260]	; (8007c44 <USB_SetTurnaroundTime+0x11c>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d906      	bls.n	8007b52 <USB_SetTurnaroundTime+0x2a>
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	4a40      	ldr	r2, [pc, #256]	; (8007c48 <USB_SetTurnaroundTime+0x120>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d202      	bcs.n	8007b52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007b4c:	230f      	movs	r3, #15
 8007b4e:	617b      	str	r3, [r7, #20]
 8007b50:	e062      	b.n	8007c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	4a3c      	ldr	r2, [pc, #240]	; (8007c48 <USB_SetTurnaroundTime+0x120>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d306      	bcc.n	8007b68 <USB_SetTurnaroundTime+0x40>
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	4a3b      	ldr	r2, [pc, #236]	; (8007c4c <USB_SetTurnaroundTime+0x124>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d202      	bcs.n	8007b68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007b62:	230e      	movs	r3, #14
 8007b64:	617b      	str	r3, [r7, #20]
 8007b66:	e057      	b.n	8007c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	4a38      	ldr	r2, [pc, #224]	; (8007c4c <USB_SetTurnaroundTime+0x124>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d306      	bcc.n	8007b7e <USB_SetTurnaroundTime+0x56>
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	4a37      	ldr	r2, [pc, #220]	; (8007c50 <USB_SetTurnaroundTime+0x128>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d202      	bcs.n	8007b7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007b78:	230d      	movs	r3, #13
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	e04c      	b.n	8007c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	4a33      	ldr	r2, [pc, #204]	; (8007c50 <USB_SetTurnaroundTime+0x128>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d306      	bcc.n	8007b94 <USB_SetTurnaroundTime+0x6c>
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	4a32      	ldr	r2, [pc, #200]	; (8007c54 <USB_SetTurnaroundTime+0x12c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d802      	bhi.n	8007b94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007b8e:	230c      	movs	r3, #12
 8007b90:	617b      	str	r3, [r7, #20]
 8007b92:	e041      	b.n	8007c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	4a2f      	ldr	r2, [pc, #188]	; (8007c54 <USB_SetTurnaroundTime+0x12c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d906      	bls.n	8007baa <USB_SetTurnaroundTime+0x82>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	4a2e      	ldr	r2, [pc, #184]	; (8007c58 <USB_SetTurnaroundTime+0x130>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d802      	bhi.n	8007baa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007ba4:	230b      	movs	r3, #11
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	e036      	b.n	8007c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	4a2a      	ldr	r2, [pc, #168]	; (8007c58 <USB_SetTurnaroundTime+0x130>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d906      	bls.n	8007bc0 <USB_SetTurnaroundTime+0x98>
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	4a29      	ldr	r2, [pc, #164]	; (8007c5c <USB_SetTurnaroundTime+0x134>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d802      	bhi.n	8007bc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007bba:	230a      	movs	r3, #10
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	e02b      	b.n	8007c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	4a26      	ldr	r2, [pc, #152]	; (8007c5c <USB_SetTurnaroundTime+0x134>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d906      	bls.n	8007bd6 <USB_SetTurnaroundTime+0xae>
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	4a25      	ldr	r2, [pc, #148]	; (8007c60 <USB_SetTurnaroundTime+0x138>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d202      	bcs.n	8007bd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007bd0:	2309      	movs	r3, #9
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	e020      	b.n	8007c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	4a21      	ldr	r2, [pc, #132]	; (8007c60 <USB_SetTurnaroundTime+0x138>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d306      	bcc.n	8007bec <USB_SetTurnaroundTime+0xc4>
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	4a20      	ldr	r2, [pc, #128]	; (8007c64 <USB_SetTurnaroundTime+0x13c>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d802      	bhi.n	8007bec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007be6:	2308      	movs	r3, #8
 8007be8:	617b      	str	r3, [r7, #20]
 8007bea:	e015      	b.n	8007c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4a1d      	ldr	r2, [pc, #116]	; (8007c64 <USB_SetTurnaroundTime+0x13c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d906      	bls.n	8007c02 <USB_SetTurnaroundTime+0xda>
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	4a1c      	ldr	r2, [pc, #112]	; (8007c68 <USB_SetTurnaroundTime+0x140>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d202      	bcs.n	8007c02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007bfc:	2307      	movs	r3, #7
 8007bfe:	617b      	str	r3, [r7, #20]
 8007c00:	e00a      	b.n	8007c18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007c02:	2306      	movs	r3, #6
 8007c04:	617b      	str	r3, [r7, #20]
 8007c06:	e007      	b.n	8007c18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007c08:	79fb      	ldrb	r3, [r7, #7]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d102      	bne.n	8007c14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007c0e:	2309      	movs	r3, #9
 8007c10:	617b      	str	r3, [r7, #20]
 8007c12:	e001      	b.n	8007c18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007c14:	2309      	movs	r3, #9
 8007c16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	029b      	lsls	r3, r3, #10
 8007c2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007c30:	431a      	orrs	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	00d8acbf 	.word	0x00d8acbf
 8007c48:	00e4e1c0 	.word	0x00e4e1c0
 8007c4c:	00f42400 	.word	0x00f42400
 8007c50:	01067380 	.word	0x01067380
 8007c54:	011a499f 	.word	0x011a499f
 8007c58:	01312cff 	.word	0x01312cff
 8007c5c:	014ca43f 	.word	0x014ca43f
 8007c60:	016e3600 	.word	0x016e3600
 8007c64:	01a6ab1f 	.word	0x01a6ab1f
 8007c68:	01e84800 	.word	0x01e84800

08007c6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f043 0201 	orr.w	r2, r3, #1
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f023 0201 	bic.w	r2, r3, #1
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ccc:	78fb      	ldrb	r3, [r7, #3]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d115      	bne.n	8007cfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007cde:	2001      	movs	r0, #1
 8007ce0:	f7fb fb4a 	bl	8003378 <HAL_Delay>
      ms++;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f001 fa45 	bl	800917a <USB_GetMode>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d01e      	beq.n	8007d34 <USB_SetCurrentMode+0x84>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b31      	cmp	r3, #49	; 0x31
 8007cfa:	d9f0      	bls.n	8007cde <USB_SetCurrentMode+0x2e>
 8007cfc:	e01a      	b.n	8007d34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cfe:	78fb      	ldrb	r3, [r7, #3]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d115      	bne.n	8007d30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d10:	2001      	movs	r0, #1
 8007d12:	f7fb fb31 	bl	8003378 <HAL_Delay>
      ms++;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 fa2c 	bl	800917a <USB_GetMode>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <USB_SetCurrentMode+0x84>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b31      	cmp	r3, #49	; 0x31
 8007d2c:	d9f0      	bls.n	8007d10 <USB_SetCurrentMode+0x60>
 8007d2e:	e001      	b.n	8007d34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e005      	b.n	8007d40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b32      	cmp	r3, #50	; 0x32
 8007d38:	d101      	bne.n	8007d3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e000      	b.n	8007d40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d48:	b084      	sub	sp, #16
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b086      	sub	sp, #24
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d62:	2300      	movs	r3, #0
 8007d64:	613b      	str	r3, [r7, #16]
 8007d66:	e009      	b.n	8007d7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	3340      	adds	r3, #64	; 0x40
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	2200      	movs	r2, #0
 8007d74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	613b      	str	r3, [r7, #16]
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	2b0e      	cmp	r3, #14
 8007d80:	d9f2      	bls.n	8007d68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d11c      	bne.n	8007dc2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d96:	f043 0302 	orr.w	r3, r3, #2
 8007d9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8007dc0:	e00b      	b.n	8007dda <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007de0:	461a      	mov	r2, r3
 8007de2:	2300      	movs	r3, #0
 8007de4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dec:	4619      	mov	r1, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df4:	461a      	mov	r2, r3
 8007df6:	680b      	ldr	r3, [r1, #0]
 8007df8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d10c      	bne.n	8007e1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d104      	bne.n	8007e10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e06:	2100      	movs	r1, #0
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f965 	bl	80080d8 <USB_SetDevSpeed>
 8007e0e:	e008      	b.n	8007e22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e10:	2101      	movs	r1, #1
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f960 	bl	80080d8 <USB_SetDevSpeed>
 8007e18:	e003      	b.n	8007e22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e1a:	2103      	movs	r1, #3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f95b 	bl	80080d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e22:	2110      	movs	r1, #16
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8f3 	bl	8008010 <USB_FlushTxFifo>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f91f 	bl	8008078 <USB_FlushRxFifo>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e56:	461a      	mov	r2, r3
 8007e58:	2300      	movs	r3, #0
 8007e5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e62:	461a      	mov	r2, r3
 8007e64:	2300      	movs	r3, #0
 8007e66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	613b      	str	r3, [r7, #16]
 8007e6c:	e043      	b.n	8007ef6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e84:	d118      	bne.n	8007eb8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10a      	bne.n	8007ea2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e98:	461a      	mov	r2, r3
 8007e9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	e013      	b.n	8007eca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	e008      	b.n	8007eca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	2300      	movs	r3, #0
 8007eda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee8:	461a      	mov	r2, r3
 8007eea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007eee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	613b      	str	r3, [r7, #16]
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d3b7      	bcc.n	8007e6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007efe:	2300      	movs	r3, #0
 8007f00:	613b      	str	r3, [r7, #16]
 8007f02:	e043      	b.n	8007f8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f1a:	d118      	bne.n	8007f4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10a      	bne.n	8007f38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	e013      	b.n	8007f60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f44:	461a      	mov	r2, r3
 8007f46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f4a:	6013      	str	r3, [r2, #0]
 8007f4c:	e008      	b.n	8007f60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	2300      	movs	r3, #0
 8007f70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	613b      	str	r3, [r7, #16]
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d3b7      	bcc.n	8007f04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fa6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007fb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d105      	bne.n	8007fc8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	f043 0210 	orr.w	r2, r3, #16
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	699a      	ldr	r2, [r3, #24]
 8007fcc:	4b0f      	ldr	r3, [pc, #60]	; (800800c <USB_DevInit+0x2c4>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d005      	beq.n	8007fe6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	f043 0208 	orr.w	r2, r3, #8
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d107      	bne.n	8007ffc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ff4:	f043 0304 	orr.w	r3, r3, #4
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008008:	b004      	add	sp, #16
 800800a:	4770      	bx	lr
 800800c:	803c3800 	.word	0x803c3800

08008010 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3301      	adds	r3, #1
 8008022:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4a13      	ldr	r2, [pc, #76]	; (8008074 <USB_FlushTxFifo+0x64>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d901      	bls.n	8008030 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e01b      	b.n	8008068 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	daf2      	bge.n	800801e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	019b      	lsls	r3, r3, #6
 8008040:	f043 0220 	orr.w	r2, r3, #32
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3301      	adds	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4a08      	ldr	r2, [pc, #32]	; (8008074 <USB_FlushTxFifo+0x64>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d901      	bls.n	800805a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e006      	b.n	8008068 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b20      	cmp	r3, #32
 8008064:	d0f0      	beq.n	8008048 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	00030d40 	.word	0x00030d40

08008078 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3301      	adds	r3, #1
 8008088:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	4a11      	ldr	r2, [pc, #68]	; (80080d4 <USB_FlushRxFifo+0x5c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d901      	bls.n	8008096 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e018      	b.n	80080c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	daf2      	bge.n	8008084 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2210      	movs	r2, #16
 80080a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3301      	adds	r3, #1
 80080ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4a08      	ldr	r2, [pc, #32]	; (80080d4 <USB_FlushRxFifo+0x5c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d901      	bls.n	80080ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e006      	b.n	80080c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	f003 0310 	and.w	r3, r3, #16
 80080c2:	2b10      	cmp	r3, #16
 80080c4:	d0f0      	beq.n	80080a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	00030d40 	.word	0x00030d40

080080d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	78fb      	ldrb	r3, [r7, #3]
 80080f2:	68f9      	ldr	r1, [r7, #12]
 80080f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080f8:	4313      	orrs	r3, r2
 80080fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800810a:	b480      	push	{r7}
 800810c:	b087      	sub	sp, #28
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f003 0306 	and.w	r3, r3, #6
 8008122:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d102      	bne.n	8008130 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800812a:	2300      	movs	r3, #0
 800812c:	75fb      	strb	r3, [r7, #23]
 800812e:	e00a      	b.n	8008146 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b02      	cmp	r3, #2
 8008134:	d002      	beq.n	800813c <USB_GetDevSpeed+0x32>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2b06      	cmp	r3, #6
 800813a:	d102      	bne.n	8008142 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800813c:	2302      	movs	r3, #2
 800813e:	75fb      	strb	r3, [r7, #23]
 8008140:	e001      	b.n	8008146 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008142:	230f      	movs	r3, #15
 8008144:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008146:	7dfb      	ldrb	r3, [r7, #23]
}
 8008148:	4618      	mov	r0, r3
 800814a:	371c      	adds	r7, #28
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	785b      	ldrb	r3, [r3, #1]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d13a      	bne.n	80081e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008176:	69da      	ldr	r2, [r3, #28]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	f003 030f 	and.w	r3, r3, #15
 8008180:	2101      	movs	r1, #1
 8008182:	fa01 f303 	lsl.w	r3, r1, r3
 8008186:	b29b      	uxth	r3, r3
 8008188:	68f9      	ldr	r1, [r7, #12]
 800818a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800818e:	4313      	orrs	r3, r2
 8008190:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4413      	add	r3, r2
 800819a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d155      	bne.n	8008254 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	791b      	ldrb	r3, [r3, #4]
 80081c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	059b      	lsls	r3, r3, #22
 80081ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081cc:	4313      	orrs	r3, r2
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	0151      	lsls	r1, r2, #5
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	440a      	add	r2, r1
 80081d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	e036      	b.n	8008254 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ec:	69da      	ldr	r2, [r3, #28]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	2101      	movs	r1, #1
 80081f8:	fa01 f303 	lsl.w	r3, r1, r3
 80081fc:	041b      	lsls	r3, r3, #16
 80081fe:	68f9      	ldr	r1, [r7, #12]
 8008200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008204:	4313      	orrs	r3, r2
 8008206:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d11a      	bne.n	8008254 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	791b      	ldrb	r3, [r3, #4]
 8008238:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800823a:	430b      	orrs	r3, r1
 800823c:	4313      	orrs	r3, r2
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	0151      	lsls	r1, r2, #5
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	440a      	add	r2, r1
 8008246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800824a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800824e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008252:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
	...

08008264 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	785b      	ldrb	r3, [r3, #1]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d161      	bne.n	8008344 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	4413      	add	r3, r2
 8008288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008296:	d11f      	bne.n	80082d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	0151      	lsls	r1, r2, #5
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	440a      	add	r2, r1
 80082ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	0151      	lsls	r1, r2, #5
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	440a      	add	r2, r1
 80082ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	f003 030f 	and.w	r3, r3, #15
 80082e8:	2101      	movs	r1, #1
 80082ea:	fa01 f303 	lsl.w	r3, r1, r3
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	43db      	mvns	r3, r3
 80082f2:	68f9      	ldr	r1, [r7, #12]
 80082f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082f8:	4013      	ands	r3, r2
 80082fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008302:	69da      	ldr	r2, [r3, #28]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	f003 030f 	and.w	r3, r3, #15
 800830c:	2101      	movs	r1, #1
 800830e:	fa01 f303 	lsl.w	r3, r1, r3
 8008312:	b29b      	uxth	r3, r3
 8008314:	43db      	mvns	r3, r3
 8008316:	68f9      	ldr	r1, [r7, #12]
 8008318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800831c:	4013      	ands	r3, r2
 800831e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	0159      	lsls	r1, r3, #5
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	440b      	add	r3, r1
 8008336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833a:	4619      	mov	r1, r3
 800833c:	4b35      	ldr	r3, [pc, #212]	; (8008414 <USB_DeactivateEndpoint+0x1b0>)
 800833e:	4013      	ands	r3, r2
 8008340:	600b      	str	r3, [r1, #0]
 8008342:	e060      	b.n	8008406 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	015a      	lsls	r2, r3, #5
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	4413      	add	r3, r2
 800834c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800835a:	d11f      	bne.n	800839c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	0151      	lsls	r1, r2, #5
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	440a      	add	r2, r1
 8008372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008376:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800837a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	0151      	lsls	r1, r2, #5
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	440a      	add	r2, r1
 8008392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008396:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800839a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	f003 030f 	and.w	r3, r3, #15
 80083ac:	2101      	movs	r1, #1
 80083ae:	fa01 f303 	lsl.w	r3, r1, r3
 80083b2:	041b      	lsls	r3, r3, #16
 80083b4:	43db      	mvns	r3, r3
 80083b6:	68f9      	ldr	r1, [r7, #12]
 80083b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083bc:	4013      	ands	r3, r2
 80083be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c6:	69da      	ldr	r2, [r3, #28]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	f003 030f 	and.w	r3, r3, #15
 80083d0:	2101      	movs	r1, #1
 80083d2:	fa01 f303 	lsl.w	r3, r1, r3
 80083d6:	041b      	lsls	r3, r3, #16
 80083d8:	43db      	mvns	r3, r3
 80083da:	68f9      	ldr	r1, [r7, #12]
 80083dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083e0:	4013      	ands	r3, r2
 80083e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	0159      	lsls	r1, r3, #5
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	440b      	add	r3, r1
 80083fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083fe:	4619      	mov	r1, r3
 8008400:	4b05      	ldr	r3, [pc, #20]	; (8008418 <USB_DeactivateEndpoint+0x1b4>)
 8008402:	4013      	ands	r3, r2
 8008404:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	ec337800 	.word	0xec337800
 8008418:	eff37800 	.word	0xeff37800

0800841c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08a      	sub	sp, #40	; 0x28
 8008420:	af02      	add	r7, sp, #8
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	785b      	ldrb	r3, [r3, #1]
 8008438:	2b01      	cmp	r3, #1
 800843a:	f040 815c 	bne.w	80086f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d132      	bne.n	80084ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	0151      	lsls	r1, r2, #5
 8008458:	69fa      	ldr	r2, [r7, #28]
 800845a:	440a      	add	r2, r1
 800845c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008460:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008464:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008468:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	69ba      	ldr	r2, [r7, #24]
 800847a:	0151      	lsls	r1, r2, #5
 800847c:	69fa      	ldr	r2, [r7, #28]
 800847e:	440a      	add	r2, r1
 8008480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008488:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	0151      	lsls	r1, r2, #5
 800849c:	69fa      	ldr	r2, [r7, #28]
 800849e:	440a      	add	r2, r1
 80084a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a4:	0cdb      	lsrs	r3, r3, #19
 80084a6:	04db      	lsls	r3, r3, #19
 80084a8:	6113      	str	r3, [r2, #16]
 80084aa:	e074      	b.n	8008596 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	0151      	lsls	r1, r2, #5
 80084be:	69fa      	ldr	r2, [r7, #28]
 80084c0:	440a      	add	r2, r1
 80084c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084c6:	0cdb      	lsrs	r3, r3, #19
 80084c8:	04db      	lsls	r3, r3, #19
 80084ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	0151      	lsls	r1, r2, #5
 80084de:	69fa      	ldr	r2, [r7, #28]
 80084e0:	440a      	add	r2, r1
 80084e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	6999      	ldr	r1, [r3, #24]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	440b      	add	r3, r1
 8008508:	1e59      	subs	r1, r3, #1
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008512:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008514:	4b9d      	ldr	r3, [pc, #628]	; (800878c <USB_EPStartXfer+0x370>)
 8008516:	400b      	ands	r3, r1
 8008518:	69b9      	ldr	r1, [r7, #24]
 800851a:	0148      	lsls	r0, r1, #5
 800851c:	69f9      	ldr	r1, [r7, #28]
 800851e:	4401      	add	r1, r0
 8008520:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008524:	4313      	orrs	r3, r2
 8008526:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008534:	691a      	ldr	r2, [r3, #16]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800853e:	69b9      	ldr	r1, [r7, #24]
 8008540:	0148      	lsls	r0, r1, #5
 8008542:	69f9      	ldr	r1, [r7, #28]
 8008544:	4401      	add	r1, r0
 8008546:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800854a:	4313      	orrs	r3, r2
 800854c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	791b      	ldrb	r3, [r3, #4]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d11f      	bne.n	8008596 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	0151      	lsls	r1, r2, #5
 8008568:	69fa      	ldr	r2, [r7, #28]
 800856a:	440a      	add	r2, r1
 800856c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008570:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008574:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	69fa      	ldr	r2, [r7, #28]
 800858a:	440a      	add	r2, r1
 800858c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008590:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008594:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d14b      	bne.n	8008634 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d009      	beq.n	80085b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b0:	461a      	mov	r2, r3
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	791b      	ldrb	r3, [r3, #4]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d128      	bne.n	8008612 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d110      	bne.n	80085f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	0151      	lsls	r1, r2, #5
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	440a      	add	r2, r1
 80085e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	e00f      	b.n	8008612 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	015a      	lsls	r2, r3, #5
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	4413      	add	r3, r2
 80085fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	69ba      	ldr	r2, [r7, #24]
 8008602:	0151      	lsls	r1, r2, #5
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	440a      	add	r2, r1
 8008608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800860c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008610:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	0151      	lsls	r1, r2, #5
 8008624:	69fa      	ldr	r2, [r7, #28]
 8008626:	440a      	add	r2, r1
 8008628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800862c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	e133      	b.n	800889c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	0151      	lsls	r1, r2, #5
 8008646:	69fa      	ldr	r2, [r7, #28]
 8008648:	440a      	add	r2, r1
 800864a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800864e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008652:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	791b      	ldrb	r3, [r3, #4]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d015      	beq.n	8008688 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 811b 	beq.w	800889c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	2101      	movs	r1, #1
 8008678:	fa01 f303 	lsl.w	r3, r1, r3
 800867c:	69f9      	ldr	r1, [r7, #28]
 800867e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008682:	4313      	orrs	r3, r2
 8008684:	634b      	str	r3, [r1, #52]	; 0x34
 8008686:	e109      	b.n	800889c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008694:	2b00      	cmp	r3, #0
 8008696:	d110      	bne.n	80086ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	0151      	lsls	r1, r2, #5
 80086aa:	69fa      	ldr	r2, [r7, #28]
 80086ac:	440a      	add	r2, r1
 80086ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	e00f      	b.n	80086da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	0151      	lsls	r1, r2, #5
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	440a      	add	r2, r1
 80086d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	6919      	ldr	r1, [r3, #16]
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	781a      	ldrb	r2, [r3, #0]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	b298      	uxth	r0, r3
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	4603      	mov	r3, r0
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 fade 	bl	8008cb0 <USB_WritePacket>
 80086f4:	e0d2      	b.n	800889c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	015a      	lsls	r2, r3, #5
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	4413      	add	r3, r2
 80086fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	69ba      	ldr	r2, [r7, #24]
 8008706:	0151      	lsls	r1, r2, #5
 8008708:	69fa      	ldr	r2, [r7, #28]
 800870a:	440a      	add	r2, r1
 800870c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008710:	0cdb      	lsrs	r3, r3, #19
 8008712:	04db      	lsls	r3, r3, #19
 8008714:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	0151      	lsls	r1, r2, #5
 8008728:	69fa      	ldr	r2, [r7, #28]
 800872a:	440a      	add	r2, r1
 800872c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008730:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008734:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008738:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d126      	bne.n	8008790 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	4413      	add	r3, r2
 800874a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800874e:	691a      	ldr	r2, [r3, #16]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008758:	69b9      	ldr	r1, [r7, #24]
 800875a:	0148      	lsls	r0, r1, #5
 800875c:	69f9      	ldr	r1, [r7, #28]
 800875e:	4401      	add	r1, r0
 8008760:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008764:	4313      	orrs	r3, r2
 8008766:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	0151      	lsls	r1, r2, #5
 800877a:	69fa      	ldr	r2, [r7, #28]
 800877c:	440a      	add	r2, r1
 800877e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008782:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008786:	6113      	str	r3, [r2, #16]
 8008788:	e03a      	b.n	8008800 <USB_EPStartXfer+0x3e4>
 800878a:	bf00      	nop
 800878c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	699a      	ldr	r2, [r3, #24]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	4413      	add	r3, r2
 800879a:	1e5a      	subs	r2, r3, #1
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	8afa      	ldrh	r2, [r7, #22]
 80087ac:	fb03 f202 	mul.w	r2, r3, r2
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c0:	691a      	ldr	r2, [r3, #16]
 80087c2:	8afb      	ldrh	r3, [r7, #22]
 80087c4:	04d9      	lsls	r1, r3, #19
 80087c6:	4b38      	ldr	r3, [pc, #224]	; (80088a8 <USB_EPStartXfer+0x48c>)
 80087c8:	400b      	ands	r3, r1
 80087ca:	69b9      	ldr	r1, [r7, #24]
 80087cc:	0148      	lsls	r0, r1, #5
 80087ce:	69f9      	ldr	r1, [r7, #28]
 80087d0:	4401      	add	r1, r0
 80087d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087d6:	4313      	orrs	r3, r2
 80087d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e6:	691a      	ldr	r2, [r3, #16]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087f0:	69b9      	ldr	r1, [r7, #24]
 80087f2:	0148      	lsls	r0, r1, #5
 80087f4:	69f9      	ldr	r1, [r7, #28]
 80087f6:	4401      	add	r1, r0
 80087f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087fc:	4313      	orrs	r3, r2
 80087fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d10d      	bne.n	8008822 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d009      	beq.n	8008822 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	6919      	ldr	r1, [r3, #16]
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	015a      	lsls	r2, r3, #5
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	4413      	add	r3, r2
 800881a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881e:	460a      	mov	r2, r1
 8008820:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	791b      	ldrb	r3, [r3, #4]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d128      	bne.n	800887c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008836:	2b00      	cmp	r3, #0
 8008838:	d110      	bne.n	800885c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	4413      	add	r3, r2
 8008842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	0151      	lsls	r1, r2, #5
 800884c:	69fa      	ldr	r2, [r7, #28]
 800884e:	440a      	add	r2, r1
 8008850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008854:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008858:	6013      	str	r3, [r2, #0]
 800885a:	e00f      	b.n	800887c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	0151      	lsls	r1, r2, #5
 800886e:	69fa      	ldr	r2, [r7, #28]
 8008870:	440a      	add	r2, r1
 8008872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800887a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	0151      	lsls	r1, r2, #5
 800888e:	69fa      	ldr	r2, [r7, #28]
 8008890:	440a      	add	r2, r1
 8008892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008896:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800889a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3720      	adds	r7, #32
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	1ff80000 	.word	0x1ff80000

080088ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	4613      	mov	r3, r2
 80088b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	785b      	ldrb	r3, [r3, #1]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	f040 80ce 	bne.w	8008a6a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d132      	bne.n	800893c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	0151      	lsls	r1, r2, #5
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	440a      	add	r2, r1
 8008910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008914:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008918:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	0151      	lsls	r1, r2, #5
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	440a      	add	r2, r1
 8008930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008934:	0cdb      	lsrs	r3, r3, #19
 8008936:	04db      	lsls	r3, r3, #19
 8008938:	6113      	str	r3, [r2, #16]
 800893a:	e04e      	b.n	80089da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	0151      	lsls	r1, r2, #5
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	440a      	add	r2, r1
 8008952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008956:	0cdb      	lsrs	r3, r3, #19
 8008958:	04db      	lsls	r3, r3, #19
 800895a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	0151      	lsls	r1, r2, #5
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	440a      	add	r2, r1
 8008972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008976:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800897a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800897e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	699a      	ldr	r2, [r3, #24]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	429a      	cmp	r2, r3
 800898a:	d903      	bls.n	8008994 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	0151      	lsls	r1, r2, #5
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	440a      	add	r2, r1
 80089aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089ca:	6939      	ldr	r1, [r7, #16]
 80089cc:	0148      	lsls	r0, r1, #5
 80089ce:	6979      	ldr	r1, [r7, #20]
 80089d0:	4401      	add	r1, r0
 80089d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80089d6:	4313      	orrs	r3, r2
 80089d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80089da:	79fb      	ldrb	r3, [r7, #7]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d11e      	bne.n	8008a1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d009      	beq.n	80089fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f4:	461a      	mov	r2, r3
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	0151      	lsls	r1, r2, #5
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	440a      	add	r2, r1
 8008a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	e097      	b.n	8008b4e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	0151      	lsls	r1, r2, #5
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	440a      	add	r2, r1
 8008a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 8083 	beq.w	8008b4e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	f003 030f 	and.w	r3, r3, #15
 8008a58:	2101      	movs	r1, #1
 8008a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a5e:	6979      	ldr	r1, [r7, #20]
 8008a60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a64:	4313      	orrs	r3, r2
 8008a66:	634b      	str	r3, [r1, #52]	; 0x34
 8008a68:	e071      	b.n	8008b4e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	0151      	lsls	r1, r2, #5
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	440a      	add	r2, r1
 8008a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a84:	0cdb      	lsrs	r3, r3, #19
 8008a86:	04db      	lsls	r3, r3, #19
 8008a88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	0151      	lsls	r1, r2, #5
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	440a      	add	r2, r1
 8008aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aa4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008aa8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008aac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	0151      	lsls	r1, r2, #5
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	440a      	add	r2, r1
 8008adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ae4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af2:	691a      	ldr	r2, [r3, #16]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008afc:	6939      	ldr	r1, [r7, #16]
 8008afe:	0148      	lsls	r0, r1, #5
 8008b00:	6979      	ldr	r1, [r7, #20]
 8008b02:	4401      	add	r1, r0
 8008b04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d10d      	bne.n	8008b2e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d009      	beq.n	8008b2e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	6919      	ldr	r1, [r3, #16]
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b2a:	460a      	mov	r2, r1
 8008b2c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	0151      	lsls	r1, r2, #5
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	440a      	add	r2, r1
 8008b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	785b      	ldrb	r3, [r3, #1]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d14a      	bne.n	8008c10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b92:	f040 8086 	bne.w	8008ca2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	7812      	ldrb	r2, [r2, #0]
 8008baa:	0151      	lsls	r1, r2, #5
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	440a      	add	r2, r1
 8008bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bb8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	015a      	lsls	r2, r3, #5
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	7812      	ldrb	r2, [r2, #0]
 8008bce:	0151      	lsls	r1, r2, #5
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	440a      	add	r2, r1
 8008bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bdc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3301      	adds	r3, #1
 8008be2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f242 7210 	movw	r2, #10000	; 0x2710
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d902      	bls.n	8008bf4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	75fb      	strb	r3, [r7, #23]
          break;
 8008bf2:	e056      	b.n	8008ca2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c0c:	d0e7      	beq.n	8008bde <USB_EPStopXfer+0x82>
 8008c0e:	e048      	b.n	8008ca2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c28:	d13b      	bne.n	8008ca2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	7812      	ldrb	r2, [r2, #0]
 8008c3e:	0151      	lsls	r1, r2, #5
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	440a      	add	r2, r1
 8008c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	7812      	ldrb	r2, [r2, #0]
 8008c62:	0151      	lsls	r1, r2, #5
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	440a      	add	r2, r1
 8008c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	3301      	adds	r3, #1
 8008c76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d902      	bls.n	8008c88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	75fb      	strb	r3, [r7, #23]
          break;
 8008c86:	e00c      	b.n	8008ca2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ca0:	d0e7      	beq.n	8008c72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	371c      	adds	r7, #28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b089      	sub	sp, #36	; 0x24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	4611      	mov	r1, r2
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	71fb      	strb	r3, [r7, #7]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008cce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d123      	bne.n	8008d1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008cd6:	88bb      	ldrh	r3, [r7, #4]
 8008cd8:	3303      	adds	r3, #3
 8008cda:	089b      	lsrs	r3, r3, #2
 8008cdc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008cde:	2300      	movs	r3, #0
 8008ce0:	61bb      	str	r3, [r7, #24]
 8008ce2:	e018      	b.n	8008d16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	031a      	lsls	r2, r3, #12
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	3301      	adds	r3, #1
 8008d02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	3301      	adds	r3, #1
 8008d08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	3301      	adds	r3, #1
 8008d14:	61bb      	str	r3, [r7, #24]
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d3e2      	bcc.n	8008ce4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3724      	adds	r7, #36	; 0x24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b08b      	sub	sp, #44	; 0x2c
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	4613      	mov	r3, r2
 8008d38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	089b      	lsrs	r3, r3, #2
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d4a:	88fb      	ldrh	r3, [r7, #6]
 8008d4c:	f003 0303 	and.w	r3, r3, #3
 8008d50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d52:	2300      	movs	r3, #0
 8008d54:	623b      	str	r3, [r7, #32]
 8008d56:	e014      	b.n	8008d82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	3301      	adds	r3, #1
 8008d68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	3301      	adds	r3, #1
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	3301      	adds	r3, #1
 8008d7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	623b      	str	r3, [r7, #32]
 8008d82:	6a3a      	ldr	r2, [r7, #32]
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d3e6      	bcc.n	8008d58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d8a:	8bfb      	ldrh	r3, [r7, #30]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d01e      	beq.n	8008dce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d90:	2300      	movs	r3, #0
 8008d92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f107 0310 	add.w	r3, r7, #16
 8008da0:	6812      	ldr	r2, [r2, #0]
 8008da2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	fa22 f303 	lsr.w	r3, r2, r3
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	701a      	strb	r2, [r3, #0]
      i++;
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	3301      	adds	r3, #1
 8008dba:	623b      	str	r3, [r7, #32]
      pDest++;
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008dc2:	8bfb      	ldrh	r3, [r7, #30]
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008dc8:	8bfb      	ldrh	r3, [r7, #30]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1ea      	bne.n	8008da4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	372c      	adds	r7, #44	; 0x2c
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	785b      	ldrb	r3, [r3, #1]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d12c      	bne.n	8008e52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	db12      	blt.n	8008e30 <USB_EPSetStall+0x54>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00f      	beq.n	8008e30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	015a      	lsls	r2, r3, #5
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	0151      	lsls	r1, r2, #5
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	440a      	add	r2, r1
 8008e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	015a      	lsls	r2, r3, #5
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	0151      	lsls	r1, r2, #5
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	440a      	add	r2, r1
 8008e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e4e:	6013      	str	r3, [r2, #0]
 8008e50:	e02b      	b.n	8008eaa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	db12      	blt.n	8008e8a <USB_EPSetStall+0xae>
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00f      	beq.n	8008e8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	0151      	lsls	r1, r2, #5
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	440a      	add	r2, r1
 8008e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	0151      	lsls	r1, r2, #5
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	440a      	add	r2, r1
 8008ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ea8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	785b      	ldrb	r3, [r3, #1]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d128      	bne.n	8008f26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	0151      	lsls	r1, r2, #5
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	440a      	add	r2, r1
 8008eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ef2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	791b      	ldrb	r3, [r3, #4]
 8008ef8:	2b03      	cmp	r3, #3
 8008efa:	d003      	beq.n	8008f04 <USB_EPClearStall+0x4c>
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	791b      	ldrb	r3, [r3, #4]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d138      	bne.n	8008f76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	0151      	lsls	r1, r2, #5
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	440a      	add	r2, r1
 8008f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	e027      	b.n	8008f76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	0151      	lsls	r1, r2, #5
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	440a      	add	r2, r1
 8008f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	791b      	ldrb	r3, [r3, #4]
 8008f4a:	2b03      	cmp	r3, #3
 8008f4c:	d003      	beq.n	8008f56 <USB_EPClearStall+0x9e>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	791b      	ldrb	r3, [r3, #4]
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d10f      	bne.n	8008f76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	0151      	lsls	r1, r2, #5
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	440a      	add	r2, r1
 8008f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fa2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008fa6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	011b      	lsls	r3, r3, #4
 8008fb4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008fb8:	68f9      	ldr	r1, [r7, #12]
 8008fba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fea:	f023 0303 	bic.w	r3, r3, #3
 8008fee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ffe:	f023 0302 	bic.w	r3, r3, #2
 8009002:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800902c:	f023 0303 	bic.w	r3, r3, #3
 8009030:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009040:	f043 0302 	orr.w	r3, r3, #2
 8009044:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4013      	ands	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800906c:	68fb      	ldr	r3, [r7, #12]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800907a:	b480      	push	{r7}
 800907c:	b085      	sub	sp, #20
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	4013      	ands	r3, r2
 800909c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	0c1b      	lsrs	r3, r3, #16
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b085      	sub	sp, #20
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	4013      	ands	r3, r2
 80090d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	b29b      	uxth	r3, r3
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b085      	sub	sp, #20
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80090f2:	78fb      	ldrb	r3, [r7, #3]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	4013      	ands	r3, r2
 800910e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009110:	68bb      	ldr	r3, [r7, #8]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800911e:	b480      	push	{r7}
 8009120:	b087      	sub	sp, #28
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	460b      	mov	r3, r1
 8009128:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009140:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009142:	78fb      	ldrb	r3, [r7, #3]
 8009144:	f003 030f 	and.w	r3, r3, #15
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	fa22 f303 	lsr.w	r3, r2, r3
 800914e:	01db      	lsls	r3, r3, #7
 8009150:	b2db      	uxtb	r3, r3
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	4313      	orrs	r3, r2
 8009156:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	4013      	ands	r3, r2
 800916a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800916c:	68bb      	ldr	r3, [r7, #8]
}
 800916e:	4618      	mov	r0, r3
 8009170:	371c      	adds	r7, #28
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	f003 0301 	and.w	r3, r3, #1
}
 800918a:	4618      	mov	r0, r3
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009196:	b480      	push	{r7}
 8009198:	b085      	sub	sp, #20
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80091b4:	f023 0307 	bic.w	r3, r3, #7
 80091b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80091dc:	b480      	push	{r7}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	460b      	mov	r3, r1
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	333c      	adds	r3, #60	; 0x3c
 80091f2:	3304      	adds	r3, #4
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	4a26      	ldr	r2, [pc, #152]	; (8009294 <USB_EP0_OutStart+0xb8>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d90a      	bls.n	8009216 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800920c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009210:	d101      	bne.n	8009216 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	e037      	b.n	8009286 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921c:	461a      	mov	r2, r3
 800921e:	2300      	movs	r3, #0
 8009220:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009230:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009234:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009244:	f043 0318 	orr.w	r3, r3, #24
 8009248:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009258:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800925c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800925e:	7afb      	ldrb	r3, [r7, #11]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d10f      	bne.n	8009284 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926a:	461a      	mov	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800927e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009282:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	4f54300a 	.word	0x4f54300a

08009298 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092a0:	2300      	movs	r3, #0
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	4a13      	ldr	r2, [pc, #76]	; (80092fc <USB_CoreReset+0x64>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d901      	bls.n	80092b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e01b      	b.n	80092ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	daf2      	bge.n	80092a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092be:	2300      	movs	r3, #0
 80092c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	f043 0201 	orr.w	r2, r3, #1
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3301      	adds	r3, #1
 80092d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4a09      	ldr	r2, [pc, #36]	; (80092fc <USB_CoreReset+0x64>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d901      	bls.n	80092e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e006      	b.n	80092ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d0f0      	beq.n	80092ce <USB_CoreReset+0x36>

  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	00030d40 	.word	0x00030d40

08009300 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800930c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009310:	f002 fc96 	bl	800bc40 <USBD_static_malloc>
 8009314:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d109      	bne.n	8009330 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	32b0      	adds	r2, #176	; 0xb0
 8009326:	2100      	movs	r1, #0
 8009328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800932c:	2302      	movs	r3, #2
 800932e:	e0d4      	b.n	80094da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009330:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009334:	2100      	movs	r1, #0
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f002 fcf0 	bl	800bd1c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	32b0      	adds	r2, #176	; 0xb0
 8009346:	68f9      	ldr	r1, [r7, #12]
 8009348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	32b0      	adds	r2, #176	; 0xb0
 8009356:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	7c1b      	ldrb	r3, [r3, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d138      	bne.n	80093da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009368:	4b5e      	ldr	r3, [pc, #376]	; (80094e4 <USBD_CDC_Init+0x1e4>)
 800936a:	7819      	ldrb	r1, [r3, #0]
 800936c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009370:	2202      	movs	r2, #2
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f002 fb41 	bl	800b9fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009378:	4b5a      	ldr	r3, [pc, #360]	; (80094e4 <USBD_CDC_Init+0x1e4>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f003 020f 	and.w	r2, r3, #15
 8009380:	6879      	ldr	r1, [r7, #4]
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	440b      	add	r3, r1
 800938c:	3324      	adds	r3, #36	; 0x24
 800938e:	2201      	movs	r2, #1
 8009390:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009392:	4b55      	ldr	r3, [pc, #340]	; (80094e8 <USBD_CDC_Init+0x1e8>)
 8009394:	7819      	ldrb	r1, [r3, #0]
 8009396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800939a:	2202      	movs	r2, #2
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f002 fb2c 	bl	800b9fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80093a2:	4b51      	ldr	r3, [pc, #324]	; (80094e8 <USBD_CDC_Init+0x1e8>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	f003 020f 	and.w	r2, r3, #15
 80093aa:	6879      	ldr	r1, [r7, #4]
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	440b      	add	r3, r1
 80093b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093ba:	2201      	movs	r2, #1
 80093bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80093be:	4b4b      	ldr	r3, [pc, #300]	; (80094ec <USBD_CDC_Init+0x1ec>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	f003 020f 	and.w	r2, r3, #15
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	4613      	mov	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4413      	add	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	440b      	add	r3, r1
 80093d2:	3326      	adds	r3, #38	; 0x26
 80093d4:	2210      	movs	r2, #16
 80093d6:	801a      	strh	r2, [r3, #0]
 80093d8:	e035      	b.n	8009446 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80093da:	4b42      	ldr	r3, [pc, #264]	; (80094e4 <USBD_CDC_Init+0x1e4>)
 80093dc:	7819      	ldrb	r1, [r3, #0]
 80093de:	2340      	movs	r3, #64	; 0x40
 80093e0:	2202      	movs	r2, #2
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f002 fb09 	bl	800b9fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80093e8:	4b3e      	ldr	r3, [pc, #248]	; (80094e4 <USBD_CDC_Init+0x1e4>)
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	f003 020f 	and.w	r2, r3, #15
 80093f0:	6879      	ldr	r1, [r7, #4]
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	440b      	add	r3, r1
 80093fc:	3324      	adds	r3, #36	; 0x24
 80093fe:	2201      	movs	r2, #1
 8009400:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009402:	4b39      	ldr	r3, [pc, #228]	; (80094e8 <USBD_CDC_Init+0x1e8>)
 8009404:	7819      	ldrb	r1, [r3, #0]
 8009406:	2340      	movs	r3, #64	; 0x40
 8009408:	2202      	movs	r2, #2
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f002 faf5 	bl	800b9fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009410:	4b35      	ldr	r3, [pc, #212]	; (80094e8 <USBD_CDC_Init+0x1e8>)
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	f003 020f 	and.w	r2, r3, #15
 8009418:	6879      	ldr	r1, [r7, #4]
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	440b      	add	r3, r1
 8009424:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009428:	2201      	movs	r2, #1
 800942a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800942c:	4b2f      	ldr	r3, [pc, #188]	; (80094ec <USBD_CDC_Init+0x1ec>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	f003 020f 	and.w	r2, r3, #15
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	440b      	add	r3, r1
 8009440:	3326      	adds	r3, #38	; 0x26
 8009442:	2210      	movs	r2, #16
 8009444:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009446:	4b29      	ldr	r3, [pc, #164]	; (80094ec <USBD_CDC_Init+0x1ec>)
 8009448:	7819      	ldrb	r1, [r3, #0]
 800944a:	2308      	movs	r3, #8
 800944c:	2203      	movs	r2, #3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f002 fad3 	bl	800b9fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009454:	4b25      	ldr	r3, [pc, #148]	; (80094ec <USBD_CDC_Init+0x1ec>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	f003 020f 	and.w	r2, r3, #15
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	4613      	mov	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	440b      	add	r3, r1
 8009468:	3324      	adds	r3, #36	; 0x24
 800946a:	2201      	movs	r2, #1
 800946c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	33b0      	adds	r3, #176	; 0xb0
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80094a4:	2302      	movs	r3, #2
 80094a6:	e018      	b.n	80094da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	7c1b      	ldrb	r3, [r3, #16]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d10a      	bne.n	80094c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094b0:	4b0d      	ldr	r3, [pc, #52]	; (80094e8 <USBD_CDC_Init+0x1e8>)
 80094b2:	7819      	ldrb	r1, [r3, #0]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f002 fb8a 	bl	800bbd8 <USBD_LL_PrepareReceive>
 80094c4:	e008      	b.n	80094d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094c6:	4b08      	ldr	r3, [pc, #32]	; (80094e8 <USBD_CDC_Init+0x1e8>)
 80094c8:	7819      	ldrb	r1, [r3, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094d0:	2340      	movs	r3, #64	; 0x40
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f002 fb80 	bl	800bbd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	2000010f 	.word	0x2000010f
 80094e8:	20000110 	.word	0x20000110
 80094ec:	20000111 	.word	0x20000111

080094f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80094fc:	4b3a      	ldr	r3, [pc, #232]	; (80095e8 <USBD_CDC_DeInit+0xf8>)
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f002 fa9f 	bl	800ba46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009508:	4b37      	ldr	r3, [pc, #220]	; (80095e8 <USBD_CDC_DeInit+0xf8>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	f003 020f 	and.w	r2, r3, #15
 8009510:	6879      	ldr	r1, [r7, #4]
 8009512:	4613      	mov	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	440b      	add	r3, r1
 800951c:	3324      	adds	r3, #36	; 0x24
 800951e:	2200      	movs	r2, #0
 8009520:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009522:	4b32      	ldr	r3, [pc, #200]	; (80095ec <USBD_CDC_DeInit+0xfc>)
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f002 fa8c 	bl	800ba46 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800952e:	4b2f      	ldr	r3, [pc, #188]	; (80095ec <USBD_CDC_DeInit+0xfc>)
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	f003 020f 	and.w	r2, r3, #15
 8009536:	6879      	ldr	r1, [r7, #4]
 8009538:	4613      	mov	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4413      	add	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	440b      	add	r3, r1
 8009542:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009546:	2200      	movs	r2, #0
 8009548:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800954a:	4b29      	ldr	r3, [pc, #164]	; (80095f0 <USBD_CDC_DeInit+0x100>)
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f002 fa78 	bl	800ba46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009556:	4b26      	ldr	r3, [pc, #152]	; (80095f0 <USBD_CDC_DeInit+0x100>)
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	f003 020f 	and.w	r2, r3, #15
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	440b      	add	r3, r1
 800956a:	3324      	adds	r3, #36	; 0x24
 800956c:	2200      	movs	r2, #0
 800956e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009570:	4b1f      	ldr	r3, [pc, #124]	; (80095f0 <USBD_CDC_DeInit+0x100>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	f003 020f 	and.w	r2, r3, #15
 8009578:	6879      	ldr	r1, [r7, #4]
 800957a:	4613      	mov	r3, r2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	440b      	add	r3, r1
 8009584:	3326      	adds	r3, #38	; 0x26
 8009586:	2200      	movs	r2, #0
 8009588:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	32b0      	adds	r2, #176	; 0xb0
 8009594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d01f      	beq.n	80095dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	33b0      	adds	r3, #176	; 0xb0
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	32b0      	adds	r2, #176	; 0xb0
 80095ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095be:	4618      	mov	r0, r3
 80095c0:	f002 fb4c 	bl	800bc5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	32b0      	adds	r2, #176	; 0xb0
 80095ce:	2100      	movs	r1, #0
 80095d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	2000010f 	.word	0x2000010f
 80095ec:	20000110 	.word	0x20000110
 80095f0:	20000111 	.word	0x20000111

080095f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	32b0      	adds	r2, #176	; 0xb0
 8009608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800960c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009612:	2300      	movs	r3, #0
 8009614:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009616:	2300      	movs	r3, #0
 8009618:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009620:	2303      	movs	r3, #3
 8009622:	e0bf      	b.n	80097a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800962c:	2b00      	cmp	r3, #0
 800962e:	d050      	beq.n	80096d2 <USBD_CDC_Setup+0xde>
 8009630:	2b20      	cmp	r3, #32
 8009632:	f040 80af 	bne.w	8009794 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	88db      	ldrh	r3, [r3, #6]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d03a      	beq.n	80096b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	b25b      	sxtb	r3, r3
 8009644:	2b00      	cmp	r3, #0
 8009646:	da1b      	bge.n	8009680 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	33b0      	adds	r3, #176	; 0xb0
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800965e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	88d2      	ldrh	r2, [r2, #6]
 8009664:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	88db      	ldrh	r3, [r3, #6]
 800966a:	2b07      	cmp	r3, #7
 800966c:	bf28      	it	cs
 800966e:	2307      	movcs	r3, #7
 8009670:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	89fa      	ldrh	r2, [r7, #14]
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f001 fd89 	bl	800b190 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800967e:	e090      	b.n	80097a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	785a      	ldrb	r2, [r3, #1]
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	88db      	ldrh	r3, [r3, #6]
 800968e:	2b3f      	cmp	r3, #63	; 0x3f
 8009690:	d803      	bhi.n	800969a <USBD_CDC_Setup+0xa6>
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	88db      	ldrh	r3, [r3, #6]
 8009696:	b2da      	uxtb	r2, r3
 8009698:	e000      	b.n	800969c <USBD_CDC_Setup+0xa8>
 800969a:	2240      	movs	r2, #64	; 0x40
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80096a2:	6939      	ldr	r1, [r7, #16]
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80096aa:	461a      	mov	r2, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f001 fd9b 	bl	800b1e8 <USBD_CtlPrepareRx>
      break;
 80096b2:	e076      	b.n	80097a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	33b0      	adds	r3, #176	; 0xb0
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	7850      	ldrb	r0, [r2, #1]
 80096ca:	2200      	movs	r2, #0
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	4798      	blx	r3
      break;
 80096d0:	e067      	b.n	80097a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	785b      	ldrb	r3, [r3, #1]
 80096d6:	2b0b      	cmp	r3, #11
 80096d8:	d851      	bhi.n	800977e <USBD_CDC_Setup+0x18a>
 80096da:	a201      	add	r2, pc, #4	; (adr r2, 80096e0 <USBD_CDC_Setup+0xec>)
 80096dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e0:	08009711 	.word	0x08009711
 80096e4:	0800978d 	.word	0x0800978d
 80096e8:	0800977f 	.word	0x0800977f
 80096ec:	0800977f 	.word	0x0800977f
 80096f0:	0800977f 	.word	0x0800977f
 80096f4:	0800977f 	.word	0x0800977f
 80096f8:	0800977f 	.word	0x0800977f
 80096fc:	0800977f 	.word	0x0800977f
 8009700:	0800977f 	.word	0x0800977f
 8009704:	0800977f 	.word	0x0800977f
 8009708:	0800973b 	.word	0x0800973b
 800970c:	08009765 	.word	0x08009765
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b03      	cmp	r3, #3
 800971a:	d107      	bne.n	800972c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800971c:	f107 030a 	add.w	r3, r7, #10
 8009720:	2202      	movs	r2, #2
 8009722:	4619      	mov	r1, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f001 fd33 	bl	800b190 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800972a:	e032      	b.n	8009792 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f001 fcbd 	bl	800b0ae <USBD_CtlError>
            ret = USBD_FAIL;
 8009734:	2303      	movs	r3, #3
 8009736:	75fb      	strb	r3, [r7, #23]
          break;
 8009738:	e02b      	b.n	8009792 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b03      	cmp	r3, #3
 8009744:	d107      	bne.n	8009756 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009746:	f107 030d 	add.w	r3, r7, #13
 800974a:	2201      	movs	r2, #1
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f001 fd1e 	bl	800b190 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009754:	e01d      	b.n	8009792 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f001 fca8 	bl	800b0ae <USBD_CtlError>
            ret = USBD_FAIL;
 800975e:	2303      	movs	r3, #3
 8009760:	75fb      	strb	r3, [r7, #23]
          break;
 8009762:	e016      	b.n	8009792 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b03      	cmp	r3, #3
 800976e:	d00f      	beq.n	8009790 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 fc9b 	bl	800b0ae <USBD_CtlError>
            ret = USBD_FAIL;
 8009778:	2303      	movs	r3, #3
 800977a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800977c:	e008      	b.n	8009790 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f001 fc94 	bl	800b0ae <USBD_CtlError>
          ret = USBD_FAIL;
 8009786:	2303      	movs	r3, #3
 8009788:	75fb      	strb	r3, [r7, #23]
          break;
 800978a:	e002      	b.n	8009792 <USBD_CDC_Setup+0x19e>
          break;
 800978c:	bf00      	nop
 800978e:	e008      	b.n	80097a2 <USBD_CDC_Setup+0x1ae>
          break;
 8009790:	bf00      	nop
      }
      break;
 8009792:	e006      	b.n	80097a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f001 fc89 	bl	800b0ae <USBD_CtlError>
      ret = USBD_FAIL;
 800979c:	2303      	movs	r3, #3
 800979e:	75fb      	strb	r3, [r7, #23]
      break;
 80097a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	32b0      	adds	r2, #176	; 0xb0
 80097ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e065      	b.n	80098a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	32b0      	adds	r2, #176	; 0xb0
 80097e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80097e6:	78fb      	ldrb	r3, [r7, #3]
 80097e8:	f003 020f 	and.w	r2, r3, #15
 80097ec:	6879      	ldr	r1, [r7, #4]
 80097ee:	4613      	mov	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	440b      	add	r3, r1
 80097f8:	3318      	adds	r3, #24
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d02f      	beq.n	8009860 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009800:	78fb      	ldrb	r3, [r7, #3]
 8009802:	f003 020f 	and.w	r2, r3, #15
 8009806:	6879      	ldr	r1, [r7, #4]
 8009808:	4613      	mov	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	440b      	add	r3, r1
 8009812:	3318      	adds	r3, #24
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	78fb      	ldrb	r3, [r7, #3]
 8009818:	f003 010f 	and.w	r1, r3, #15
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	460b      	mov	r3, r1
 8009820:	00db      	lsls	r3, r3, #3
 8009822:	440b      	add	r3, r1
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4403      	add	r3, r0
 8009828:	3348      	adds	r3, #72	; 0x48
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009830:	fb01 f303 	mul.w	r3, r1, r3
 8009834:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009836:	2b00      	cmp	r3, #0
 8009838:	d112      	bne.n	8009860 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800983a:	78fb      	ldrb	r3, [r7, #3]
 800983c:	f003 020f 	and.w	r2, r3, #15
 8009840:	6879      	ldr	r1, [r7, #4]
 8009842:	4613      	mov	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	440b      	add	r3, r1
 800984c:	3318      	adds	r3, #24
 800984e:	2200      	movs	r2, #0
 8009850:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009852:	78f9      	ldrb	r1, [r7, #3]
 8009854:	2300      	movs	r3, #0
 8009856:	2200      	movs	r2, #0
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f002 f99c 	bl	800bb96 <USBD_LL_Transmit>
 800985e:	e01f      	b.n	80098a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2200      	movs	r2, #0
 8009864:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	33b0      	adds	r3, #176	; 0xb0
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d010      	beq.n	80098a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	33b0      	adds	r3, #176	; 0xb0
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800989c:	78fa      	ldrb	r2, [r7, #3]
 800989e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	460b      	mov	r3, r1
 80098b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	32b0      	adds	r2, #176	; 0xb0
 80098c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	32b0      	adds	r2, #176	; 0xb0
 80098d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d101      	bne.n	80098dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80098d8:	2303      	movs	r3, #3
 80098da:	e01a      	b.n	8009912 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80098dc:	78fb      	ldrb	r3, [r7, #3]
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f002 f99a 	bl	800bc1a <USBD_LL_GetRxDataSize>
 80098e6:	4602      	mov	r2, r0
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	33b0      	adds	r3, #176	; 0xb0
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4413      	add	r3, r2
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800990c:	4611      	mov	r1, r2
 800990e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	32b0      	adds	r2, #176	; 0xb0
 800992c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009930:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d101      	bne.n	800993c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009938:	2303      	movs	r3, #3
 800993a:	e025      	b.n	8009988 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	33b0      	adds	r3, #176	; 0xb0
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d01a      	beq.n	8009986 <USBD_CDC_EP0_RxReady+0x6c>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009956:	2bff      	cmp	r3, #255	; 0xff
 8009958:	d015      	beq.n	8009986 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	33b0      	adds	r3, #176	; 0xb0
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009972:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800997a:	b292      	uxth	r2, r2
 800997c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	22ff      	movs	r2, #255	; 0xff
 8009982:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009998:	2182      	movs	r1, #130	; 0x82
 800999a:	4818      	ldr	r0, [pc, #96]	; (80099fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800999c:	f000 fd4f 	bl	800a43e <USBD_GetEpDesc>
 80099a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099a2:	2101      	movs	r1, #1
 80099a4:	4815      	ldr	r0, [pc, #84]	; (80099fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099a6:	f000 fd4a 	bl	800a43e <USBD_GetEpDesc>
 80099aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099ac:	2181      	movs	r1, #129	; 0x81
 80099ae:	4813      	ldr	r0, [pc, #76]	; (80099fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099b0:	f000 fd45 	bl	800a43e <USBD_GetEpDesc>
 80099b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d002      	beq.n	80099c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	2210      	movs	r2, #16
 80099c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d006      	beq.n	80099d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099d0:	711a      	strb	r2, [r3, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d006      	beq.n	80099ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099e4:	711a      	strb	r2, [r3, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2243      	movs	r2, #67	; 0x43
 80099ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80099f0:	4b02      	ldr	r3, [pc, #8]	; (80099fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3718      	adds	r7, #24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	200000cc 	.word	0x200000cc

08009a00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a08:	2182      	movs	r1, #130	; 0x82
 8009a0a:	4818      	ldr	r0, [pc, #96]	; (8009a6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a0c:	f000 fd17 	bl	800a43e <USBD_GetEpDesc>
 8009a10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a12:	2101      	movs	r1, #1
 8009a14:	4815      	ldr	r0, [pc, #84]	; (8009a6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a16:	f000 fd12 	bl	800a43e <USBD_GetEpDesc>
 8009a1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a1c:	2181      	movs	r1, #129	; 0x81
 8009a1e:	4813      	ldr	r0, [pc, #76]	; (8009a6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a20:	f000 fd0d 	bl	800a43e <USBD_GetEpDesc>
 8009a24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d002      	beq.n	8009a32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	2210      	movs	r2, #16
 8009a30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d006      	beq.n	8009a46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	711a      	strb	r2, [r3, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f042 0202 	orr.w	r2, r2, #2
 8009a44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d006      	beq.n	8009a5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	711a      	strb	r2, [r3, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f042 0202 	orr.w	r2, r2, #2
 8009a58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2243      	movs	r2, #67	; 0x43
 8009a5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a60:	4b02      	ldr	r3, [pc, #8]	; (8009a6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	200000cc 	.word	0x200000cc

08009a70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a78:	2182      	movs	r1, #130	; 0x82
 8009a7a:	4818      	ldr	r0, [pc, #96]	; (8009adc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a7c:	f000 fcdf 	bl	800a43e <USBD_GetEpDesc>
 8009a80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a82:	2101      	movs	r1, #1
 8009a84:	4815      	ldr	r0, [pc, #84]	; (8009adc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a86:	f000 fcda 	bl	800a43e <USBD_GetEpDesc>
 8009a8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a8c:	2181      	movs	r1, #129	; 0x81
 8009a8e:	4813      	ldr	r0, [pc, #76]	; (8009adc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a90:	f000 fcd5 	bl	800a43e <USBD_GetEpDesc>
 8009a94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d002      	beq.n	8009aa2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	2210      	movs	r2, #16
 8009aa0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d006      	beq.n	8009ab6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ab0:	711a      	strb	r2, [r3, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d006      	beq.n	8009aca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ac4:	711a      	strb	r2, [r3, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2243      	movs	r2, #67	; 0x43
 8009ace:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ad0:	4b02      	ldr	r3, [pc, #8]	; (8009adc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	200000cc 	.word	0x200000cc

08009ae0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	220a      	movs	r2, #10
 8009aec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009aee:	4b03      	ldr	r3, [pc, #12]	; (8009afc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	20000088 	.word	0x20000088

08009b00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e009      	b.n	8009b28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	33b0      	adds	r3, #176	; 0xb0
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4413      	add	r3, r2
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	32b0      	adds	r2, #176	; 0xb0
 8009b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b4e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d101      	bne.n	8009b5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e008      	b.n	8009b6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	371c      	adds	r7, #28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	32b0      	adds	r2, #176	; 0xb0
 8009b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d101      	bne.n	8009b9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e004      	b.n	8009ba6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
	...

08009bb4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	32b0      	adds	r2, #176	; 0xb0
 8009bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	32b0      	adds	r2, #176	; 0xb0
 8009bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e025      	b.n	8009c32 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d11f      	bne.n	8009c30 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009bf8:	4b10      	ldr	r3, [pc, #64]	; (8009c3c <USBD_CDC_TransmitPacket+0x88>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	f003 020f 	and.w	r2, r3, #15
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4403      	add	r3, r0
 8009c12:	3318      	adds	r3, #24
 8009c14:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009c16:	4b09      	ldr	r3, [pc, #36]	; (8009c3c <USBD_CDC_TransmitPacket+0x88>)
 8009c18:	7819      	ldrb	r1, [r3, #0]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f001 ffb5 	bl	800bb96 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	2000010f 	.word	0x2000010f

08009c40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	32b0      	adds	r2, #176	; 0xb0
 8009c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c56:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	32b0      	adds	r2, #176	; 0xb0
 8009c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e018      	b.n	8009ca0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	7c1b      	ldrb	r3, [r3, #16]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10a      	bne.n	8009c8c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c76:	4b0c      	ldr	r3, [pc, #48]	; (8009ca8 <USBD_CDC_ReceivePacket+0x68>)
 8009c78:	7819      	ldrb	r1, [r3, #0]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 ffa7 	bl	800bbd8 <USBD_LL_PrepareReceive>
 8009c8a:	e008      	b.n	8009c9e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c8c:	4b06      	ldr	r3, [pc, #24]	; (8009ca8 <USBD_CDC_ReceivePacket+0x68>)
 8009c8e:	7819      	ldrb	r1, [r3, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c96:	2340      	movs	r3, #64	; 0x40
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 ff9d 	bl	800bbd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	20000110 	.word	0x20000110

08009cac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e01f      	b.n	8009d04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	79fa      	ldrb	r2, [r7, #7]
 8009cf6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f001 fe11 	bl	800b920 <USBD_LL_Init>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e025      	b.n	8009d70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	32ae      	adds	r2, #174	; 0xae
 8009d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00f      	beq.n	8009d60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	32ae      	adds	r2, #174	; 0xae
 8009d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d50:	f107 020e 	add.w	r2, r7, #14
 8009d54:	4610      	mov	r0, r2
 8009d56:	4798      	blx	r3
 8009d58:	4602      	mov	r2, r0
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f001 fe1f 	bl	800b9c4 <USBD_LL_Start>
 8009d86:	4603      	mov	r3, r0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	460b      	mov	r3, r1
 8009db0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d009      	beq.n	8009dd4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	78fa      	ldrb	r2, [r7, #3]
 8009dca:	4611      	mov	r1, r2
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	4798      	blx	r3
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	460b      	mov	r3, r1
 8009de8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	78fa      	ldrb	r2, [r7, #3]
 8009df8:	4611      	mov	r1, r2
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	4798      	blx	r3
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009e04:	2303      	movs	r3, #3
 8009e06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b084      	sub	sp, #16
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 f908 	bl	800b03a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009e38:	461a      	mov	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e46:	f003 031f 	and.w	r3, r3, #31
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d01a      	beq.n	8009e84 <USBD_LL_SetupStage+0x72>
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d822      	bhi.n	8009e98 <USBD_LL_SetupStage+0x86>
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d002      	beq.n	8009e5c <USBD_LL_SetupStage+0x4a>
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d00a      	beq.n	8009e70 <USBD_LL_SetupStage+0x5e>
 8009e5a:	e01d      	b.n	8009e98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fb5f 	bl	800a528 <USBD_StdDevReq>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e6e:	e020      	b.n	8009eb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fbc7 	bl	800a60c <USBD_StdItfReq>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	73fb      	strb	r3, [r7, #15]
      break;
 8009e82:	e016      	b.n	8009eb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fc29 	bl	800a6e4 <USBD_StdEPReq>
 8009e92:	4603      	mov	r3, r0
 8009e94:	73fb      	strb	r3, [r7, #15]
      break;
 8009e96:	e00c      	b.n	8009eb2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 fdec 	bl	800ba84 <USBD_LL_StallEP>
 8009eac:	4603      	mov	r3, r0
 8009eae:	73fb      	strb	r3, [r7, #15]
      break;
 8009eb0:	bf00      	nop
  }

  return ret;
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009ece:	7afb      	ldrb	r3, [r7, #11]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d16e      	bne.n	8009fb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009eda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	f040 8098 	bne.w	800a018 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	689a      	ldr	r2, [r3, #8]
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d913      	bls.n	8009f1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	689a      	ldr	r2, [r3, #8]
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	1ad2      	subs	r2, r2, r3
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	68da      	ldr	r2, [r3, #12]
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	bf28      	it	cs
 8009f0e:	4613      	movcs	r3, r2
 8009f10:	461a      	mov	r2, r3
 8009f12:	6879      	ldr	r1, [r7, #4]
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f001 f984 	bl	800b222 <USBD_CtlContinueRx>
 8009f1a:	e07d      	b.n	800a018 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f22:	f003 031f 	and.w	r3, r3, #31
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d014      	beq.n	8009f54 <USBD_LL_DataOutStage+0x98>
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d81d      	bhi.n	8009f6a <USBD_LL_DataOutStage+0xae>
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d002      	beq.n	8009f38 <USBD_LL_DataOutStage+0x7c>
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d003      	beq.n	8009f3e <USBD_LL_DataOutStage+0x82>
 8009f36:	e018      	b.n	8009f6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	75bb      	strb	r3, [r7, #22]
            break;
 8009f3c:	e018      	b.n	8009f70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	4619      	mov	r1, r3
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f000 fa5e 	bl	800a40a <USBD_CoreFindIF>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	75bb      	strb	r3, [r7, #22]
            break;
 8009f52:	e00d      	b.n	8009f70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f000 fa60 	bl	800a424 <USBD_CoreFindEP>
 8009f64:	4603      	mov	r3, r0
 8009f66:	75bb      	strb	r3, [r7, #22]
            break;
 8009f68:	e002      	b.n	8009f70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	75bb      	strb	r3, [r7, #22]
            break;
 8009f6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009f70:	7dbb      	ldrb	r3, [r7, #22]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d119      	bne.n	8009faa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b03      	cmp	r3, #3
 8009f80:	d113      	bne.n	8009faa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009f82:	7dba      	ldrb	r2, [r7, #22]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	32ae      	adds	r2, #174	; 0xae
 8009f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00b      	beq.n	8009faa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009f92:	7dba      	ldrb	r2, [r7, #22]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009f9a:	7dba      	ldrb	r2, [r7, #22]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	32ae      	adds	r2, #174	; 0xae
 8009fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f001 f94a 	bl	800b244 <USBD_CtlSendStatus>
 8009fb0:	e032      	b.n	800a018 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009fb2:	7afb      	ldrb	r3, [r7, #11]
 8009fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	4619      	mov	r1, r3
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f000 fa31 	bl	800a424 <USBD_CoreFindEP>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fc6:	7dbb      	ldrb	r3, [r7, #22]
 8009fc8:	2bff      	cmp	r3, #255	; 0xff
 8009fca:	d025      	beq.n	800a018 <USBD_LL_DataOutStage+0x15c>
 8009fcc:	7dbb      	ldrb	r3, [r7, #22]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d122      	bne.n	800a018 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d117      	bne.n	800a00e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009fde:	7dba      	ldrb	r2, [r7, #22]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	32ae      	adds	r2, #174	; 0xae
 8009fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00f      	beq.n	800a00e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009fee:	7dba      	ldrb	r2, [r7, #22]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009ff6:	7dba      	ldrb	r2, [r7, #22]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	32ae      	adds	r2, #174	; 0xae
 8009ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a000:	699b      	ldr	r3, [r3, #24]
 800a002:	7afa      	ldrb	r2, [r7, #11]
 800a004:	4611      	mov	r1, r2
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	4798      	blx	r3
 800a00a:	4603      	mov	r3, r0
 800a00c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a014:	7dfb      	ldrb	r3, [r7, #23]
 800a016:	e000      	b.n	800a01a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3718      	adds	r7, #24
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b086      	sub	sp, #24
 800a026:	af00      	add	r7, sp, #0
 800a028:	60f8      	str	r0, [r7, #12]
 800a02a:	460b      	mov	r3, r1
 800a02c:	607a      	str	r2, [r7, #4]
 800a02e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a030:	7afb      	ldrb	r3, [r7, #11]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d16f      	bne.n	800a116 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3314      	adds	r3, #20
 800a03a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a042:	2b02      	cmp	r3, #2
 800a044:	d15a      	bne.n	800a0fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d914      	bls.n	800a07c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	689a      	ldr	r2, [r3, #8]
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	1ad2      	subs	r2, r2, r3
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	461a      	mov	r2, r3
 800a066:	6879      	ldr	r1, [r7, #4]
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f001 f8ac 	bl	800b1c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a06e:	2300      	movs	r3, #0
 800a070:	2200      	movs	r2, #0
 800a072:	2100      	movs	r1, #0
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f001 fdaf 	bl	800bbd8 <USBD_LL_PrepareReceive>
 800a07a:	e03f      	b.n	800a0fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	68da      	ldr	r2, [r3, #12]
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	429a      	cmp	r2, r3
 800a086:	d11c      	bne.n	800a0c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a090:	429a      	cmp	r2, r3
 800a092:	d316      	bcc.n	800a0c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	685a      	ldr	r2, [r3, #4]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d20f      	bcs.n	800a0c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f001 f88d 	bl	800b1c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f001 fd8c 	bl	800bbd8 <USBD_LL_PrepareReceive>
 800a0c0:	e01c      	b.n	800a0fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b03      	cmp	r3, #3
 800a0cc:	d10f      	bne.n	800a0ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d009      	beq.n	800a0ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0ee:	2180      	movs	r1, #128	; 0x80
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f001 fcc7 	bl	800ba84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f001 f8b7 	bl	800b26a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d03a      	beq.n	800a17c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f7ff fe42 	bl	8009d90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a114:	e032      	b.n	800a17c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a116:	7afb      	ldrb	r3, [r7, #11]
 800a118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	4619      	mov	r1, r3
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f000 f97f 	bl	800a424 <USBD_CoreFindEP>
 800a126:	4603      	mov	r3, r0
 800a128:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a12a:	7dfb      	ldrb	r3, [r7, #23]
 800a12c:	2bff      	cmp	r3, #255	; 0xff
 800a12e:	d025      	beq.n	800a17c <USBD_LL_DataInStage+0x15a>
 800a130:	7dfb      	ldrb	r3, [r7, #23]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d122      	bne.n	800a17c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b03      	cmp	r3, #3
 800a140:	d11c      	bne.n	800a17c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a142:	7dfa      	ldrb	r2, [r7, #23]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	32ae      	adds	r2, #174	; 0xae
 800a148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d014      	beq.n	800a17c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a152:	7dfa      	ldrb	r2, [r7, #23]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a15a:	7dfa      	ldrb	r2, [r7, #23]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	32ae      	adds	r2, #174	; 0xae
 800a160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	7afa      	ldrb	r2, [r7, #11]
 800a168:	4611      	mov	r1, r2
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	4798      	blx	r3
 800a16e:	4603      	mov	r3, r0
 800a170:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a172:	7dbb      	ldrb	r3, [r7, #22]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a178:	7dbb      	ldrb	r3, [r7, #22]
 800a17a:	e000      	b.n	800a17e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3718      	adds	r7, #24
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b084      	sub	sp, #16
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a18e:	2300      	movs	r3, #0
 800a190:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d014      	beq.n	800a1ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00e      	beq.n	800a1ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	6852      	ldr	r2, [r2, #4]
 800a1da:	b2d2      	uxtb	r2, r2
 800a1dc:	4611      	mov	r1, r2
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	4798      	blx	r3
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d001      	beq.n	800a1ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1ec:	2340      	movs	r3, #64	; 0x40
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f001 fc01 	bl	800b9fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2240      	movs	r2, #64	; 0x40
 800a204:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a208:	2340      	movs	r3, #64	; 0x40
 800a20a:	2200      	movs	r2, #0
 800a20c:	2180      	movs	r1, #128	; 0x80
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f001 fbf3 	bl	800b9fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2240      	movs	r2, #64	; 0x40
 800a21e:	621a      	str	r2, [r3, #32]

  return ret;
 800a220:	7bfb      	ldrb	r3, [r7, #15]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b083      	sub	sp, #12
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	460b      	mov	r3, r1
 800a234:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	78fa      	ldrb	r2, [r7, #3]
 800a23a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	370c      	adds	r7, #12
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a24a:	b480      	push	{r7}
 800a24c:	b083      	sub	sp, #12
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2204      	movs	r2, #4
 800a264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b04      	cmp	r3, #4
 800a288:	d106      	bne.n	800a298 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a290:	b2da      	uxtb	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	d110      	bne.n	800a2dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00b      	beq.n	800a2dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ca:	69db      	ldr	r3, [r3, #28]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d005      	beq.n	800a2dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d6:	69db      	ldr	r3, [r3, #28]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b082      	sub	sp, #8
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	32ae      	adds	r2, #174	; 0xae
 800a2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d101      	bne.n	800a308 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a304:	2303      	movs	r3, #3
 800a306:	e01c      	b.n	800a342 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b03      	cmp	r3, #3
 800a312:	d115      	bne.n	800a340 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	32ae      	adds	r2, #174	; 0xae
 800a31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a322:	6a1b      	ldr	r3, [r3, #32]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00b      	beq.n	800a340 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	32ae      	adds	r2, #174	; 0xae
 800a332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a336:	6a1b      	ldr	r3, [r3, #32]
 800a338:	78fa      	ldrb	r2, [r7, #3]
 800a33a:	4611      	mov	r1, r2
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	460b      	mov	r3, r1
 800a354:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	32ae      	adds	r2, #174	; 0xae
 800a360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a368:	2303      	movs	r3, #3
 800a36a:	e01c      	b.n	800a3a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b03      	cmp	r3, #3
 800a376:	d115      	bne.n	800a3a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	32ae      	adds	r2, #174	; 0xae
 800a382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00b      	beq.n	800a3a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	32ae      	adds	r2, #174	; 0xae
 800a396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	78fa      	ldrb	r2, [r7, #3]
 800a39e:	4611      	mov	r1, r2
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b083      	sub	sp, #12
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00e      	beq.n	800a400 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	6852      	ldr	r2, [r2, #4]
 800a3ee:	b2d2      	uxtb	r2, r2
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	4798      	blx	r3
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a400:	7bfb      	ldrb	r3, [r7, #15]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a40a:	b480      	push	{r7}
 800a40c:	b083      	sub	sp, #12
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a416:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	460b      	mov	r3, r1
 800a42e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a430:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a432:	4618      	mov	r0, r3
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b086      	sub	sp, #24
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	460b      	mov	r3, r1
 800a448:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a452:	2300      	movs	r3, #0
 800a454:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	885b      	ldrh	r3, [r3, #2]
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	b29b      	uxth	r3, r3
 800a462:	429a      	cmp	r2, r3
 800a464:	d920      	bls.n	800a4a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a46e:	e013      	b.n	800a498 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a470:	f107 030a 	add.w	r3, r7, #10
 800a474:	4619      	mov	r1, r3
 800a476:	6978      	ldr	r0, [r7, #20]
 800a478:	f000 f81b 	bl	800a4b2 <USBD_GetNextDesc>
 800a47c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	785b      	ldrb	r3, [r3, #1]
 800a482:	2b05      	cmp	r3, #5
 800a484:	d108      	bne.n	800a498 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	789b      	ldrb	r3, [r3, #2]
 800a48e:	78fa      	ldrb	r2, [r7, #3]
 800a490:	429a      	cmp	r2, r3
 800a492:	d008      	beq.n	800a4a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a494:	2300      	movs	r3, #0
 800a496:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	885b      	ldrh	r3, [r3, #2]
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	897b      	ldrh	r3, [r7, #10]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d8e5      	bhi.n	800a470 <USBD_GetEpDesc+0x32>
 800a4a4:	e000      	b.n	800a4a8 <USBD_GetEpDesc+0x6a>
          break;
 800a4a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a4a8:	693b      	ldr	r3, [r7, #16]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	b085      	sub	sp, #20
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	881a      	ldrh	r2, [r3, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	4413      	add	r3, r2
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4413      	add	r3, r2
 800a4dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a4de:	68fb      	ldr	r3, [r7, #12]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	3301      	adds	r3, #1
 800a502:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a50a:	8a3b      	ldrh	r3, [r7, #16]
 800a50c:	021b      	lsls	r3, r3, #8
 800a50e:	b21a      	sxth	r2, r3
 800a510:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a514:	4313      	orrs	r3, r2
 800a516:	b21b      	sxth	r3, r3
 800a518:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a51a:	89fb      	ldrh	r3, [r7, #14]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	371c      	adds	r7, #28
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a53e:	2b40      	cmp	r3, #64	; 0x40
 800a540:	d005      	beq.n	800a54e <USBD_StdDevReq+0x26>
 800a542:	2b40      	cmp	r3, #64	; 0x40
 800a544:	d857      	bhi.n	800a5f6 <USBD_StdDevReq+0xce>
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00f      	beq.n	800a56a <USBD_StdDevReq+0x42>
 800a54a:	2b20      	cmp	r3, #32
 800a54c:	d153      	bne.n	800a5f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	32ae      	adds	r2, #174	; 0xae
 800a558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	4798      	blx	r3
 800a564:	4603      	mov	r3, r0
 800a566:	73fb      	strb	r3, [r7, #15]
      break;
 800a568:	e04a      	b.n	800a600 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	785b      	ldrb	r3, [r3, #1]
 800a56e:	2b09      	cmp	r3, #9
 800a570:	d83b      	bhi.n	800a5ea <USBD_StdDevReq+0xc2>
 800a572:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <USBD_StdDevReq+0x50>)
 800a574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a578:	0800a5cd 	.word	0x0800a5cd
 800a57c:	0800a5e1 	.word	0x0800a5e1
 800a580:	0800a5eb 	.word	0x0800a5eb
 800a584:	0800a5d7 	.word	0x0800a5d7
 800a588:	0800a5eb 	.word	0x0800a5eb
 800a58c:	0800a5ab 	.word	0x0800a5ab
 800a590:	0800a5a1 	.word	0x0800a5a1
 800a594:	0800a5eb 	.word	0x0800a5eb
 800a598:	0800a5c3 	.word	0x0800a5c3
 800a59c:	0800a5b5 	.word	0x0800a5b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fa3c 	bl	800aa20 <USBD_GetDescriptor>
          break;
 800a5a8:	e024      	b.n	800a5f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fba1 	bl	800acf4 <USBD_SetAddress>
          break;
 800a5b2:	e01f      	b.n	800a5f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fbe0 	bl	800ad7c <USBD_SetConfig>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73fb      	strb	r3, [r7, #15]
          break;
 800a5c0:	e018      	b.n	800a5f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fc83 	bl	800aed0 <USBD_GetConfig>
          break;
 800a5ca:	e013      	b.n	800a5f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a5cc:	6839      	ldr	r1, [r7, #0]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fcb4 	bl	800af3c <USBD_GetStatus>
          break;
 800a5d4:	e00e      	b.n	800a5f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fce3 	bl	800afa4 <USBD_SetFeature>
          break;
 800a5de:	e009      	b.n	800a5f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a5e0:	6839      	ldr	r1, [r7, #0]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 fd07 	bl	800aff6 <USBD_ClrFeature>
          break;
 800a5e8:	e004      	b.n	800a5f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fd5e 	bl	800b0ae <USBD_CtlError>
          break;
 800a5f2:	bf00      	nop
      }
      break;
 800a5f4:	e004      	b.n	800a600 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 fd58 	bl	800b0ae <USBD_CtlError>
      break;
 800a5fe:	bf00      	nop
  }

  return ret;
 800a600:	7bfb      	ldrb	r3, [r7, #15]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop

0800a60c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a622:	2b40      	cmp	r3, #64	; 0x40
 800a624:	d005      	beq.n	800a632 <USBD_StdItfReq+0x26>
 800a626:	2b40      	cmp	r3, #64	; 0x40
 800a628:	d852      	bhi.n	800a6d0 <USBD_StdItfReq+0xc4>
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <USBD_StdItfReq+0x26>
 800a62e:	2b20      	cmp	r3, #32
 800a630:	d14e      	bne.n	800a6d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	3b01      	subs	r3, #1
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	d840      	bhi.n	800a6c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	889b      	ldrh	r3, [r3, #4]
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b01      	cmp	r3, #1
 800a648:	d836      	bhi.n	800a6b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	889b      	ldrh	r3, [r3, #4]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	4619      	mov	r1, r3
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7ff fed9 	bl	800a40a <USBD_CoreFindIF>
 800a658:	4603      	mov	r3, r0
 800a65a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a65c:	7bbb      	ldrb	r3, [r7, #14]
 800a65e:	2bff      	cmp	r3, #255	; 0xff
 800a660:	d01d      	beq.n	800a69e <USBD_StdItfReq+0x92>
 800a662:	7bbb      	ldrb	r3, [r7, #14]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d11a      	bne.n	800a69e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a668:	7bba      	ldrb	r2, [r7, #14]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	32ae      	adds	r2, #174	; 0xae
 800a66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00f      	beq.n	800a698 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a678:	7bba      	ldrb	r2, [r7, #14]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a680:	7bba      	ldrb	r2, [r7, #14]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	32ae      	adds	r2, #174	; 0xae
 800a686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	4798      	blx	r3
 800a692:	4603      	mov	r3, r0
 800a694:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a696:	e004      	b.n	800a6a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a698:	2303      	movs	r3, #3
 800a69a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a69c:	e001      	b.n	800a6a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	88db      	ldrh	r3, [r3, #6]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d110      	bne.n	800a6cc <USBD_StdItfReq+0xc0>
 800a6aa:	7bfb      	ldrb	r3, [r7, #15]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10d      	bne.n	800a6cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fdc7 	bl	800b244 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a6b6:	e009      	b.n	800a6cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fcf7 	bl	800b0ae <USBD_CtlError>
          break;
 800a6c0:	e004      	b.n	800a6cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fcf2 	bl	800b0ae <USBD_CtlError>
          break;
 800a6ca:	e000      	b.n	800a6ce <USBD_StdItfReq+0xc2>
          break;
 800a6cc:	bf00      	nop
      }
      break;
 800a6ce:	e004      	b.n	800a6da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 fceb 	bl	800b0ae <USBD_CtlError>
      break;
 800a6d8:	bf00      	nop
  }

  return ret;
 800a6da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	889b      	ldrh	r3, [r3, #4]
 800a6f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a700:	2b40      	cmp	r3, #64	; 0x40
 800a702:	d007      	beq.n	800a714 <USBD_StdEPReq+0x30>
 800a704:	2b40      	cmp	r3, #64	; 0x40
 800a706:	f200 817f 	bhi.w	800aa08 <USBD_StdEPReq+0x324>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d02a      	beq.n	800a764 <USBD_StdEPReq+0x80>
 800a70e:	2b20      	cmp	r3, #32
 800a710:	f040 817a 	bne.w	800aa08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a714:	7bbb      	ldrb	r3, [r7, #14]
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f7ff fe83 	bl	800a424 <USBD_CoreFindEP>
 800a71e:	4603      	mov	r3, r0
 800a720:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a722:	7b7b      	ldrb	r3, [r7, #13]
 800a724:	2bff      	cmp	r3, #255	; 0xff
 800a726:	f000 8174 	beq.w	800aa12 <USBD_StdEPReq+0x32e>
 800a72a:	7b7b      	ldrb	r3, [r7, #13]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f040 8170 	bne.w	800aa12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a732:	7b7a      	ldrb	r2, [r7, #13]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a73a:	7b7a      	ldrb	r2, [r7, #13]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	32ae      	adds	r2, #174	; 0xae
 800a740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 8163 	beq.w	800aa12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a74c:	7b7a      	ldrb	r2, [r7, #13]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	32ae      	adds	r2, #174	; 0xae
 800a752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	4798      	blx	r3
 800a75e:	4603      	mov	r3, r0
 800a760:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a762:	e156      	b.n	800aa12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	785b      	ldrb	r3, [r3, #1]
 800a768:	2b03      	cmp	r3, #3
 800a76a:	d008      	beq.n	800a77e <USBD_StdEPReq+0x9a>
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	f300 8145 	bgt.w	800a9fc <USBD_StdEPReq+0x318>
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 809b 	beq.w	800a8ae <USBD_StdEPReq+0x1ca>
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d03c      	beq.n	800a7f6 <USBD_StdEPReq+0x112>
 800a77c:	e13e      	b.n	800a9fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b02      	cmp	r3, #2
 800a788:	d002      	beq.n	800a790 <USBD_StdEPReq+0xac>
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	d016      	beq.n	800a7bc <USBD_StdEPReq+0xd8>
 800a78e:	e02c      	b.n	800a7ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00d      	beq.n	800a7b2 <USBD_StdEPReq+0xce>
 800a796:	7bbb      	ldrb	r3, [r7, #14]
 800a798:	2b80      	cmp	r3, #128	; 0x80
 800a79a:	d00a      	beq.n	800a7b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a79c:	7bbb      	ldrb	r3, [r7, #14]
 800a79e:	4619      	mov	r1, r3
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f001 f96f 	bl	800ba84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7a6:	2180      	movs	r1, #128	; 0x80
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f001 f96b 	bl	800ba84 <USBD_LL_StallEP>
 800a7ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7b0:	e020      	b.n	800a7f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fc7a 	bl	800b0ae <USBD_CtlError>
              break;
 800a7ba:	e01b      	b.n	800a7f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	885b      	ldrh	r3, [r3, #2]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10e      	bne.n	800a7e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00b      	beq.n	800a7e2 <USBD_StdEPReq+0xfe>
 800a7ca:	7bbb      	ldrb	r3, [r7, #14]
 800a7cc:	2b80      	cmp	r3, #128	; 0x80
 800a7ce:	d008      	beq.n	800a7e2 <USBD_StdEPReq+0xfe>
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	88db      	ldrh	r3, [r3, #6]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d104      	bne.n	800a7e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7d8:	7bbb      	ldrb	r3, [r7, #14]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f001 f951 	bl	800ba84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fd2e 	bl	800b244 <USBD_CtlSendStatus>

              break;
 800a7e8:	e004      	b.n	800a7f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fc5e 	bl	800b0ae <USBD_CtlError>
              break;
 800a7f2:	bf00      	nop
          }
          break;
 800a7f4:	e107      	b.n	800aa06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d002      	beq.n	800a808 <USBD_StdEPReq+0x124>
 800a802:	2b03      	cmp	r3, #3
 800a804:	d016      	beq.n	800a834 <USBD_StdEPReq+0x150>
 800a806:	e04b      	b.n	800a8a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00d      	beq.n	800a82a <USBD_StdEPReq+0x146>
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	2b80      	cmp	r3, #128	; 0x80
 800a812:	d00a      	beq.n	800a82a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a814:	7bbb      	ldrb	r3, [r7, #14]
 800a816:	4619      	mov	r1, r3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f001 f933 	bl	800ba84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a81e:	2180      	movs	r1, #128	; 0x80
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f001 f92f 	bl	800ba84 <USBD_LL_StallEP>
 800a826:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a828:	e040      	b.n	800a8ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a82a:	6839      	ldr	r1, [r7, #0]
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fc3e 	bl	800b0ae <USBD_CtlError>
              break;
 800a832:	e03b      	b.n	800a8ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	885b      	ldrh	r3, [r3, #2]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d136      	bne.n	800a8aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a83c:	7bbb      	ldrb	r3, [r7, #14]
 800a83e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a842:	2b00      	cmp	r3, #0
 800a844:	d004      	beq.n	800a850 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a846:	7bbb      	ldrb	r3, [r7, #14]
 800a848:	4619      	mov	r1, r3
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f001 f939 	bl	800bac2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fcf7 	bl	800b244 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	4619      	mov	r1, r3
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7ff fde2 	bl	800a424 <USBD_CoreFindEP>
 800a860:	4603      	mov	r3, r0
 800a862:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a864:	7b7b      	ldrb	r3, [r7, #13]
 800a866:	2bff      	cmp	r3, #255	; 0xff
 800a868:	d01f      	beq.n	800a8aa <USBD_StdEPReq+0x1c6>
 800a86a:	7b7b      	ldrb	r3, [r7, #13]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d11c      	bne.n	800a8aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a870:	7b7a      	ldrb	r2, [r7, #13]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a878:	7b7a      	ldrb	r2, [r7, #13]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	32ae      	adds	r2, #174	; 0xae
 800a87e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d010      	beq.n	800a8aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a888:	7b7a      	ldrb	r2, [r7, #13]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	32ae      	adds	r2, #174	; 0xae
 800a88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	4798      	blx	r3
 800a89a:	4603      	mov	r3, r0
 800a89c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a89e:	e004      	b.n	800a8aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a8a0:	6839      	ldr	r1, [r7, #0]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fc03 	bl	800b0ae <USBD_CtlError>
              break;
 800a8a8:	e000      	b.n	800a8ac <USBD_StdEPReq+0x1c8>
              break;
 800a8aa:	bf00      	nop
          }
          break;
 800a8ac:	e0ab      	b.n	800aa06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d002      	beq.n	800a8c0 <USBD_StdEPReq+0x1dc>
 800a8ba:	2b03      	cmp	r3, #3
 800a8bc:	d032      	beq.n	800a924 <USBD_StdEPReq+0x240>
 800a8be:	e097      	b.n	800a9f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8c0:	7bbb      	ldrb	r3, [r7, #14]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d007      	beq.n	800a8d6 <USBD_StdEPReq+0x1f2>
 800a8c6:	7bbb      	ldrb	r3, [r7, #14]
 800a8c8:	2b80      	cmp	r3, #128	; 0x80
 800a8ca:	d004      	beq.n	800a8d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a8cc:	6839      	ldr	r1, [r7, #0]
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fbed 	bl	800b0ae <USBD_CtlError>
                break;
 800a8d4:	e091      	b.n	800a9fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	da0b      	bge.n	800a8f6 <USBD_StdEPReq+0x212>
 800a8de:	7bbb      	ldrb	r3, [r7, #14]
 800a8e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4413      	add	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	3310      	adds	r3, #16
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	e00b      	b.n	800a90e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8f6:	7bbb      	ldrb	r3, [r7, #14]
 800a8f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4413      	add	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	4413      	add	r3, r2
 800a90c:	3304      	adds	r3, #4
 800a90e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	2202      	movs	r2, #2
 800a91a:	4619      	mov	r1, r3
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 fc37 	bl	800b190 <USBD_CtlSendData>
              break;
 800a922:	e06a      	b.n	800a9fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	da11      	bge.n	800a950 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
 800a92e:	f003 020f 	and.w	r2, r3, #15
 800a932:	6879      	ldr	r1, [r7, #4]
 800a934:	4613      	mov	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4413      	add	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	440b      	add	r3, r1
 800a93e:	3324      	adds	r3, #36	; 0x24
 800a940:	881b      	ldrh	r3, [r3, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d117      	bne.n	800a976 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a946:	6839      	ldr	r1, [r7, #0]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fbb0 	bl	800b0ae <USBD_CtlError>
                  break;
 800a94e:	e054      	b.n	800a9fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a950:	7bbb      	ldrb	r3, [r7, #14]
 800a952:	f003 020f 	and.w	r2, r3, #15
 800a956:	6879      	ldr	r1, [r7, #4]
 800a958:	4613      	mov	r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	440b      	add	r3, r1
 800a962:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a966:	881b      	ldrh	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d104      	bne.n	800a976 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fb9d 	bl	800b0ae <USBD_CtlError>
                  break;
 800a974:	e041      	b.n	800a9fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	da0b      	bge.n	800a996 <USBD_StdEPReq+0x2b2>
 800a97e:	7bbb      	ldrb	r3, [r7, #14]
 800a980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a984:	4613      	mov	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	4413      	add	r3, r2
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	3310      	adds	r3, #16
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	4413      	add	r3, r2
 800a992:	3304      	adds	r3, #4
 800a994:	e00b      	b.n	800a9ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a996:	7bbb      	ldrb	r3, [r7, #14]
 800a998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a99c:	4613      	mov	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	3304      	adds	r3, #4
 800a9ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d002      	beq.n	800a9bc <USBD_StdEPReq+0x2d8>
 800a9b6:	7bbb      	ldrb	r3, [r7, #14]
 800a9b8:	2b80      	cmp	r3, #128	; 0x80
 800a9ba:	d103      	bne.n	800a9c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	601a      	str	r2, [r3, #0]
 800a9c2:	e00e      	b.n	800a9e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a9c4:	7bbb      	ldrb	r3, [r7, #14]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f001 f899 	bl	800bb00 <USBD_LL_IsStallEP>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d003      	beq.n	800a9dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	601a      	str	r2, [r3, #0]
 800a9da:	e002      	b.n	800a9e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	2202      	movs	r2, #2
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fbd1 	bl	800b190 <USBD_CtlSendData>
              break;
 800a9ee:	e004      	b.n	800a9fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fb5b 	bl	800b0ae <USBD_CtlError>
              break;
 800a9f8:	bf00      	nop
          }
          break;
 800a9fa:	e004      	b.n	800aa06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fb55 	bl	800b0ae <USBD_CtlError>
          break;
 800aa04:	bf00      	nop
      }
      break;
 800aa06:	e005      	b.n	800aa14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fb4f 	bl	800b0ae <USBD_CtlError>
      break;
 800aa10:	e000      	b.n	800aa14 <USBD_StdEPReq+0x330>
      break;
 800aa12:	bf00      	nop
  }

  return ret;
 800aa14:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa32:	2300      	movs	r3, #0
 800aa34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	885b      	ldrh	r3, [r3, #2]
 800aa3a:	0a1b      	lsrs	r3, r3, #8
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	2b06      	cmp	r3, #6
 800aa42:	f200 8128 	bhi.w	800ac96 <USBD_GetDescriptor+0x276>
 800aa46:	a201      	add	r2, pc, #4	; (adr r2, 800aa4c <USBD_GetDescriptor+0x2c>)
 800aa48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4c:	0800aa69 	.word	0x0800aa69
 800aa50:	0800aa81 	.word	0x0800aa81
 800aa54:	0800aac1 	.word	0x0800aac1
 800aa58:	0800ac97 	.word	0x0800ac97
 800aa5c:	0800ac97 	.word	0x0800ac97
 800aa60:	0800ac37 	.word	0x0800ac37
 800aa64:	0800ac63 	.word	0x0800ac63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	7c12      	ldrb	r2, [r2, #16]
 800aa74:	f107 0108 	add.w	r1, r7, #8
 800aa78:	4610      	mov	r0, r2
 800aa7a:	4798      	blx	r3
 800aa7c:	60f8      	str	r0, [r7, #12]
      break;
 800aa7e:	e112      	b.n	800aca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	7c1b      	ldrb	r3, [r3, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10d      	bne.n	800aaa4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa90:	f107 0208 	add.w	r2, r7, #8
 800aa94:	4610      	mov	r0, r2
 800aa96:	4798      	blx	r3
 800aa98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aaa2:	e100      	b.n	800aca6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaac:	f107 0208 	add.w	r2, r7, #8
 800aab0:	4610      	mov	r0, r2
 800aab2:	4798      	blx	r3
 800aab4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3301      	adds	r3, #1
 800aaba:	2202      	movs	r2, #2
 800aabc:	701a      	strb	r2, [r3, #0]
      break;
 800aabe:	e0f2      	b.n	800aca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	885b      	ldrh	r3, [r3, #2]
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b05      	cmp	r3, #5
 800aac8:	f200 80ac 	bhi.w	800ac24 <USBD_GetDescriptor+0x204>
 800aacc:	a201      	add	r2, pc, #4	; (adr r2, 800aad4 <USBD_GetDescriptor+0xb4>)
 800aace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad2:	bf00      	nop
 800aad4:	0800aaed 	.word	0x0800aaed
 800aad8:	0800ab21 	.word	0x0800ab21
 800aadc:	0800ab55 	.word	0x0800ab55
 800aae0:	0800ab89 	.word	0x0800ab89
 800aae4:	0800abbd 	.word	0x0800abbd
 800aae8:	0800abf1 	.word	0x0800abf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00b      	beq.n	800ab10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	7c12      	ldrb	r2, [r2, #16]
 800ab04:	f107 0108 	add.w	r1, r7, #8
 800ab08:	4610      	mov	r0, r2
 800ab0a:	4798      	blx	r3
 800ab0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab0e:	e091      	b.n	800ac34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 facb 	bl	800b0ae <USBD_CtlError>
            err++;
 800ab18:	7afb      	ldrb	r3, [r7, #11]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab1e:	e089      	b.n	800ac34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00b      	beq.n	800ab44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	7c12      	ldrb	r2, [r2, #16]
 800ab38:	f107 0108 	add.w	r1, r7, #8
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	4798      	blx	r3
 800ab40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab42:	e077      	b.n	800ac34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fab1 	bl	800b0ae <USBD_CtlError>
            err++;
 800ab4c:	7afb      	ldrb	r3, [r7, #11]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	72fb      	strb	r3, [r7, #11]
          break;
 800ab52:	e06f      	b.n	800ac34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00b      	beq.n	800ab78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	7c12      	ldrb	r2, [r2, #16]
 800ab6c:	f107 0108 	add.w	r1, r7, #8
 800ab70:	4610      	mov	r0, r2
 800ab72:	4798      	blx	r3
 800ab74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab76:	e05d      	b.n	800ac34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab78:	6839      	ldr	r1, [r7, #0]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fa97 	bl	800b0ae <USBD_CtlError>
            err++;
 800ab80:	7afb      	ldrb	r3, [r7, #11]
 800ab82:	3301      	adds	r3, #1
 800ab84:	72fb      	strb	r3, [r7, #11]
          break;
 800ab86:	e055      	b.n	800ac34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00b      	beq.n	800abac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	7c12      	ldrb	r2, [r2, #16]
 800aba0:	f107 0108 	add.w	r1, r7, #8
 800aba4:	4610      	mov	r0, r2
 800aba6:	4798      	blx	r3
 800aba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abaa:	e043      	b.n	800ac34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 fa7d 	bl	800b0ae <USBD_CtlError>
            err++;
 800abb4:	7afb      	ldrb	r3, [r7, #11]
 800abb6:	3301      	adds	r3, #1
 800abb8:	72fb      	strb	r3, [r7, #11]
          break;
 800abba:	e03b      	b.n	800ac34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abc2:	695b      	ldr	r3, [r3, #20]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00b      	beq.n	800abe0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abce:	695b      	ldr	r3, [r3, #20]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	7c12      	ldrb	r2, [r2, #16]
 800abd4:	f107 0108 	add.w	r1, r7, #8
 800abd8:	4610      	mov	r0, r2
 800abda:	4798      	blx	r3
 800abdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abde:	e029      	b.n	800ac34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fa63 	bl	800b0ae <USBD_CtlError>
            err++;
 800abe8:	7afb      	ldrb	r3, [r7, #11]
 800abea:	3301      	adds	r3, #1
 800abec:	72fb      	strb	r3, [r7, #11]
          break;
 800abee:	e021      	b.n	800ac34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00b      	beq.n	800ac14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	7c12      	ldrb	r2, [r2, #16]
 800ac08:	f107 0108 	add.w	r1, r7, #8
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4798      	blx	r3
 800ac10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac12:	e00f      	b.n	800ac34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fa49 	bl	800b0ae <USBD_CtlError>
            err++;
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	72fb      	strb	r3, [r7, #11]
          break;
 800ac22:	e007      	b.n	800ac34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ac24:	6839      	ldr	r1, [r7, #0]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fa41 	bl	800b0ae <USBD_CtlError>
          err++;
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ac32:	bf00      	nop
      }
      break;
 800ac34:	e037      	b.n	800aca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	7c1b      	ldrb	r3, [r3, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d109      	bne.n	800ac52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac46:	f107 0208 	add.w	r2, r7, #8
 800ac4a:	4610      	mov	r0, r2
 800ac4c:	4798      	blx	r3
 800ac4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac50:	e029      	b.n	800aca6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac52:	6839      	ldr	r1, [r7, #0]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fa2a 	bl	800b0ae <USBD_CtlError>
        err++;
 800ac5a:	7afb      	ldrb	r3, [r7, #11]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ac60:	e021      	b.n	800aca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	7c1b      	ldrb	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10d      	bne.n	800ac86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac72:	f107 0208 	add.w	r2, r7, #8
 800ac76:	4610      	mov	r0, r2
 800ac78:	4798      	blx	r3
 800ac7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	2207      	movs	r2, #7
 800ac82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac84:	e00f      	b.n	800aca6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fa10 	bl	800b0ae <USBD_CtlError>
        err++;
 800ac8e:	7afb      	ldrb	r3, [r7, #11]
 800ac90:	3301      	adds	r3, #1
 800ac92:	72fb      	strb	r3, [r7, #11]
      break;
 800ac94:	e007      	b.n	800aca6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ac96:	6839      	ldr	r1, [r7, #0]
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fa08 	bl	800b0ae <USBD_CtlError>
      err++;
 800ac9e:	7afb      	ldrb	r3, [r7, #11]
 800aca0:	3301      	adds	r3, #1
 800aca2:	72fb      	strb	r3, [r7, #11]
      break;
 800aca4:	bf00      	nop
  }

  if (err != 0U)
 800aca6:	7afb      	ldrb	r3, [r7, #11]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d11e      	bne.n	800acea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	88db      	ldrh	r3, [r3, #6]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d016      	beq.n	800ace2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800acb4:	893b      	ldrh	r3, [r7, #8]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00e      	beq.n	800acd8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	88da      	ldrh	r2, [r3, #6]
 800acbe:	893b      	ldrh	r3, [r7, #8]
 800acc0:	4293      	cmp	r3, r2
 800acc2:	bf28      	it	cs
 800acc4:	4613      	movcs	r3, r2
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800acca:	893b      	ldrh	r3, [r7, #8]
 800accc:	461a      	mov	r2, r3
 800acce:	68f9      	ldr	r1, [r7, #12]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 fa5d 	bl	800b190 <USBD_CtlSendData>
 800acd6:	e009      	b.n	800acec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f9e7 	bl	800b0ae <USBD_CtlError>
 800ace0:	e004      	b.n	800acec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 faae 	bl	800b244 <USBD_CtlSendStatus>
 800ace8:	e000      	b.n	800acec <USBD_GetDescriptor+0x2cc>
    return;
 800acea:	bf00      	nop
  }
}
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop

0800acf4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	889b      	ldrh	r3, [r3, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d131      	bne.n	800ad6a <USBD_SetAddress+0x76>
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	88db      	ldrh	r3, [r3, #6]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d12d      	bne.n	800ad6a <USBD_SetAddress+0x76>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	885b      	ldrh	r3, [r3, #2]
 800ad12:	2b7f      	cmp	r3, #127	; 0x7f
 800ad14:	d829      	bhi.n	800ad6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	885b      	ldrh	r3, [r3, #2]
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	2b03      	cmp	r3, #3
 800ad2c:	d104      	bne.n	800ad38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f9bc 	bl	800b0ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad36:	e01d      	b.n	800ad74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	7bfa      	ldrb	r2, [r7, #15]
 800ad3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
 800ad42:	4619      	mov	r1, r3
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 ff07 	bl	800bb58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fa7a 	bl	800b244 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad50:	7bfb      	ldrb	r3, [r7, #15]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d004      	beq.n	800ad60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2202      	movs	r2, #2
 800ad5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad5e:	e009      	b.n	800ad74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad68:	e004      	b.n	800ad74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad6a:	6839      	ldr	r1, [r7, #0]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f99e 	bl	800b0ae <USBD_CtlError>
  }
}
 800ad72:	bf00      	nop
 800ad74:	bf00      	nop
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	885b      	ldrh	r3, [r3, #2]
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	4b4e      	ldr	r3, [pc, #312]	; (800aecc <USBD_SetConfig+0x150>)
 800ad92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad94:	4b4d      	ldr	r3, [pc, #308]	; (800aecc <USBD_SetConfig+0x150>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d905      	bls.n	800ada8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f985 	bl	800b0ae <USBD_CtlError>
    return USBD_FAIL;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e08c      	b.n	800aec2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d002      	beq.n	800adba <USBD_SetConfig+0x3e>
 800adb4:	2b03      	cmp	r3, #3
 800adb6:	d029      	beq.n	800ae0c <USBD_SetConfig+0x90>
 800adb8:	e075      	b.n	800aea6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800adba:	4b44      	ldr	r3, [pc, #272]	; (800aecc <USBD_SetConfig+0x150>)
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d020      	beq.n	800ae04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800adc2:	4b42      	ldr	r3, [pc, #264]	; (800aecc <USBD_SetConfig+0x150>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	461a      	mov	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800adcc:	4b3f      	ldr	r3, [pc, #252]	; (800aecc <USBD_SetConfig+0x150>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7fe ffe7 	bl	8009da6 <USBD_SetClassConfig>
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800addc:	7bfb      	ldrb	r3, [r7, #15]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d008      	beq.n	800adf4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ade2:	6839      	ldr	r1, [r7, #0]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 f962 	bl	800b0ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2202      	movs	r2, #2
 800adee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800adf2:	e065      	b.n	800aec0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fa25 	bl	800b244 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2203      	movs	r2, #3
 800adfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae02:	e05d      	b.n	800aec0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fa1d 	bl	800b244 <USBD_CtlSendStatus>
      break;
 800ae0a:	e059      	b.n	800aec0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae0c:	4b2f      	ldr	r3, [pc, #188]	; (800aecc <USBD_SetConfig+0x150>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d112      	bne.n	800ae3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2202      	movs	r2, #2
 800ae18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ae1c:	4b2b      	ldr	r3, [pc, #172]	; (800aecc <USBD_SetConfig+0x150>)
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	461a      	mov	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae26:	4b29      	ldr	r3, [pc, #164]	; (800aecc <USBD_SetConfig+0x150>)
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7fe ffd6 	bl	8009dde <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fa06 	bl	800b244 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae38:	e042      	b.n	800aec0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ae3a:	4b24      	ldr	r3, [pc, #144]	; (800aecc <USBD_SetConfig+0x150>)
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d02a      	beq.n	800ae9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7fe ffc4 	bl	8009dde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae56:	4b1d      	ldr	r3, [pc, #116]	; (800aecc <USBD_SetConfig+0x150>)
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae60:	4b1a      	ldr	r3, [pc, #104]	; (800aecc <USBD_SetConfig+0x150>)
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	4619      	mov	r1, r3
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7fe ff9d 	bl	8009da6 <USBD_SetClassConfig>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae70:	7bfb      	ldrb	r3, [r7, #15]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00f      	beq.n	800ae96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f918 	bl	800b0ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	4619      	mov	r1, r3
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7fe ffa9 	bl	8009dde <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2202      	movs	r2, #2
 800ae90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae94:	e014      	b.n	800aec0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f9d4 	bl	800b244 <USBD_CtlSendStatus>
      break;
 800ae9c:	e010      	b.n	800aec0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f9d0 	bl	800b244 <USBD_CtlSendStatus>
      break;
 800aea4:	e00c      	b.n	800aec0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aea6:	6839      	ldr	r1, [r7, #0]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f900 	bl	800b0ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aeae:	4b07      	ldr	r3, [pc, #28]	; (800aecc <USBD_SetConfig+0x150>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7fe ff92 	bl	8009dde <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aeba:	2303      	movs	r3, #3
 800aebc:	73fb      	strb	r3, [r7, #15]
      break;
 800aebe:	bf00      	nop
  }

  return ret;
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	20000668 	.word	0x20000668

0800aed0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	88db      	ldrh	r3, [r3, #6]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d004      	beq.n	800aeec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f8e2 	bl	800b0ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aeea:	e023      	b.n	800af34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	dc02      	bgt.n	800aefe <USBD_GetConfig+0x2e>
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	dc03      	bgt.n	800af04 <USBD_GetConfig+0x34>
 800aefc:	e015      	b.n	800af2a <USBD_GetConfig+0x5a>
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d00b      	beq.n	800af1a <USBD_GetConfig+0x4a>
 800af02:	e012      	b.n	800af2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3308      	adds	r3, #8
 800af0e:	2201      	movs	r2, #1
 800af10:	4619      	mov	r1, r3
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f93c 	bl	800b190 <USBD_CtlSendData>
        break;
 800af18:	e00c      	b.n	800af34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	3304      	adds	r3, #4
 800af1e:	2201      	movs	r2, #1
 800af20:	4619      	mov	r1, r3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 f934 	bl	800b190 <USBD_CtlSendData>
        break;
 800af28:	e004      	b.n	800af34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af2a:	6839      	ldr	r1, [r7, #0]
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f8be 	bl	800b0ae <USBD_CtlError>
        break;
 800af32:	bf00      	nop
}
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	3b01      	subs	r3, #1
 800af50:	2b02      	cmp	r3, #2
 800af52:	d81e      	bhi.n	800af92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	88db      	ldrh	r3, [r3, #6]
 800af58:	2b02      	cmp	r3, #2
 800af5a:	d004      	beq.n	800af66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f8a5 	bl	800b0ae <USBD_CtlError>
        break;
 800af64:	e01a      	b.n	800af9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af72:	2b00      	cmp	r3, #0
 800af74:	d005      	beq.n	800af82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	f043 0202 	orr.w	r2, r3, #2
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	330c      	adds	r3, #12
 800af86:	2202      	movs	r2, #2
 800af88:	4619      	mov	r1, r3
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f900 	bl	800b190 <USBD_CtlSendData>
      break;
 800af90:	e004      	b.n	800af9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 f88a 	bl	800b0ae <USBD_CtlError>
      break;
 800af9a:	bf00      	nop
  }
}
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	885b      	ldrh	r3, [r3, #2]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d107      	bne.n	800afc6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 f940 	bl	800b244 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800afc4:	e013      	b.n	800afee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	885b      	ldrh	r3, [r3, #2]
 800afca:	2b02      	cmp	r3, #2
 800afcc:	d10b      	bne.n	800afe6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	889b      	ldrh	r3, [r3, #4]
 800afd2:	0a1b      	lsrs	r3, r3, #8
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	b2da      	uxtb	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f930 	bl	800b244 <USBD_CtlSendStatus>
}
 800afe4:	e003      	b.n	800afee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800afe6:	6839      	ldr	r1, [r7, #0]
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f860 	bl	800b0ae <USBD_CtlError>
}
 800afee:	bf00      	nop
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b082      	sub	sp, #8
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b006:	b2db      	uxtb	r3, r3
 800b008:	3b01      	subs	r3, #1
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d80b      	bhi.n	800b026 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	885b      	ldrh	r3, [r3, #2]
 800b012:	2b01      	cmp	r3, #1
 800b014:	d10c      	bne.n	800b030 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f910 	bl	800b244 <USBD_CtlSendStatus>
      }
      break;
 800b024:	e004      	b.n	800b030 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f840 	bl	800b0ae <USBD_CtlError>
      break;
 800b02e:	e000      	b.n	800b032 <USBD_ClrFeature+0x3c>
      break;
 800b030:	bf00      	nop
  }
}
 800b032:	bf00      	nop
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b084      	sub	sp, #16
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	781a      	ldrb	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	3301      	adds	r3, #1
 800b054:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	781a      	ldrb	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	3301      	adds	r3, #1
 800b062:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f7ff fa41 	bl	800a4ec <SWAPBYTE>
 800b06a:	4603      	mov	r3, r0
 800b06c:	461a      	mov	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3301      	adds	r3, #1
 800b076:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3301      	adds	r3, #1
 800b07c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f7ff fa34 	bl	800a4ec <SWAPBYTE>
 800b084:	4603      	mov	r3, r0
 800b086:	461a      	mov	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	3301      	adds	r3, #1
 800b090:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	3301      	adds	r3, #1
 800b096:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f7ff fa27 	bl	800a4ec <SWAPBYTE>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	80da      	strh	r2, [r3, #6]
}
 800b0a6:	bf00      	nop
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b082      	sub	sp, #8
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0b8:	2180      	movs	r1, #128	; 0x80
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fce2 	bl	800ba84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 fcde 	bl	800ba84 <USBD_LL_StallEP>
}
 800b0c8:	bf00      	nop
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d036      	beq.n	800b154 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b0ea:	6938      	ldr	r0, [r7, #16]
 800b0ec:	f000 f836 	bl	800b15c <USBD_GetLen>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	005b      	lsls	r3, r3, #1
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	4413      	add	r3, r2
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	7812      	ldrb	r2, [r2, #0]
 800b108:	701a      	strb	r2, [r3, #0]
  idx++;
 800b10a:	7dfb      	ldrb	r3, [r7, #23]
 800b10c:	3301      	adds	r3, #1
 800b10e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b110:	7dfb      	ldrb	r3, [r7, #23]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	4413      	add	r3, r2
 800b116:	2203      	movs	r2, #3
 800b118:	701a      	strb	r2, [r3, #0]
  idx++;
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
 800b11c:	3301      	adds	r3, #1
 800b11e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b120:	e013      	b.n	800b14a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b122:	7dfb      	ldrb	r3, [r7, #23]
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	4413      	add	r3, r2
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	7812      	ldrb	r2, [r2, #0]
 800b12c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	3301      	adds	r3, #1
 800b132:	613b      	str	r3, [r7, #16]
    idx++;
 800b134:	7dfb      	ldrb	r3, [r7, #23]
 800b136:	3301      	adds	r3, #1
 800b138:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b13a:	7dfb      	ldrb	r3, [r7, #23]
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	4413      	add	r3, r2
 800b140:	2200      	movs	r2, #0
 800b142:	701a      	strb	r2, [r3, #0]
    idx++;
 800b144:	7dfb      	ldrb	r3, [r7, #23]
 800b146:	3301      	adds	r3, #1
 800b148:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1e7      	bne.n	800b122 <USBD_GetString+0x52>
 800b152:	e000      	b.n	800b156 <USBD_GetString+0x86>
    return;
 800b154:	bf00      	nop
  }
}
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b164:	2300      	movs	r3, #0
 800b166:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b16c:	e005      	b.n	800b17a <USBD_GetLen+0x1e>
  {
    len++;
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
 800b170:	3301      	adds	r3, #1
 800b172:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	3301      	adds	r3, #1
 800b178:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1f5      	bne.n	800b16e <USBD_GetLen+0x12>
  }

  return len;
 800b182:	7bfb      	ldrb	r3, [r7, #15]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3714      	adds	r7, #20
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2202      	movs	r2, #2
 800b1a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f000 fced 	bl	800bb96 <USBD_LL_Transmit>

  return USBD_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b084      	sub	sp, #16
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	60b9      	str	r1, [r7, #8]
 800b1d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f000 fcdc 	bl	800bb96 <USBD_LL_Transmit>

  return USBD_OK;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2203      	movs	r2, #3
 800b1f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	2100      	movs	r1, #0
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f000 fce0 	bl	800bbd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b084      	sub	sp, #16
 800b226:	af00      	add	r7, sp, #0
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	2100      	movs	r1, #0
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 fccf 	bl	800bbd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2204      	movs	r2, #4
 800b250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b254:	2300      	movs	r3, #0
 800b256:	2200      	movs	r2, #0
 800b258:	2100      	movs	r1, #0
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fc9b 	bl	800bb96 <USBD_LL_Transmit>

  return USBD_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b082      	sub	sp, #8
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2205      	movs	r2, #5
 800b276:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b27a:	2300      	movs	r3, #0
 800b27c:	2200      	movs	r2, #0
 800b27e:	2100      	movs	r1, #0
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fca9 	bl	800bbd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800b294:	2201      	movs	r2, #1
 800b296:	4912      	ldr	r1, [pc, #72]	; (800b2e0 <MX_USB_DEVICE_Init+0x50>)
 800b298:	4812      	ldr	r0, [pc, #72]	; (800b2e4 <MX_USB_DEVICE_Init+0x54>)
 800b29a:	f7fe fd07 	bl	8009cac <USBD_Init>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d001      	beq.n	800b2a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b2a4:	f7f6 f98a 	bl	80015bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800b2a8:	490f      	ldr	r1, [pc, #60]	; (800b2e8 <MX_USB_DEVICE_Init+0x58>)
 800b2aa:	480e      	ldr	r0, [pc, #56]	; (800b2e4 <MX_USB_DEVICE_Init+0x54>)
 800b2ac:	f7fe fd2e 	bl	8009d0c <USBD_RegisterClass>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b2b6:	f7f6 f981 	bl	80015bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800b2ba:	490c      	ldr	r1, [pc, #48]	; (800b2ec <MX_USB_DEVICE_Init+0x5c>)
 800b2bc:	4809      	ldr	r0, [pc, #36]	; (800b2e4 <MX_USB_DEVICE_Init+0x54>)
 800b2be:	f7fe fc1f 	bl	8009b00 <USBD_CDC_RegisterInterface>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b2c8:	f7f6 f978 	bl	80015bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800b2cc:	4805      	ldr	r0, [pc, #20]	; (800b2e4 <MX_USB_DEVICE_Init+0x54>)
 800b2ce:	f7fe fd53 	bl	8009d78 <USBD_Start>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b2d8:	f7f6 f970 	bl	80015bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b2dc:	bf00      	nop
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	20000128 	.word	0x20000128
 800b2e4:	2000066c 	.word	0x2000066c
 800b2e8:	20000094 	.word	0x20000094
 800b2ec:	20000114 	.word	0x20000114

0800b2f0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	4905      	ldr	r1, [pc, #20]	; (800b30c <CDC_Init_HS+0x1c>)
 800b2f8:	4805      	ldr	r0, [pc, #20]	; (800b310 <CDC_Init_HS+0x20>)
 800b2fa:	f7fe fc1b 	bl	8009b34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800b2fe:	4905      	ldr	r1, [pc, #20]	; (800b314 <CDC_Init_HS+0x24>)
 800b300:	4803      	ldr	r0, [pc, #12]	; (800b310 <CDC_Init_HS+0x20>)
 800b302:	f7fe fc39 	bl	8009b78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b306:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800b308:	4618      	mov	r0, r3
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	20001148 	.word	0x20001148
 800b310:	2000066c 	.word	0x2000066c
 800b314:	20000948 	.word	0x20000948

0800b318 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800b318:	b480      	push	{r7}
 800b31a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800b31c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800b31e:	4618      	mov	r0, r3
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	4603      	mov	r3, r0
 800b330:	6039      	str	r1, [r7, #0]
 800b332:	71fb      	strb	r3, [r7, #7]
 800b334:	4613      	mov	r3, r2
 800b336:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800b338:	79fb      	ldrb	r3, [r7, #7]
 800b33a:	2b23      	cmp	r3, #35	; 0x23
 800b33c:	d84a      	bhi.n	800b3d4 <CDC_Control_HS+0xac>
 800b33e:	a201      	add	r2, pc, #4	; (adr r2, 800b344 <CDC_Control_HS+0x1c>)
 800b340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b344:	0800b3d5 	.word	0x0800b3d5
 800b348:	0800b3d5 	.word	0x0800b3d5
 800b34c:	0800b3d5 	.word	0x0800b3d5
 800b350:	0800b3d5 	.word	0x0800b3d5
 800b354:	0800b3d5 	.word	0x0800b3d5
 800b358:	0800b3d5 	.word	0x0800b3d5
 800b35c:	0800b3d5 	.word	0x0800b3d5
 800b360:	0800b3d5 	.word	0x0800b3d5
 800b364:	0800b3d5 	.word	0x0800b3d5
 800b368:	0800b3d5 	.word	0x0800b3d5
 800b36c:	0800b3d5 	.word	0x0800b3d5
 800b370:	0800b3d5 	.word	0x0800b3d5
 800b374:	0800b3d5 	.word	0x0800b3d5
 800b378:	0800b3d5 	.word	0x0800b3d5
 800b37c:	0800b3d5 	.word	0x0800b3d5
 800b380:	0800b3d5 	.word	0x0800b3d5
 800b384:	0800b3d5 	.word	0x0800b3d5
 800b388:	0800b3d5 	.word	0x0800b3d5
 800b38c:	0800b3d5 	.word	0x0800b3d5
 800b390:	0800b3d5 	.word	0x0800b3d5
 800b394:	0800b3d5 	.word	0x0800b3d5
 800b398:	0800b3d5 	.word	0x0800b3d5
 800b39c:	0800b3d5 	.word	0x0800b3d5
 800b3a0:	0800b3d5 	.word	0x0800b3d5
 800b3a4:	0800b3d5 	.word	0x0800b3d5
 800b3a8:	0800b3d5 	.word	0x0800b3d5
 800b3ac:	0800b3d5 	.word	0x0800b3d5
 800b3b0:	0800b3d5 	.word	0x0800b3d5
 800b3b4:	0800b3d5 	.word	0x0800b3d5
 800b3b8:	0800b3d5 	.word	0x0800b3d5
 800b3bc:	0800b3d5 	.word	0x0800b3d5
 800b3c0:	0800b3d5 	.word	0x0800b3d5
 800b3c4:	0800b3d5 	.word	0x0800b3d5
 800b3c8:	0800b3d5 	.word	0x0800b3d5
 800b3cc:	0800b3d5 	.word	0x0800b3d5
 800b3d0:	0800b3d5 	.word	0x0800b3d5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b3d4:	bf00      	nop
  }

  return (USBD_OK);
 800b3d6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800b3ee:	6879      	ldr	r1, [r7, #4]
 800b3f0:	4805      	ldr	r0, [pc, #20]	; (800b408 <CDC_Receive_HS+0x24>)
 800b3f2:	f7fe fbc1 	bl	8009b78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800b3f6:	4804      	ldr	r0, [pc, #16]	; (800b408 <CDC_Receive_HS+0x24>)
 800b3f8:	f7fe fc22 	bl	8009c40 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b3fc:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	2000066c 	.word	0x2000066c

0800b40c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	460b      	mov	r3, r1
 800b416:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800b41c:	4b0d      	ldr	r3, [pc, #52]	; (800b454 <CDC_Transmit_HS+0x48>)
 800b41e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b422:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800b42e:	2301      	movs	r3, #1
 800b430:	e00b      	b.n	800b44a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800b432:	887b      	ldrh	r3, [r7, #2]
 800b434:	461a      	mov	r2, r3
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	4806      	ldr	r0, [pc, #24]	; (800b454 <CDC_Transmit_HS+0x48>)
 800b43a:	f7fe fb7b 	bl	8009b34 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800b43e:	4805      	ldr	r0, [pc, #20]	; (800b454 <CDC_Transmit_HS+0x48>)
 800b440:	f7fe fbb8 	bl	8009bb4 <USBD_CDC_TransmitPacket>
 800b444:	4603      	mov	r3, r0
 800b446:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800b448:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	2000066c 	.word	0x2000066c

0800b458 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b458:	b480      	push	{r7}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	4613      	mov	r3, r2
 800b464:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b466:	2300      	movs	r3, #0
 800b468:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800b46a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	371c      	adds	r7, #28
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
	...

0800b47c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	4603      	mov	r3, r0
 800b484:	6039      	str	r1, [r7, #0]
 800b486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	2212      	movs	r2, #18
 800b48c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800b48e:	4b03      	ldr	r3, [pc, #12]	; (800b49c <USBD_HS_DeviceDescriptor+0x20>)
}
 800b490:	4618      	mov	r0, r3
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr
 800b49c:	20000144 	.word	0x20000144

0800b4a0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	6039      	str	r1, [r7, #0]
 800b4aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	2204      	movs	r2, #4
 800b4b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b4b2:	4b03      	ldr	r3, [pc, #12]	; (800b4c0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	20000158 	.word	0x20000158

0800b4c4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	6039      	str	r1, [r7, #0]
 800b4ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4d0:	79fb      	ldrb	r3, [r7, #7]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d105      	bne.n	800b4e2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	4907      	ldr	r1, [pc, #28]	; (800b4f8 <USBD_HS_ProductStrDescriptor+0x34>)
 800b4da:	4808      	ldr	r0, [pc, #32]	; (800b4fc <USBD_HS_ProductStrDescriptor+0x38>)
 800b4dc:	f7ff fdf8 	bl	800b0d0 <USBD_GetString>
 800b4e0:	e004      	b.n	800b4ec <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	4904      	ldr	r1, [pc, #16]	; (800b4f8 <USBD_HS_ProductStrDescriptor+0x34>)
 800b4e6:	4805      	ldr	r0, [pc, #20]	; (800b4fc <USBD_HS_ProductStrDescriptor+0x38>)
 800b4e8:	f7ff fdf2 	bl	800b0d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4ec:	4b02      	ldr	r3, [pc, #8]	; (800b4f8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20001948 	.word	0x20001948
 800b4fc:	0800eb24 	.word	0x0800eb24

0800b500 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	4603      	mov	r3, r0
 800b508:	6039      	str	r1, [r7, #0]
 800b50a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b50c:	683a      	ldr	r2, [r7, #0]
 800b50e:	4904      	ldr	r1, [pc, #16]	; (800b520 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800b510:	4804      	ldr	r0, [pc, #16]	; (800b524 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800b512:	f7ff fddd 	bl	800b0d0 <USBD_GetString>
  return USBD_StrDesc;
 800b516:	4b02      	ldr	r3, [pc, #8]	; (800b520 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	20001948 	.word	0x20001948
 800b524:	0800eb3c 	.word	0x0800eb3c

0800b528 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	6039      	str	r1, [r7, #0]
 800b532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	221a      	movs	r2, #26
 800b538:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b53a:	f000 f843 	bl	800b5c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b53e:	4b02      	ldr	r3, [pc, #8]	; (800b548 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800b540:	4618      	mov	r0, r3
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	2000015c 	.word	0x2000015c

0800b54c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	4603      	mov	r3, r0
 800b554:	6039      	str	r1, [r7, #0]
 800b556:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b558:	79fb      	ldrb	r3, [r7, #7]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d105      	bne.n	800b56a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	4907      	ldr	r1, [pc, #28]	; (800b580 <USBD_HS_ConfigStrDescriptor+0x34>)
 800b562:	4808      	ldr	r0, [pc, #32]	; (800b584 <USBD_HS_ConfigStrDescriptor+0x38>)
 800b564:	f7ff fdb4 	bl	800b0d0 <USBD_GetString>
 800b568:	e004      	b.n	800b574 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	4904      	ldr	r1, [pc, #16]	; (800b580 <USBD_HS_ConfigStrDescriptor+0x34>)
 800b56e:	4805      	ldr	r0, [pc, #20]	; (800b584 <USBD_HS_ConfigStrDescriptor+0x38>)
 800b570:	f7ff fdae 	bl	800b0d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b574:	4b02      	ldr	r3, [pc, #8]	; (800b580 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800b576:	4618      	mov	r0, r3
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	20001948 	.word	0x20001948
 800b584:	0800eb50 	.word	0x0800eb50

0800b588 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	4603      	mov	r3, r0
 800b590:	6039      	str	r1, [r7, #0]
 800b592:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b594:	79fb      	ldrb	r3, [r7, #7]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d105      	bne.n	800b5a6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	4907      	ldr	r1, [pc, #28]	; (800b5bc <USBD_HS_InterfaceStrDescriptor+0x34>)
 800b59e:	4808      	ldr	r0, [pc, #32]	; (800b5c0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800b5a0:	f7ff fd96 	bl	800b0d0 <USBD_GetString>
 800b5a4:	e004      	b.n	800b5b0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	4904      	ldr	r1, [pc, #16]	; (800b5bc <USBD_HS_InterfaceStrDescriptor+0x34>)
 800b5aa:	4805      	ldr	r0, [pc, #20]	; (800b5c0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800b5ac:	f7ff fd90 	bl	800b0d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5b0:	4b02      	ldr	r3, [pc, #8]	; (800b5bc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	20001948 	.word	0x20001948
 800b5c0:	0800eb5c 	.word	0x0800eb5c

0800b5c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b5ca:	4b0f      	ldr	r3, [pc, #60]	; (800b608 <Get_SerialNum+0x44>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b5d0:	4b0e      	ldr	r3, [pc, #56]	; (800b60c <Get_SerialNum+0x48>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b5d6:	4b0e      	ldr	r3, [pc, #56]	; (800b610 <Get_SerialNum+0x4c>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d009      	beq.n	800b5fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b5ea:	2208      	movs	r2, #8
 800b5ec:	4909      	ldr	r1, [pc, #36]	; (800b614 <Get_SerialNum+0x50>)
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f000 f814 	bl	800b61c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b5f4:	2204      	movs	r2, #4
 800b5f6:	4908      	ldr	r1, [pc, #32]	; (800b618 <Get_SerialNum+0x54>)
 800b5f8:	68b8      	ldr	r0, [r7, #8]
 800b5fa:	f000 f80f 	bl	800b61c <IntToUnicode>
  }
}
 800b5fe:	bf00      	nop
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	1fff7a10 	.word	0x1fff7a10
 800b60c:	1fff7a14 	.word	0x1fff7a14
 800b610:	1fff7a18 	.word	0x1fff7a18
 800b614:	2000015e 	.word	0x2000015e
 800b618:	2000016e 	.word	0x2000016e

0800b61c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b087      	sub	sp, #28
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	4613      	mov	r3, r2
 800b628:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b62e:	2300      	movs	r3, #0
 800b630:	75fb      	strb	r3, [r7, #23]
 800b632:	e027      	b.n	800b684 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	0f1b      	lsrs	r3, r3, #28
 800b638:	2b09      	cmp	r3, #9
 800b63a:	d80b      	bhi.n	800b654 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	0f1b      	lsrs	r3, r3, #28
 800b640:	b2da      	uxtb	r2, r3
 800b642:	7dfb      	ldrb	r3, [r7, #23]
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	4619      	mov	r1, r3
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	440b      	add	r3, r1
 800b64c:	3230      	adds	r2, #48	; 0x30
 800b64e:	b2d2      	uxtb	r2, r2
 800b650:	701a      	strb	r2, [r3, #0]
 800b652:	e00a      	b.n	800b66a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	0f1b      	lsrs	r3, r3, #28
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	7dfb      	ldrb	r3, [r7, #23]
 800b65c:	005b      	lsls	r3, r3, #1
 800b65e:	4619      	mov	r1, r3
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	440b      	add	r3, r1
 800b664:	3237      	adds	r2, #55	; 0x37
 800b666:	b2d2      	uxtb	r2, r2
 800b668:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	011b      	lsls	r3, r3, #4
 800b66e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b670:	7dfb      	ldrb	r3, [r7, #23]
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	3301      	adds	r3, #1
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	4413      	add	r3, r2
 800b67a:	2200      	movs	r2, #0
 800b67c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	3301      	adds	r3, #1
 800b682:	75fb      	strb	r3, [r7, #23]
 800b684:	7dfa      	ldrb	r2, [r7, #23]
 800b686:	79fb      	ldrb	r3, [r7, #7]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d3d3      	bcc.n	800b634 <IntToUnicode+0x18>
  }
}
 800b68c:	bf00      	nop
 800b68e:	bf00      	nop
 800b690:	371c      	adds	r7, #28
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
	...

0800b69c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b08a      	sub	sp, #40	; 0x28
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6a4:	f107 0314 	add.w	r3, r7, #20
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	605a      	str	r2, [r3, #4]
 800b6ae:	609a      	str	r2, [r3, #8]
 800b6b0:	60da      	str	r2, [r3, #12]
 800b6b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a1d      	ldr	r2, [pc, #116]	; (800b730 <HAL_PCD_MspInit+0x94>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d134      	bne.n	800b728 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b6be:	2300      	movs	r3, #0
 800b6c0:	613b      	str	r3, [r7, #16]
 800b6c2:	4b1c      	ldr	r3, [pc, #112]	; (800b734 <HAL_PCD_MspInit+0x98>)
 800b6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c6:	4a1b      	ldr	r2, [pc, #108]	; (800b734 <HAL_PCD_MspInit+0x98>)
 800b6c8:	f043 0302 	orr.w	r3, r3, #2
 800b6cc:	6313      	str	r3, [r2, #48]	; 0x30
 800b6ce:	4b19      	ldr	r3, [pc, #100]	; (800b734 <HAL_PCD_MspInit+0x98>)
 800b6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d2:	f003 0302 	and.w	r3, r3, #2
 800b6d6:	613b      	str	r3, [r7, #16]
 800b6d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800b6da:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800b6de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800b6ec:	230c      	movs	r3, #12
 800b6ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b6f0:	f107 0314 	add.w	r3, r7, #20
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4810      	ldr	r0, [pc, #64]	; (800b738 <HAL_PCD_MspInit+0x9c>)
 800b6f8:	f7f8 fbc8 	bl	8003e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	60fb      	str	r3, [r7, #12]
 800b700:	4b0c      	ldr	r3, [pc, #48]	; (800b734 <HAL_PCD_MspInit+0x98>)
 800b702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b704:	4a0b      	ldr	r2, [pc, #44]	; (800b734 <HAL_PCD_MspInit+0x98>)
 800b706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b70a:	6313      	str	r3, [r2, #48]	; 0x30
 800b70c:	4b09      	ldr	r3, [pc, #36]	; (800b734 <HAL_PCD_MspInit+0x98>)
 800b70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b714:	60fb      	str	r3, [r7, #12]
 800b716:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800b718:	2200      	movs	r2, #0
 800b71a:	2100      	movs	r1, #0
 800b71c:	204d      	movs	r0, #77	; 0x4d
 800b71e:	f7f7 ff2a 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b722:	204d      	movs	r0, #77	; 0x4d
 800b724:	f7f7 ff43 	bl	80035ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b728:	bf00      	nop
 800b72a:	3728      	adds	r7, #40	; 0x28
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	40040000 	.word	0x40040000
 800b734:	40023800 	.word	0x40023800
 800b738:	40020400 	.word	0x40020400

0800b73c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b750:	4619      	mov	r1, r3
 800b752:	4610      	mov	r0, r2
 800b754:	f7fe fb5d 	bl	8009e12 <USBD_LL_SetupStage>
}
 800b758:	bf00      	nop
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	460b      	mov	r3, r1
 800b76a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b772:	78fa      	ldrb	r2, [r7, #3]
 800b774:	6879      	ldr	r1, [r7, #4]
 800b776:	4613      	mov	r3, r2
 800b778:	00db      	lsls	r3, r3, #3
 800b77a:	4413      	add	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	440b      	add	r3, r1
 800b780:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	78fb      	ldrb	r3, [r7, #3]
 800b788:	4619      	mov	r1, r3
 800b78a:	f7fe fb97 	bl	8009ebc <USBD_LL_DataOutStage>
}
 800b78e:	bf00      	nop
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b082      	sub	sp, #8
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
 800b79e:	460b      	mov	r3, r1
 800b7a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b7a8:	78fa      	ldrb	r2, [r7, #3]
 800b7aa:	6879      	ldr	r1, [r7, #4]
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	00db      	lsls	r3, r3, #3
 800b7b0:	4413      	add	r3, r2
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	440b      	add	r3, r1
 800b7b6:	334c      	adds	r3, #76	; 0x4c
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	78fb      	ldrb	r3, [r7, #3]
 800b7bc:	4619      	mov	r1, r3
 800b7be:	f7fe fc30 	bl	800a022 <USBD_LL_DataInStage>
}
 800b7c2:	bf00      	nop
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b082      	sub	sp, #8
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7fe fd64 	bl	800a2a6 <USBD_LL_SOF>
}
 800b7de:	bf00      	nop
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b084      	sub	sp, #16
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d102      	bne.n	800b800 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	73fb      	strb	r3, [r7, #15]
 800b7fe:	e008      	b.n	800b812 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	2b02      	cmp	r3, #2
 800b806:	d102      	bne.n	800b80e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b808:	2301      	movs	r3, #1
 800b80a:	73fb      	strb	r3, [r7, #15]
 800b80c:	e001      	b.n	800b812 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b80e:	f7f5 fed5 	bl	80015bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b818:	7bfa      	ldrb	r2, [r7, #15]
 800b81a:	4611      	mov	r1, r2
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7fe fd04 	bl	800a22a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b828:	4618      	mov	r0, r3
 800b82a:	f7fe fcac 	bl	800a186 <USBD_LL_Reset>
}
 800b82e:	bf00      	nop
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
	...

0800b838 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b846:	4618      	mov	r0, r3
 800b848:	f7fe fcff 	bl	800a24a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	6812      	ldr	r2, [r2, #0]
 800b85a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b85e:	f043 0301 	orr.w	r3, r3, #1
 800b862:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a1b      	ldr	r3, [r3, #32]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d005      	beq.n	800b878 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b86c:	4b04      	ldr	r3, [pc, #16]	; (800b880 <HAL_PCD_SuspendCallback+0x48>)
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	4a03      	ldr	r2, [pc, #12]	; (800b880 <HAL_PCD_SuspendCallback+0x48>)
 800b872:	f043 0306 	orr.w	r3, r3, #6
 800b876:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b878:	bf00      	nop
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	e000ed00 	.word	0xe000ed00

0800b884 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b892:	4618      	mov	r0, r3
 800b894:	f7fe fcef 	bl	800a276 <USBD_LL_Resume>
}
 800b898:	bf00      	nop
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8b2:	78fa      	ldrb	r2, [r7, #3]
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fe fd47 	bl	800a34a <USBD_LL_IsoOUTIncomplete>
}
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8d6:	78fa      	ldrb	r2, [r7, #3]
 800b8d8:	4611      	mov	r1, r2
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fe fd03 	bl	800a2e6 <USBD_LL_IsoINIncomplete>
}
 800b8e0:	bf00      	nop
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7fe fd59 	bl	800a3ae <USBD_LL_DevConnected>
}
 800b8fc:	bf00      	nop
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b912:	4618      	mov	r0, r3
 800b914:	f7fe fd56 	bl	800a3c4 <USBD_LL_DevDisconnected>
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d140      	bne.n	800b9b2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b930:	4a22      	ldr	r2, [pc, #136]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a20      	ldr	r2, [pc, #128]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b93c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b940:	4b1e      	ldr	r3, [pc, #120]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b942:	4a1f      	ldr	r2, [pc, #124]	; (800b9c0 <USBD_LL_Init+0xa0>)
 800b944:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800b946:	4b1d      	ldr	r3, [pc, #116]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b948:	2206      	movs	r2, #6
 800b94a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800b94c:	4b1b      	ldr	r3, [pc, #108]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b94e:	2202      	movs	r2, #2
 800b950:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b952:	4b1a      	ldr	r3, [pc, #104]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b954:	2200      	movs	r2, #0
 800b956:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b958:	4b18      	ldr	r3, [pc, #96]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b95a:	2202      	movs	r2, #2
 800b95c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b95e:	4b17      	ldr	r3, [pc, #92]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b960:	2200      	movs	r2, #0
 800b962:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b964:	4b15      	ldr	r3, [pc, #84]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b966:	2200      	movs	r2, #0
 800b968:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b96a:	4b14      	ldr	r3, [pc, #80]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b970:	4b12      	ldr	r3, [pc, #72]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b972:	2200      	movs	r2, #0
 800b974:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b976:	4b11      	ldr	r3, [pc, #68]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b978:	2200      	movs	r2, #0
 800b97a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b97c:	4b0f      	ldr	r3, [pc, #60]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b97e:	2200      	movs	r2, #0
 800b980:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b982:	480e      	ldr	r0, [pc, #56]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b984:	f7f9 f82d 	bl	80049e2 <HAL_PCD_Init>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b98e:	f7f5 fe15 	bl	80015bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b992:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b996:	4809      	ldr	r0, [pc, #36]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b998:	f7fa fa83 	bl	8005ea2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b99c:	2280      	movs	r2, #128	; 0x80
 800b99e:	2100      	movs	r1, #0
 800b9a0:	4806      	ldr	r0, [pc, #24]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b9a2:	f7fa fa37 	bl	8005e14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b9a6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800b9aa:	2101      	movs	r1, #1
 800b9ac:	4803      	ldr	r0, [pc, #12]	; (800b9bc <USBD_LL_Init+0x9c>)
 800b9ae:	f7fa fa31 	bl	8005e14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20001b48 	.word	0x20001b48
 800b9c0:	40040000 	.word	0x40040000

0800b9c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7f9 f91e 	bl	8004c1c <HAL_PCD_Start>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f000 f942 	bl	800bc70 <USBD_Get_USB_Status>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b084      	sub	sp, #16
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
 800ba02:	4608      	mov	r0, r1
 800ba04:	4611      	mov	r1, r2
 800ba06:	461a      	mov	r2, r3
 800ba08:	4603      	mov	r3, r0
 800ba0a:	70fb      	strb	r3, [r7, #3]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	70bb      	strb	r3, [r7, #2]
 800ba10:	4613      	mov	r3, r2
 800ba12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ba22:	78bb      	ldrb	r3, [r7, #2]
 800ba24:	883a      	ldrh	r2, [r7, #0]
 800ba26:	78f9      	ldrb	r1, [r7, #3]
 800ba28:	f7f9 fdef 	bl	800560a <HAL_PCD_EP_Open>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f000 f91c 	bl	800bc70 <USBD_Get_USB_Status>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b084      	sub	sp, #16
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	460b      	mov	r3, r1
 800ba50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba56:	2300      	movs	r3, #0
 800ba58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba60:	78fa      	ldrb	r2, [r7, #3]
 800ba62:	4611      	mov	r1, r2
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7f9 fe38 	bl	80056da <HAL_PCD_EP_Close>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba6e:	7bfb      	ldrb	r3, [r7, #15]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f000 f8fd 	bl	800bc70 <USBD_Get_USB_Status>
 800ba76:	4603      	mov	r3, r0
 800ba78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba90:	2300      	movs	r3, #0
 800ba92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba9e:	78fa      	ldrb	r2, [r7, #3]
 800baa0:	4611      	mov	r1, r2
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7f9 ff10 	bl	80058c8 <HAL_PCD_EP_SetStall>
 800baa8:	4603      	mov	r3, r0
 800baaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baac:	7bfb      	ldrb	r3, [r7, #15]
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 f8de 	bl	800bc70 <USBD_Get_USB_Status>
 800bab4:	4603      	mov	r3, r0
 800bab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bab8:	7bbb      	ldrb	r3, [r7, #14]
}
 800baba:	4618      	mov	r0, r3
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b084      	sub	sp, #16
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
 800baca:	460b      	mov	r3, r1
 800bacc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bace:	2300      	movs	r3, #0
 800bad0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bad2:	2300      	movs	r3, #0
 800bad4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800badc:	78fa      	ldrb	r2, [r7, #3]
 800bade:	4611      	mov	r1, r2
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7f9 ff55 	bl	8005990 <HAL_PCD_EP_ClrStall>
 800bae6:	4603      	mov	r3, r0
 800bae8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baea:	7bfb      	ldrb	r3, [r7, #15]
 800baec:	4618      	mov	r0, r3
 800baee:	f000 f8bf 	bl	800bc70 <USBD_Get_USB_Status>
 800baf2:	4603      	mov	r3, r0
 800baf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b085      	sub	sp, #20
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	da0b      	bge.n	800bb34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb1c:	78fb      	ldrb	r3, [r7, #3]
 800bb1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb22:	68f9      	ldr	r1, [r7, #12]
 800bb24:	4613      	mov	r3, r2
 800bb26:	00db      	lsls	r3, r3, #3
 800bb28:	4413      	add	r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	440b      	add	r3, r1
 800bb2e:	333e      	adds	r3, #62	; 0x3e
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	e00b      	b.n	800bb4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bb34:	78fb      	ldrb	r3, [r7, #3]
 800bb36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb3a:	68f9      	ldr	r1, [r7, #12]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	00db      	lsls	r3, r3, #3
 800bb40:	4413      	add	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	440b      	add	r3, r1
 800bb46:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bb4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	460b      	mov	r3, r1
 800bb62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb72:	78fa      	ldrb	r2, [r7, #3]
 800bb74:	4611      	mov	r1, r2
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7f9 fd22 	bl	80055c0 <HAL_PCD_SetAddress>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f000 f874 	bl	800bc70 <USBD_Get_USB_Status>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b086      	sub	sp, #24
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	60f8      	str	r0, [r7, #12]
 800bb9e:	607a      	str	r2, [r7, #4]
 800bba0:	603b      	str	r3, [r7, #0]
 800bba2:	460b      	mov	r3, r1
 800bba4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bbb4:	7af9      	ldrb	r1, [r7, #11]
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	f7f9 fe3b 	bl	8005834 <HAL_PCD_EP_Transmit>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbc2:	7dfb      	ldrb	r3, [r7, #23]
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f000 f853 	bl	800bc70 <USBD_Get_USB_Status>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbce:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3718      	adds	r7, #24
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	607a      	str	r2, [r7, #4]
 800bbe2:	603b      	str	r3, [r7, #0]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bbf6:	7af9      	ldrb	r1, [r7, #11]
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	f7f9 fdb7 	bl	800576e <HAL_PCD_EP_Receive>
 800bc00:	4603      	mov	r3, r0
 800bc02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc04:	7dfb      	ldrb	r3, [r7, #23]
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 f832 	bl	800bc70 <USBD_Get_USB_Status>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc10:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3718      	adds	r7, #24
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b082      	sub	sp, #8
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	460b      	mov	r3, r1
 800bc24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc2c:	78fa      	ldrb	r2, [r7, #3]
 800bc2e:	4611      	mov	r1, r2
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7f9 fde7 	bl	8005804 <HAL_PCD_EP_GetRxCount>
 800bc36:	4603      	mov	r3, r0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc48:	4b03      	ldr	r3, [pc, #12]	; (800bc58 <USBD_static_malloc+0x18>)
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	370c      	adds	r7, #12
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	20002054 	.word	0x20002054

0800bc5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]

}
 800bc64:	bf00      	nop
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	4603      	mov	r3, r0
 800bc78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc7e:	79fb      	ldrb	r3, [r7, #7]
 800bc80:	2b03      	cmp	r3, #3
 800bc82:	d817      	bhi.n	800bcb4 <USBD_Get_USB_Status+0x44>
 800bc84:	a201      	add	r2, pc, #4	; (adr r2, 800bc8c <USBD_Get_USB_Status+0x1c>)
 800bc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8a:	bf00      	nop
 800bc8c:	0800bc9d 	.word	0x0800bc9d
 800bc90:	0800bca3 	.word	0x0800bca3
 800bc94:	0800bca9 	.word	0x0800bca9
 800bc98:	0800bcaf 	.word	0x0800bcaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bca0:	e00b      	b.n	800bcba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bca2:	2303      	movs	r3, #3
 800bca4:	73fb      	strb	r3, [r7, #15]
    break;
 800bca6:	e008      	b.n	800bcba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	73fb      	strb	r3, [r7, #15]
    break;
 800bcac:	e005      	b.n	800bcba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcae:	2303      	movs	r3, #3
 800bcb0:	73fb      	strb	r3, [r7, #15]
    break;
 800bcb2:	e002      	b.n	800bcba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	73fb      	strb	r3, [r7, #15]
    break;
 800bcb8:	bf00      	nop
  }
  return usb_status;
 800bcba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3714      	adds	r7, #20
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <__errno>:
 800bcc8:	4b01      	ldr	r3, [pc, #4]	; (800bcd0 <__errno+0x8>)
 800bcca:	6818      	ldr	r0, [r3, #0]
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	20000178 	.word	0x20000178

0800bcd4 <__libc_init_array>:
 800bcd4:	b570      	push	{r4, r5, r6, lr}
 800bcd6:	4d0d      	ldr	r5, [pc, #52]	; (800bd0c <__libc_init_array+0x38>)
 800bcd8:	4c0d      	ldr	r4, [pc, #52]	; (800bd10 <__libc_init_array+0x3c>)
 800bcda:	1b64      	subs	r4, r4, r5
 800bcdc:	10a4      	asrs	r4, r4, #2
 800bcde:	2600      	movs	r6, #0
 800bce0:	42a6      	cmp	r6, r4
 800bce2:	d109      	bne.n	800bcf8 <__libc_init_array+0x24>
 800bce4:	4d0b      	ldr	r5, [pc, #44]	; (800bd14 <__libc_init_array+0x40>)
 800bce6:	4c0c      	ldr	r4, [pc, #48]	; (800bd18 <__libc_init_array+0x44>)
 800bce8:	f002 ff02 	bl	800eaf0 <_init>
 800bcec:	1b64      	subs	r4, r4, r5
 800bcee:	10a4      	asrs	r4, r4, #2
 800bcf0:	2600      	movs	r6, #0
 800bcf2:	42a6      	cmp	r6, r4
 800bcf4:	d105      	bne.n	800bd02 <__libc_init_array+0x2e>
 800bcf6:	bd70      	pop	{r4, r5, r6, pc}
 800bcf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcfc:	4798      	blx	r3
 800bcfe:	3601      	adds	r6, #1
 800bd00:	e7ee      	b.n	800bce0 <__libc_init_array+0xc>
 800bd02:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd06:	4798      	blx	r3
 800bd08:	3601      	adds	r6, #1
 800bd0a:	e7f2      	b.n	800bcf2 <__libc_init_array+0x1e>
 800bd0c:	08010a1c 	.word	0x08010a1c
 800bd10:	08010a1c 	.word	0x08010a1c
 800bd14:	08010a1c 	.word	0x08010a1c
 800bd18:	08010a20 	.word	0x08010a20

0800bd1c <memset>:
 800bd1c:	4402      	add	r2, r0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d100      	bne.n	800bd26 <memset+0xa>
 800bd24:	4770      	bx	lr
 800bd26:	f803 1b01 	strb.w	r1, [r3], #1
 800bd2a:	e7f9      	b.n	800bd20 <memset+0x4>

0800bd2c <__cvt>:
 800bd2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd30:	ec55 4b10 	vmov	r4, r5, d0
 800bd34:	2d00      	cmp	r5, #0
 800bd36:	460e      	mov	r6, r1
 800bd38:	4619      	mov	r1, r3
 800bd3a:	462b      	mov	r3, r5
 800bd3c:	bfbb      	ittet	lt
 800bd3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bd42:	461d      	movlt	r5, r3
 800bd44:	2300      	movge	r3, #0
 800bd46:	232d      	movlt	r3, #45	; 0x2d
 800bd48:	700b      	strb	r3, [r1, #0]
 800bd4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd50:	4691      	mov	r9, r2
 800bd52:	f023 0820 	bic.w	r8, r3, #32
 800bd56:	bfbc      	itt	lt
 800bd58:	4622      	movlt	r2, r4
 800bd5a:	4614      	movlt	r4, r2
 800bd5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd60:	d005      	beq.n	800bd6e <__cvt+0x42>
 800bd62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bd66:	d100      	bne.n	800bd6a <__cvt+0x3e>
 800bd68:	3601      	adds	r6, #1
 800bd6a:	2102      	movs	r1, #2
 800bd6c:	e000      	b.n	800bd70 <__cvt+0x44>
 800bd6e:	2103      	movs	r1, #3
 800bd70:	ab03      	add	r3, sp, #12
 800bd72:	9301      	str	r3, [sp, #4]
 800bd74:	ab02      	add	r3, sp, #8
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	ec45 4b10 	vmov	d0, r4, r5
 800bd7c:	4653      	mov	r3, sl
 800bd7e:	4632      	mov	r2, r6
 800bd80:	f000 fcea 	bl	800c758 <_dtoa_r>
 800bd84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd88:	4607      	mov	r7, r0
 800bd8a:	d102      	bne.n	800bd92 <__cvt+0x66>
 800bd8c:	f019 0f01 	tst.w	r9, #1
 800bd90:	d022      	beq.n	800bdd8 <__cvt+0xac>
 800bd92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd96:	eb07 0906 	add.w	r9, r7, r6
 800bd9a:	d110      	bne.n	800bdbe <__cvt+0x92>
 800bd9c:	783b      	ldrb	r3, [r7, #0]
 800bd9e:	2b30      	cmp	r3, #48	; 0x30
 800bda0:	d10a      	bne.n	800bdb8 <__cvt+0x8c>
 800bda2:	2200      	movs	r2, #0
 800bda4:	2300      	movs	r3, #0
 800bda6:	4620      	mov	r0, r4
 800bda8:	4629      	mov	r1, r5
 800bdaa:	f7f4 fe9d 	bl	8000ae8 <__aeabi_dcmpeq>
 800bdae:	b918      	cbnz	r0, 800bdb8 <__cvt+0x8c>
 800bdb0:	f1c6 0601 	rsb	r6, r6, #1
 800bdb4:	f8ca 6000 	str.w	r6, [sl]
 800bdb8:	f8da 3000 	ldr.w	r3, [sl]
 800bdbc:	4499      	add	r9, r3
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	f7f4 fe8f 	bl	8000ae8 <__aeabi_dcmpeq>
 800bdca:	b108      	cbz	r0, 800bdd0 <__cvt+0xa4>
 800bdcc:	f8cd 900c 	str.w	r9, [sp, #12]
 800bdd0:	2230      	movs	r2, #48	; 0x30
 800bdd2:	9b03      	ldr	r3, [sp, #12]
 800bdd4:	454b      	cmp	r3, r9
 800bdd6:	d307      	bcc.n	800bde8 <__cvt+0xbc>
 800bdd8:	9b03      	ldr	r3, [sp, #12]
 800bdda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bddc:	1bdb      	subs	r3, r3, r7
 800bdde:	4638      	mov	r0, r7
 800bde0:	6013      	str	r3, [r2, #0]
 800bde2:	b004      	add	sp, #16
 800bde4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde8:	1c59      	adds	r1, r3, #1
 800bdea:	9103      	str	r1, [sp, #12]
 800bdec:	701a      	strb	r2, [r3, #0]
 800bdee:	e7f0      	b.n	800bdd2 <__cvt+0xa6>

0800bdf0 <__exponent>:
 800bdf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2900      	cmp	r1, #0
 800bdf6:	bfb8      	it	lt
 800bdf8:	4249      	neglt	r1, r1
 800bdfa:	f803 2b02 	strb.w	r2, [r3], #2
 800bdfe:	bfb4      	ite	lt
 800be00:	222d      	movlt	r2, #45	; 0x2d
 800be02:	222b      	movge	r2, #43	; 0x2b
 800be04:	2909      	cmp	r1, #9
 800be06:	7042      	strb	r2, [r0, #1]
 800be08:	dd2a      	ble.n	800be60 <__exponent+0x70>
 800be0a:	f10d 0407 	add.w	r4, sp, #7
 800be0e:	46a4      	mov	ip, r4
 800be10:	270a      	movs	r7, #10
 800be12:	46a6      	mov	lr, r4
 800be14:	460a      	mov	r2, r1
 800be16:	fb91 f6f7 	sdiv	r6, r1, r7
 800be1a:	fb07 1516 	mls	r5, r7, r6, r1
 800be1e:	3530      	adds	r5, #48	; 0x30
 800be20:	2a63      	cmp	r2, #99	; 0x63
 800be22:	f104 34ff 	add.w	r4, r4, #4294967295
 800be26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800be2a:	4631      	mov	r1, r6
 800be2c:	dcf1      	bgt.n	800be12 <__exponent+0x22>
 800be2e:	3130      	adds	r1, #48	; 0x30
 800be30:	f1ae 0502 	sub.w	r5, lr, #2
 800be34:	f804 1c01 	strb.w	r1, [r4, #-1]
 800be38:	1c44      	adds	r4, r0, #1
 800be3a:	4629      	mov	r1, r5
 800be3c:	4561      	cmp	r1, ip
 800be3e:	d30a      	bcc.n	800be56 <__exponent+0x66>
 800be40:	f10d 0209 	add.w	r2, sp, #9
 800be44:	eba2 020e 	sub.w	r2, r2, lr
 800be48:	4565      	cmp	r5, ip
 800be4a:	bf88      	it	hi
 800be4c:	2200      	movhi	r2, #0
 800be4e:	4413      	add	r3, r2
 800be50:	1a18      	subs	r0, r3, r0
 800be52:	b003      	add	sp, #12
 800be54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800be5e:	e7ed      	b.n	800be3c <__exponent+0x4c>
 800be60:	2330      	movs	r3, #48	; 0x30
 800be62:	3130      	adds	r1, #48	; 0x30
 800be64:	7083      	strb	r3, [r0, #2]
 800be66:	70c1      	strb	r1, [r0, #3]
 800be68:	1d03      	adds	r3, r0, #4
 800be6a:	e7f1      	b.n	800be50 <__exponent+0x60>

0800be6c <_printf_float>:
 800be6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be70:	ed2d 8b02 	vpush	{d8}
 800be74:	b08d      	sub	sp, #52	; 0x34
 800be76:	460c      	mov	r4, r1
 800be78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800be7c:	4616      	mov	r6, r2
 800be7e:	461f      	mov	r7, r3
 800be80:	4605      	mov	r5, r0
 800be82:	f001 fa57 	bl	800d334 <_localeconv_r>
 800be86:	f8d0 a000 	ldr.w	sl, [r0]
 800be8a:	4650      	mov	r0, sl
 800be8c:	f7f4 f9b0 	bl	80001f0 <strlen>
 800be90:	2300      	movs	r3, #0
 800be92:	930a      	str	r3, [sp, #40]	; 0x28
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	9305      	str	r3, [sp, #20]
 800be98:	f8d8 3000 	ldr.w	r3, [r8]
 800be9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bea0:	3307      	adds	r3, #7
 800bea2:	f023 0307 	bic.w	r3, r3, #7
 800bea6:	f103 0208 	add.w	r2, r3, #8
 800beaa:	f8c8 2000 	str.w	r2, [r8]
 800beae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800beb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800beba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bebe:	9307      	str	r3, [sp, #28]
 800bec0:	f8cd 8018 	str.w	r8, [sp, #24]
 800bec4:	ee08 0a10 	vmov	s16, r0
 800bec8:	4b9f      	ldr	r3, [pc, #636]	; (800c148 <_printf_float+0x2dc>)
 800beca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bece:	f04f 32ff 	mov.w	r2, #4294967295
 800bed2:	f7f4 fe3b 	bl	8000b4c <__aeabi_dcmpun>
 800bed6:	bb88      	cbnz	r0, 800bf3c <_printf_float+0xd0>
 800bed8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bedc:	4b9a      	ldr	r3, [pc, #616]	; (800c148 <_printf_float+0x2dc>)
 800bede:	f04f 32ff 	mov.w	r2, #4294967295
 800bee2:	f7f4 fe15 	bl	8000b10 <__aeabi_dcmple>
 800bee6:	bb48      	cbnz	r0, 800bf3c <_printf_float+0xd0>
 800bee8:	2200      	movs	r2, #0
 800beea:	2300      	movs	r3, #0
 800beec:	4640      	mov	r0, r8
 800beee:	4649      	mov	r1, r9
 800bef0:	f7f4 fe04 	bl	8000afc <__aeabi_dcmplt>
 800bef4:	b110      	cbz	r0, 800befc <_printf_float+0x90>
 800bef6:	232d      	movs	r3, #45	; 0x2d
 800bef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800befc:	4b93      	ldr	r3, [pc, #588]	; (800c14c <_printf_float+0x2e0>)
 800befe:	4894      	ldr	r0, [pc, #592]	; (800c150 <_printf_float+0x2e4>)
 800bf00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bf04:	bf94      	ite	ls
 800bf06:	4698      	movls	r8, r3
 800bf08:	4680      	movhi	r8, r0
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	6123      	str	r3, [r4, #16]
 800bf0e:	9b05      	ldr	r3, [sp, #20]
 800bf10:	f023 0204 	bic.w	r2, r3, #4
 800bf14:	6022      	str	r2, [r4, #0]
 800bf16:	f04f 0900 	mov.w	r9, #0
 800bf1a:	9700      	str	r7, [sp, #0]
 800bf1c:	4633      	mov	r3, r6
 800bf1e:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf20:	4621      	mov	r1, r4
 800bf22:	4628      	mov	r0, r5
 800bf24:	f000 f9d8 	bl	800c2d8 <_printf_common>
 800bf28:	3001      	adds	r0, #1
 800bf2a:	f040 8090 	bne.w	800c04e <_printf_float+0x1e2>
 800bf2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf32:	b00d      	add	sp, #52	; 0x34
 800bf34:	ecbd 8b02 	vpop	{d8}
 800bf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3c:	4642      	mov	r2, r8
 800bf3e:	464b      	mov	r3, r9
 800bf40:	4640      	mov	r0, r8
 800bf42:	4649      	mov	r1, r9
 800bf44:	f7f4 fe02 	bl	8000b4c <__aeabi_dcmpun>
 800bf48:	b140      	cbz	r0, 800bf5c <_printf_float+0xf0>
 800bf4a:	464b      	mov	r3, r9
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	bfbc      	itt	lt
 800bf50:	232d      	movlt	r3, #45	; 0x2d
 800bf52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf56:	487f      	ldr	r0, [pc, #508]	; (800c154 <_printf_float+0x2e8>)
 800bf58:	4b7f      	ldr	r3, [pc, #508]	; (800c158 <_printf_float+0x2ec>)
 800bf5a:	e7d1      	b.n	800bf00 <_printf_float+0x94>
 800bf5c:	6863      	ldr	r3, [r4, #4]
 800bf5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bf62:	9206      	str	r2, [sp, #24]
 800bf64:	1c5a      	adds	r2, r3, #1
 800bf66:	d13f      	bne.n	800bfe8 <_printf_float+0x17c>
 800bf68:	2306      	movs	r3, #6
 800bf6a:	6063      	str	r3, [r4, #4]
 800bf6c:	9b05      	ldr	r3, [sp, #20]
 800bf6e:	6861      	ldr	r1, [r4, #4]
 800bf70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf74:	2300      	movs	r3, #0
 800bf76:	9303      	str	r3, [sp, #12]
 800bf78:	ab0a      	add	r3, sp, #40	; 0x28
 800bf7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bf7e:	ab09      	add	r3, sp, #36	; 0x24
 800bf80:	ec49 8b10 	vmov	d0, r8, r9
 800bf84:	9300      	str	r3, [sp, #0]
 800bf86:	6022      	str	r2, [r4, #0]
 800bf88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	f7ff fecd 	bl	800bd2c <__cvt>
 800bf92:	9b06      	ldr	r3, [sp, #24]
 800bf94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf96:	2b47      	cmp	r3, #71	; 0x47
 800bf98:	4680      	mov	r8, r0
 800bf9a:	d108      	bne.n	800bfae <_printf_float+0x142>
 800bf9c:	1cc8      	adds	r0, r1, #3
 800bf9e:	db02      	blt.n	800bfa6 <_printf_float+0x13a>
 800bfa0:	6863      	ldr	r3, [r4, #4]
 800bfa2:	4299      	cmp	r1, r3
 800bfa4:	dd41      	ble.n	800c02a <_printf_float+0x1be>
 800bfa6:	f1ab 0b02 	sub.w	fp, fp, #2
 800bfaa:	fa5f fb8b 	uxtb.w	fp, fp
 800bfae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bfb2:	d820      	bhi.n	800bff6 <_printf_float+0x18a>
 800bfb4:	3901      	subs	r1, #1
 800bfb6:	465a      	mov	r2, fp
 800bfb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bfbc:	9109      	str	r1, [sp, #36]	; 0x24
 800bfbe:	f7ff ff17 	bl	800bdf0 <__exponent>
 800bfc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfc4:	1813      	adds	r3, r2, r0
 800bfc6:	2a01      	cmp	r2, #1
 800bfc8:	4681      	mov	r9, r0
 800bfca:	6123      	str	r3, [r4, #16]
 800bfcc:	dc02      	bgt.n	800bfd4 <_printf_float+0x168>
 800bfce:	6822      	ldr	r2, [r4, #0]
 800bfd0:	07d2      	lsls	r2, r2, #31
 800bfd2:	d501      	bpl.n	800bfd8 <_printf_float+0x16c>
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	6123      	str	r3, [r4, #16]
 800bfd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d09c      	beq.n	800bf1a <_printf_float+0xae>
 800bfe0:	232d      	movs	r3, #45	; 0x2d
 800bfe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfe6:	e798      	b.n	800bf1a <_printf_float+0xae>
 800bfe8:	9a06      	ldr	r2, [sp, #24]
 800bfea:	2a47      	cmp	r2, #71	; 0x47
 800bfec:	d1be      	bne.n	800bf6c <_printf_float+0x100>
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1bc      	bne.n	800bf6c <_printf_float+0x100>
 800bff2:	2301      	movs	r3, #1
 800bff4:	e7b9      	b.n	800bf6a <_printf_float+0xfe>
 800bff6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bffa:	d118      	bne.n	800c02e <_printf_float+0x1c2>
 800bffc:	2900      	cmp	r1, #0
 800bffe:	6863      	ldr	r3, [r4, #4]
 800c000:	dd0b      	ble.n	800c01a <_printf_float+0x1ae>
 800c002:	6121      	str	r1, [r4, #16]
 800c004:	b913      	cbnz	r3, 800c00c <_printf_float+0x1a0>
 800c006:	6822      	ldr	r2, [r4, #0]
 800c008:	07d0      	lsls	r0, r2, #31
 800c00a:	d502      	bpl.n	800c012 <_printf_float+0x1a6>
 800c00c:	3301      	adds	r3, #1
 800c00e:	440b      	add	r3, r1
 800c010:	6123      	str	r3, [r4, #16]
 800c012:	65a1      	str	r1, [r4, #88]	; 0x58
 800c014:	f04f 0900 	mov.w	r9, #0
 800c018:	e7de      	b.n	800bfd8 <_printf_float+0x16c>
 800c01a:	b913      	cbnz	r3, 800c022 <_printf_float+0x1b6>
 800c01c:	6822      	ldr	r2, [r4, #0]
 800c01e:	07d2      	lsls	r2, r2, #31
 800c020:	d501      	bpl.n	800c026 <_printf_float+0x1ba>
 800c022:	3302      	adds	r3, #2
 800c024:	e7f4      	b.n	800c010 <_printf_float+0x1a4>
 800c026:	2301      	movs	r3, #1
 800c028:	e7f2      	b.n	800c010 <_printf_float+0x1a4>
 800c02a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c030:	4299      	cmp	r1, r3
 800c032:	db05      	blt.n	800c040 <_printf_float+0x1d4>
 800c034:	6823      	ldr	r3, [r4, #0]
 800c036:	6121      	str	r1, [r4, #16]
 800c038:	07d8      	lsls	r0, r3, #31
 800c03a:	d5ea      	bpl.n	800c012 <_printf_float+0x1a6>
 800c03c:	1c4b      	adds	r3, r1, #1
 800c03e:	e7e7      	b.n	800c010 <_printf_float+0x1a4>
 800c040:	2900      	cmp	r1, #0
 800c042:	bfd4      	ite	le
 800c044:	f1c1 0202 	rsble	r2, r1, #2
 800c048:	2201      	movgt	r2, #1
 800c04a:	4413      	add	r3, r2
 800c04c:	e7e0      	b.n	800c010 <_printf_float+0x1a4>
 800c04e:	6823      	ldr	r3, [r4, #0]
 800c050:	055a      	lsls	r2, r3, #21
 800c052:	d407      	bmi.n	800c064 <_printf_float+0x1f8>
 800c054:	6923      	ldr	r3, [r4, #16]
 800c056:	4642      	mov	r2, r8
 800c058:	4631      	mov	r1, r6
 800c05a:	4628      	mov	r0, r5
 800c05c:	47b8      	blx	r7
 800c05e:	3001      	adds	r0, #1
 800c060:	d12c      	bne.n	800c0bc <_printf_float+0x250>
 800c062:	e764      	b.n	800bf2e <_printf_float+0xc2>
 800c064:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c068:	f240 80e0 	bls.w	800c22c <_printf_float+0x3c0>
 800c06c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c070:	2200      	movs	r2, #0
 800c072:	2300      	movs	r3, #0
 800c074:	f7f4 fd38 	bl	8000ae8 <__aeabi_dcmpeq>
 800c078:	2800      	cmp	r0, #0
 800c07a:	d034      	beq.n	800c0e6 <_printf_float+0x27a>
 800c07c:	4a37      	ldr	r2, [pc, #220]	; (800c15c <_printf_float+0x2f0>)
 800c07e:	2301      	movs	r3, #1
 800c080:	4631      	mov	r1, r6
 800c082:	4628      	mov	r0, r5
 800c084:	47b8      	blx	r7
 800c086:	3001      	adds	r0, #1
 800c088:	f43f af51 	beq.w	800bf2e <_printf_float+0xc2>
 800c08c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c090:	429a      	cmp	r2, r3
 800c092:	db02      	blt.n	800c09a <_printf_float+0x22e>
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	07d8      	lsls	r0, r3, #31
 800c098:	d510      	bpl.n	800c0bc <_printf_float+0x250>
 800c09a:	ee18 3a10 	vmov	r3, s16
 800c09e:	4652      	mov	r2, sl
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f af41 	beq.w	800bf2e <_printf_float+0xc2>
 800c0ac:	f04f 0800 	mov.w	r8, #0
 800c0b0:	f104 091a 	add.w	r9, r4, #26
 800c0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	4543      	cmp	r3, r8
 800c0ba:	dc09      	bgt.n	800c0d0 <_printf_float+0x264>
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	079b      	lsls	r3, r3, #30
 800c0c0:	f100 8105 	bmi.w	800c2ce <_printf_float+0x462>
 800c0c4:	68e0      	ldr	r0, [r4, #12]
 800c0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0c8:	4298      	cmp	r0, r3
 800c0ca:	bfb8      	it	lt
 800c0cc:	4618      	movlt	r0, r3
 800c0ce:	e730      	b.n	800bf32 <_printf_float+0xc6>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	464a      	mov	r2, r9
 800c0d4:	4631      	mov	r1, r6
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	47b8      	blx	r7
 800c0da:	3001      	adds	r0, #1
 800c0dc:	f43f af27 	beq.w	800bf2e <_printf_float+0xc2>
 800c0e0:	f108 0801 	add.w	r8, r8, #1
 800c0e4:	e7e6      	b.n	800c0b4 <_printf_float+0x248>
 800c0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	dc39      	bgt.n	800c160 <_printf_float+0x2f4>
 800c0ec:	4a1b      	ldr	r2, [pc, #108]	; (800c15c <_printf_float+0x2f0>)
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	4631      	mov	r1, r6
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	47b8      	blx	r7
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	f43f af19 	beq.w	800bf2e <_printf_float+0xc2>
 800c0fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c100:	4313      	orrs	r3, r2
 800c102:	d102      	bne.n	800c10a <_printf_float+0x29e>
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	07d9      	lsls	r1, r3, #31
 800c108:	d5d8      	bpl.n	800c0bc <_printf_float+0x250>
 800c10a:	ee18 3a10 	vmov	r3, s16
 800c10e:	4652      	mov	r2, sl
 800c110:	4631      	mov	r1, r6
 800c112:	4628      	mov	r0, r5
 800c114:	47b8      	blx	r7
 800c116:	3001      	adds	r0, #1
 800c118:	f43f af09 	beq.w	800bf2e <_printf_float+0xc2>
 800c11c:	f04f 0900 	mov.w	r9, #0
 800c120:	f104 0a1a 	add.w	sl, r4, #26
 800c124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c126:	425b      	negs	r3, r3
 800c128:	454b      	cmp	r3, r9
 800c12a:	dc01      	bgt.n	800c130 <_printf_float+0x2c4>
 800c12c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c12e:	e792      	b.n	800c056 <_printf_float+0x1ea>
 800c130:	2301      	movs	r3, #1
 800c132:	4652      	mov	r2, sl
 800c134:	4631      	mov	r1, r6
 800c136:	4628      	mov	r0, r5
 800c138:	47b8      	blx	r7
 800c13a:	3001      	adds	r0, #1
 800c13c:	f43f aef7 	beq.w	800bf2e <_printf_float+0xc2>
 800c140:	f109 0901 	add.w	r9, r9, #1
 800c144:	e7ee      	b.n	800c124 <_printf_float+0x2b8>
 800c146:	bf00      	nop
 800c148:	7fefffff 	.word	0x7fefffff
 800c14c:	08010640 	.word	0x08010640
 800c150:	08010644 	.word	0x08010644
 800c154:	0801064c 	.word	0x0801064c
 800c158:	08010648 	.word	0x08010648
 800c15c:	08010650 	.word	0x08010650
 800c160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c164:	429a      	cmp	r2, r3
 800c166:	bfa8      	it	ge
 800c168:	461a      	movge	r2, r3
 800c16a:	2a00      	cmp	r2, #0
 800c16c:	4691      	mov	r9, r2
 800c16e:	dc37      	bgt.n	800c1e0 <_printf_float+0x374>
 800c170:	f04f 0b00 	mov.w	fp, #0
 800c174:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c178:	f104 021a 	add.w	r2, r4, #26
 800c17c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c17e:	9305      	str	r3, [sp, #20]
 800c180:	eba3 0309 	sub.w	r3, r3, r9
 800c184:	455b      	cmp	r3, fp
 800c186:	dc33      	bgt.n	800c1f0 <_printf_float+0x384>
 800c188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c18c:	429a      	cmp	r2, r3
 800c18e:	db3b      	blt.n	800c208 <_printf_float+0x39c>
 800c190:	6823      	ldr	r3, [r4, #0]
 800c192:	07da      	lsls	r2, r3, #31
 800c194:	d438      	bmi.n	800c208 <_printf_float+0x39c>
 800c196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c198:	9a05      	ldr	r2, [sp, #20]
 800c19a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c19c:	1a9a      	subs	r2, r3, r2
 800c19e:	eba3 0901 	sub.w	r9, r3, r1
 800c1a2:	4591      	cmp	r9, r2
 800c1a4:	bfa8      	it	ge
 800c1a6:	4691      	movge	r9, r2
 800c1a8:	f1b9 0f00 	cmp.w	r9, #0
 800c1ac:	dc35      	bgt.n	800c21a <_printf_float+0x3ae>
 800c1ae:	f04f 0800 	mov.w	r8, #0
 800c1b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1b6:	f104 0a1a 	add.w	sl, r4, #26
 800c1ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1be:	1a9b      	subs	r3, r3, r2
 800c1c0:	eba3 0309 	sub.w	r3, r3, r9
 800c1c4:	4543      	cmp	r3, r8
 800c1c6:	f77f af79 	ble.w	800c0bc <_printf_float+0x250>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	4652      	mov	r2, sl
 800c1ce:	4631      	mov	r1, r6
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	47b8      	blx	r7
 800c1d4:	3001      	adds	r0, #1
 800c1d6:	f43f aeaa 	beq.w	800bf2e <_printf_float+0xc2>
 800c1da:	f108 0801 	add.w	r8, r8, #1
 800c1de:	e7ec      	b.n	800c1ba <_printf_float+0x34e>
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	4642      	mov	r2, r8
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	47b8      	blx	r7
 800c1ea:	3001      	adds	r0, #1
 800c1ec:	d1c0      	bne.n	800c170 <_printf_float+0x304>
 800c1ee:	e69e      	b.n	800bf2e <_printf_float+0xc2>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	4631      	mov	r1, r6
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	9205      	str	r2, [sp, #20]
 800c1f8:	47b8      	blx	r7
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	f43f ae97 	beq.w	800bf2e <_printf_float+0xc2>
 800c200:	9a05      	ldr	r2, [sp, #20]
 800c202:	f10b 0b01 	add.w	fp, fp, #1
 800c206:	e7b9      	b.n	800c17c <_printf_float+0x310>
 800c208:	ee18 3a10 	vmov	r3, s16
 800c20c:	4652      	mov	r2, sl
 800c20e:	4631      	mov	r1, r6
 800c210:	4628      	mov	r0, r5
 800c212:	47b8      	blx	r7
 800c214:	3001      	adds	r0, #1
 800c216:	d1be      	bne.n	800c196 <_printf_float+0x32a>
 800c218:	e689      	b.n	800bf2e <_printf_float+0xc2>
 800c21a:	9a05      	ldr	r2, [sp, #20]
 800c21c:	464b      	mov	r3, r9
 800c21e:	4442      	add	r2, r8
 800c220:	4631      	mov	r1, r6
 800c222:	4628      	mov	r0, r5
 800c224:	47b8      	blx	r7
 800c226:	3001      	adds	r0, #1
 800c228:	d1c1      	bne.n	800c1ae <_printf_float+0x342>
 800c22a:	e680      	b.n	800bf2e <_printf_float+0xc2>
 800c22c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c22e:	2a01      	cmp	r2, #1
 800c230:	dc01      	bgt.n	800c236 <_printf_float+0x3ca>
 800c232:	07db      	lsls	r3, r3, #31
 800c234:	d538      	bpl.n	800c2a8 <_printf_float+0x43c>
 800c236:	2301      	movs	r3, #1
 800c238:	4642      	mov	r2, r8
 800c23a:	4631      	mov	r1, r6
 800c23c:	4628      	mov	r0, r5
 800c23e:	47b8      	blx	r7
 800c240:	3001      	adds	r0, #1
 800c242:	f43f ae74 	beq.w	800bf2e <_printf_float+0xc2>
 800c246:	ee18 3a10 	vmov	r3, s16
 800c24a:	4652      	mov	r2, sl
 800c24c:	4631      	mov	r1, r6
 800c24e:	4628      	mov	r0, r5
 800c250:	47b8      	blx	r7
 800c252:	3001      	adds	r0, #1
 800c254:	f43f ae6b 	beq.w	800bf2e <_printf_float+0xc2>
 800c258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c25c:	2200      	movs	r2, #0
 800c25e:	2300      	movs	r3, #0
 800c260:	f7f4 fc42 	bl	8000ae8 <__aeabi_dcmpeq>
 800c264:	b9d8      	cbnz	r0, 800c29e <_printf_float+0x432>
 800c266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c268:	f108 0201 	add.w	r2, r8, #1
 800c26c:	3b01      	subs	r3, #1
 800c26e:	4631      	mov	r1, r6
 800c270:	4628      	mov	r0, r5
 800c272:	47b8      	blx	r7
 800c274:	3001      	adds	r0, #1
 800c276:	d10e      	bne.n	800c296 <_printf_float+0x42a>
 800c278:	e659      	b.n	800bf2e <_printf_float+0xc2>
 800c27a:	2301      	movs	r3, #1
 800c27c:	4652      	mov	r2, sl
 800c27e:	4631      	mov	r1, r6
 800c280:	4628      	mov	r0, r5
 800c282:	47b8      	blx	r7
 800c284:	3001      	adds	r0, #1
 800c286:	f43f ae52 	beq.w	800bf2e <_printf_float+0xc2>
 800c28a:	f108 0801 	add.w	r8, r8, #1
 800c28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c290:	3b01      	subs	r3, #1
 800c292:	4543      	cmp	r3, r8
 800c294:	dcf1      	bgt.n	800c27a <_printf_float+0x40e>
 800c296:	464b      	mov	r3, r9
 800c298:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c29c:	e6dc      	b.n	800c058 <_printf_float+0x1ec>
 800c29e:	f04f 0800 	mov.w	r8, #0
 800c2a2:	f104 0a1a 	add.w	sl, r4, #26
 800c2a6:	e7f2      	b.n	800c28e <_printf_float+0x422>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	4642      	mov	r2, r8
 800c2ac:	e7df      	b.n	800c26e <_printf_float+0x402>
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	464a      	mov	r2, r9
 800c2b2:	4631      	mov	r1, r6
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	47b8      	blx	r7
 800c2b8:	3001      	adds	r0, #1
 800c2ba:	f43f ae38 	beq.w	800bf2e <_printf_float+0xc2>
 800c2be:	f108 0801 	add.w	r8, r8, #1
 800c2c2:	68e3      	ldr	r3, [r4, #12]
 800c2c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c2c6:	1a5b      	subs	r3, r3, r1
 800c2c8:	4543      	cmp	r3, r8
 800c2ca:	dcf0      	bgt.n	800c2ae <_printf_float+0x442>
 800c2cc:	e6fa      	b.n	800c0c4 <_printf_float+0x258>
 800c2ce:	f04f 0800 	mov.w	r8, #0
 800c2d2:	f104 0919 	add.w	r9, r4, #25
 800c2d6:	e7f4      	b.n	800c2c2 <_printf_float+0x456>

0800c2d8 <_printf_common>:
 800c2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2dc:	4616      	mov	r6, r2
 800c2de:	4699      	mov	r9, r3
 800c2e0:	688a      	ldr	r2, [r1, #8]
 800c2e2:	690b      	ldr	r3, [r1, #16]
 800c2e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	bfb8      	it	lt
 800c2ec:	4613      	movlt	r3, r2
 800c2ee:	6033      	str	r3, [r6, #0]
 800c2f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2f4:	4607      	mov	r7, r0
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	b10a      	cbz	r2, 800c2fe <_printf_common+0x26>
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	6033      	str	r3, [r6, #0]
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	0699      	lsls	r1, r3, #26
 800c302:	bf42      	ittt	mi
 800c304:	6833      	ldrmi	r3, [r6, #0]
 800c306:	3302      	addmi	r3, #2
 800c308:	6033      	strmi	r3, [r6, #0]
 800c30a:	6825      	ldr	r5, [r4, #0]
 800c30c:	f015 0506 	ands.w	r5, r5, #6
 800c310:	d106      	bne.n	800c320 <_printf_common+0x48>
 800c312:	f104 0a19 	add.w	sl, r4, #25
 800c316:	68e3      	ldr	r3, [r4, #12]
 800c318:	6832      	ldr	r2, [r6, #0]
 800c31a:	1a9b      	subs	r3, r3, r2
 800c31c:	42ab      	cmp	r3, r5
 800c31e:	dc26      	bgt.n	800c36e <_printf_common+0x96>
 800c320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c324:	1e13      	subs	r3, r2, #0
 800c326:	6822      	ldr	r2, [r4, #0]
 800c328:	bf18      	it	ne
 800c32a:	2301      	movne	r3, #1
 800c32c:	0692      	lsls	r2, r2, #26
 800c32e:	d42b      	bmi.n	800c388 <_printf_common+0xb0>
 800c330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c334:	4649      	mov	r1, r9
 800c336:	4638      	mov	r0, r7
 800c338:	47c0      	blx	r8
 800c33a:	3001      	adds	r0, #1
 800c33c:	d01e      	beq.n	800c37c <_printf_common+0xa4>
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	68e5      	ldr	r5, [r4, #12]
 800c342:	6832      	ldr	r2, [r6, #0]
 800c344:	f003 0306 	and.w	r3, r3, #6
 800c348:	2b04      	cmp	r3, #4
 800c34a:	bf08      	it	eq
 800c34c:	1aad      	subeq	r5, r5, r2
 800c34e:	68a3      	ldr	r3, [r4, #8]
 800c350:	6922      	ldr	r2, [r4, #16]
 800c352:	bf0c      	ite	eq
 800c354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c358:	2500      	movne	r5, #0
 800c35a:	4293      	cmp	r3, r2
 800c35c:	bfc4      	itt	gt
 800c35e:	1a9b      	subgt	r3, r3, r2
 800c360:	18ed      	addgt	r5, r5, r3
 800c362:	2600      	movs	r6, #0
 800c364:	341a      	adds	r4, #26
 800c366:	42b5      	cmp	r5, r6
 800c368:	d11a      	bne.n	800c3a0 <_printf_common+0xc8>
 800c36a:	2000      	movs	r0, #0
 800c36c:	e008      	b.n	800c380 <_printf_common+0xa8>
 800c36e:	2301      	movs	r3, #1
 800c370:	4652      	mov	r2, sl
 800c372:	4649      	mov	r1, r9
 800c374:	4638      	mov	r0, r7
 800c376:	47c0      	blx	r8
 800c378:	3001      	adds	r0, #1
 800c37a:	d103      	bne.n	800c384 <_printf_common+0xac>
 800c37c:	f04f 30ff 	mov.w	r0, #4294967295
 800c380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c384:	3501      	adds	r5, #1
 800c386:	e7c6      	b.n	800c316 <_printf_common+0x3e>
 800c388:	18e1      	adds	r1, r4, r3
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	2030      	movs	r0, #48	; 0x30
 800c38e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c392:	4422      	add	r2, r4
 800c394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c39c:	3302      	adds	r3, #2
 800c39e:	e7c7      	b.n	800c330 <_printf_common+0x58>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	4622      	mov	r2, r4
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	47c0      	blx	r8
 800c3aa:	3001      	adds	r0, #1
 800c3ac:	d0e6      	beq.n	800c37c <_printf_common+0xa4>
 800c3ae:	3601      	adds	r6, #1
 800c3b0:	e7d9      	b.n	800c366 <_printf_common+0x8e>
	...

0800c3b4 <_printf_i>:
 800c3b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3b8:	7e0f      	ldrb	r7, [r1, #24]
 800c3ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3bc:	2f78      	cmp	r7, #120	; 0x78
 800c3be:	4691      	mov	r9, r2
 800c3c0:	4680      	mov	r8, r0
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	469a      	mov	sl, r3
 800c3c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c3ca:	d807      	bhi.n	800c3dc <_printf_i+0x28>
 800c3cc:	2f62      	cmp	r7, #98	; 0x62
 800c3ce:	d80a      	bhi.n	800c3e6 <_printf_i+0x32>
 800c3d0:	2f00      	cmp	r7, #0
 800c3d2:	f000 80d8 	beq.w	800c586 <_printf_i+0x1d2>
 800c3d6:	2f58      	cmp	r7, #88	; 0x58
 800c3d8:	f000 80a3 	beq.w	800c522 <_printf_i+0x16e>
 800c3dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3e4:	e03a      	b.n	800c45c <_printf_i+0xa8>
 800c3e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3ea:	2b15      	cmp	r3, #21
 800c3ec:	d8f6      	bhi.n	800c3dc <_printf_i+0x28>
 800c3ee:	a101      	add	r1, pc, #4	; (adr r1, 800c3f4 <_printf_i+0x40>)
 800c3f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3f4:	0800c44d 	.word	0x0800c44d
 800c3f8:	0800c461 	.word	0x0800c461
 800c3fc:	0800c3dd 	.word	0x0800c3dd
 800c400:	0800c3dd 	.word	0x0800c3dd
 800c404:	0800c3dd 	.word	0x0800c3dd
 800c408:	0800c3dd 	.word	0x0800c3dd
 800c40c:	0800c461 	.word	0x0800c461
 800c410:	0800c3dd 	.word	0x0800c3dd
 800c414:	0800c3dd 	.word	0x0800c3dd
 800c418:	0800c3dd 	.word	0x0800c3dd
 800c41c:	0800c3dd 	.word	0x0800c3dd
 800c420:	0800c56d 	.word	0x0800c56d
 800c424:	0800c491 	.word	0x0800c491
 800c428:	0800c54f 	.word	0x0800c54f
 800c42c:	0800c3dd 	.word	0x0800c3dd
 800c430:	0800c3dd 	.word	0x0800c3dd
 800c434:	0800c58f 	.word	0x0800c58f
 800c438:	0800c3dd 	.word	0x0800c3dd
 800c43c:	0800c491 	.word	0x0800c491
 800c440:	0800c3dd 	.word	0x0800c3dd
 800c444:	0800c3dd 	.word	0x0800c3dd
 800c448:	0800c557 	.word	0x0800c557
 800c44c:	682b      	ldr	r3, [r5, #0]
 800c44e:	1d1a      	adds	r2, r3, #4
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	602a      	str	r2, [r5, #0]
 800c454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c45c:	2301      	movs	r3, #1
 800c45e:	e0a3      	b.n	800c5a8 <_printf_i+0x1f4>
 800c460:	6820      	ldr	r0, [r4, #0]
 800c462:	6829      	ldr	r1, [r5, #0]
 800c464:	0606      	lsls	r6, r0, #24
 800c466:	f101 0304 	add.w	r3, r1, #4
 800c46a:	d50a      	bpl.n	800c482 <_printf_i+0xce>
 800c46c:	680e      	ldr	r6, [r1, #0]
 800c46e:	602b      	str	r3, [r5, #0]
 800c470:	2e00      	cmp	r6, #0
 800c472:	da03      	bge.n	800c47c <_printf_i+0xc8>
 800c474:	232d      	movs	r3, #45	; 0x2d
 800c476:	4276      	negs	r6, r6
 800c478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c47c:	485e      	ldr	r0, [pc, #376]	; (800c5f8 <_printf_i+0x244>)
 800c47e:	230a      	movs	r3, #10
 800c480:	e019      	b.n	800c4b6 <_printf_i+0x102>
 800c482:	680e      	ldr	r6, [r1, #0]
 800c484:	602b      	str	r3, [r5, #0]
 800c486:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c48a:	bf18      	it	ne
 800c48c:	b236      	sxthne	r6, r6
 800c48e:	e7ef      	b.n	800c470 <_printf_i+0xbc>
 800c490:	682b      	ldr	r3, [r5, #0]
 800c492:	6820      	ldr	r0, [r4, #0]
 800c494:	1d19      	adds	r1, r3, #4
 800c496:	6029      	str	r1, [r5, #0]
 800c498:	0601      	lsls	r1, r0, #24
 800c49a:	d501      	bpl.n	800c4a0 <_printf_i+0xec>
 800c49c:	681e      	ldr	r6, [r3, #0]
 800c49e:	e002      	b.n	800c4a6 <_printf_i+0xf2>
 800c4a0:	0646      	lsls	r6, r0, #25
 800c4a2:	d5fb      	bpl.n	800c49c <_printf_i+0xe8>
 800c4a4:	881e      	ldrh	r6, [r3, #0]
 800c4a6:	4854      	ldr	r0, [pc, #336]	; (800c5f8 <_printf_i+0x244>)
 800c4a8:	2f6f      	cmp	r7, #111	; 0x6f
 800c4aa:	bf0c      	ite	eq
 800c4ac:	2308      	moveq	r3, #8
 800c4ae:	230a      	movne	r3, #10
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4b6:	6865      	ldr	r5, [r4, #4]
 800c4b8:	60a5      	str	r5, [r4, #8]
 800c4ba:	2d00      	cmp	r5, #0
 800c4bc:	bfa2      	ittt	ge
 800c4be:	6821      	ldrge	r1, [r4, #0]
 800c4c0:	f021 0104 	bicge.w	r1, r1, #4
 800c4c4:	6021      	strge	r1, [r4, #0]
 800c4c6:	b90e      	cbnz	r6, 800c4cc <_printf_i+0x118>
 800c4c8:	2d00      	cmp	r5, #0
 800c4ca:	d04d      	beq.n	800c568 <_printf_i+0x1b4>
 800c4cc:	4615      	mov	r5, r2
 800c4ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800c4d2:	fb03 6711 	mls	r7, r3, r1, r6
 800c4d6:	5dc7      	ldrb	r7, [r0, r7]
 800c4d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4dc:	4637      	mov	r7, r6
 800c4de:	42bb      	cmp	r3, r7
 800c4e0:	460e      	mov	r6, r1
 800c4e2:	d9f4      	bls.n	800c4ce <_printf_i+0x11a>
 800c4e4:	2b08      	cmp	r3, #8
 800c4e6:	d10b      	bne.n	800c500 <_printf_i+0x14c>
 800c4e8:	6823      	ldr	r3, [r4, #0]
 800c4ea:	07de      	lsls	r6, r3, #31
 800c4ec:	d508      	bpl.n	800c500 <_printf_i+0x14c>
 800c4ee:	6923      	ldr	r3, [r4, #16]
 800c4f0:	6861      	ldr	r1, [r4, #4]
 800c4f2:	4299      	cmp	r1, r3
 800c4f4:	bfde      	ittt	le
 800c4f6:	2330      	movle	r3, #48	; 0x30
 800c4f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c500:	1b52      	subs	r2, r2, r5
 800c502:	6122      	str	r2, [r4, #16]
 800c504:	f8cd a000 	str.w	sl, [sp]
 800c508:	464b      	mov	r3, r9
 800c50a:	aa03      	add	r2, sp, #12
 800c50c:	4621      	mov	r1, r4
 800c50e:	4640      	mov	r0, r8
 800c510:	f7ff fee2 	bl	800c2d8 <_printf_common>
 800c514:	3001      	adds	r0, #1
 800c516:	d14c      	bne.n	800c5b2 <_printf_i+0x1fe>
 800c518:	f04f 30ff 	mov.w	r0, #4294967295
 800c51c:	b004      	add	sp, #16
 800c51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c522:	4835      	ldr	r0, [pc, #212]	; (800c5f8 <_printf_i+0x244>)
 800c524:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c528:	6829      	ldr	r1, [r5, #0]
 800c52a:	6823      	ldr	r3, [r4, #0]
 800c52c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c530:	6029      	str	r1, [r5, #0]
 800c532:	061d      	lsls	r5, r3, #24
 800c534:	d514      	bpl.n	800c560 <_printf_i+0x1ac>
 800c536:	07df      	lsls	r7, r3, #31
 800c538:	bf44      	itt	mi
 800c53a:	f043 0320 	orrmi.w	r3, r3, #32
 800c53e:	6023      	strmi	r3, [r4, #0]
 800c540:	b91e      	cbnz	r6, 800c54a <_printf_i+0x196>
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	f023 0320 	bic.w	r3, r3, #32
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	2310      	movs	r3, #16
 800c54c:	e7b0      	b.n	800c4b0 <_printf_i+0xfc>
 800c54e:	6823      	ldr	r3, [r4, #0]
 800c550:	f043 0320 	orr.w	r3, r3, #32
 800c554:	6023      	str	r3, [r4, #0]
 800c556:	2378      	movs	r3, #120	; 0x78
 800c558:	4828      	ldr	r0, [pc, #160]	; (800c5fc <_printf_i+0x248>)
 800c55a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c55e:	e7e3      	b.n	800c528 <_printf_i+0x174>
 800c560:	0659      	lsls	r1, r3, #25
 800c562:	bf48      	it	mi
 800c564:	b2b6      	uxthmi	r6, r6
 800c566:	e7e6      	b.n	800c536 <_printf_i+0x182>
 800c568:	4615      	mov	r5, r2
 800c56a:	e7bb      	b.n	800c4e4 <_printf_i+0x130>
 800c56c:	682b      	ldr	r3, [r5, #0]
 800c56e:	6826      	ldr	r6, [r4, #0]
 800c570:	6961      	ldr	r1, [r4, #20]
 800c572:	1d18      	adds	r0, r3, #4
 800c574:	6028      	str	r0, [r5, #0]
 800c576:	0635      	lsls	r5, r6, #24
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	d501      	bpl.n	800c580 <_printf_i+0x1cc>
 800c57c:	6019      	str	r1, [r3, #0]
 800c57e:	e002      	b.n	800c586 <_printf_i+0x1d2>
 800c580:	0670      	lsls	r0, r6, #25
 800c582:	d5fb      	bpl.n	800c57c <_printf_i+0x1c8>
 800c584:	8019      	strh	r1, [r3, #0]
 800c586:	2300      	movs	r3, #0
 800c588:	6123      	str	r3, [r4, #16]
 800c58a:	4615      	mov	r5, r2
 800c58c:	e7ba      	b.n	800c504 <_printf_i+0x150>
 800c58e:	682b      	ldr	r3, [r5, #0]
 800c590:	1d1a      	adds	r2, r3, #4
 800c592:	602a      	str	r2, [r5, #0]
 800c594:	681d      	ldr	r5, [r3, #0]
 800c596:	6862      	ldr	r2, [r4, #4]
 800c598:	2100      	movs	r1, #0
 800c59a:	4628      	mov	r0, r5
 800c59c:	f7f3 fe30 	bl	8000200 <memchr>
 800c5a0:	b108      	cbz	r0, 800c5a6 <_printf_i+0x1f2>
 800c5a2:	1b40      	subs	r0, r0, r5
 800c5a4:	6060      	str	r0, [r4, #4]
 800c5a6:	6863      	ldr	r3, [r4, #4]
 800c5a8:	6123      	str	r3, [r4, #16]
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5b0:	e7a8      	b.n	800c504 <_printf_i+0x150>
 800c5b2:	6923      	ldr	r3, [r4, #16]
 800c5b4:	462a      	mov	r2, r5
 800c5b6:	4649      	mov	r1, r9
 800c5b8:	4640      	mov	r0, r8
 800c5ba:	47d0      	blx	sl
 800c5bc:	3001      	adds	r0, #1
 800c5be:	d0ab      	beq.n	800c518 <_printf_i+0x164>
 800c5c0:	6823      	ldr	r3, [r4, #0]
 800c5c2:	079b      	lsls	r3, r3, #30
 800c5c4:	d413      	bmi.n	800c5ee <_printf_i+0x23a>
 800c5c6:	68e0      	ldr	r0, [r4, #12]
 800c5c8:	9b03      	ldr	r3, [sp, #12]
 800c5ca:	4298      	cmp	r0, r3
 800c5cc:	bfb8      	it	lt
 800c5ce:	4618      	movlt	r0, r3
 800c5d0:	e7a4      	b.n	800c51c <_printf_i+0x168>
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	4632      	mov	r2, r6
 800c5d6:	4649      	mov	r1, r9
 800c5d8:	4640      	mov	r0, r8
 800c5da:	47d0      	blx	sl
 800c5dc:	3001      	adds	r0, #1
 800c5de:	d09b      	beq.n	800c518 <_printf_i+0x164>
 800c5e0:	3501      	adds	r5, #1
 800c5e2:	68e3      	ldr	r3, [r4, #12]
 800c5e4:	9903      	ldr	r1, [sp, #12]
 800c5e6:	1a5b      	subs	r3, r3, r1
 800c5e8:	42ab      	cmp	r3, r5
 800c5ea:	dcf2      	bgt.n	800c5d2 <_printf_i+0x21e>
 800c5ec:	e7eb      	b.n	800c5c6 <_printf_i+0x212>
 800c5ee:	2500      	movs	r5, #0
 800c5f0:	f104 0619 	add.w	r6, r4, #25
 800c5f4:	e7f5      	b.n	800c5e2 <_printf_i+0x22e>
 800c5f6:	bf00      	nop
 800c5f8:	08010652 	.word	0x08010652
 800c5fc:	08010663 	.word	0x08010663

0800c600 <siprintf>:
 800c600:	b40e      	push	{r1, r2, r3}
 800c602:	b500      	push	{lr}
 800c604:	b09c      	sub	sp, #112	; 0x70
 800c606:	ab1d      	add	r3, sp, #116	; 0x74
 800c608:	9002      	str	r0, [sp, #8]
 800c60a:	9006      	str	r0, [sp, #24]
 800c60c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c610:	4809      	ldr	r0, [pc, #36]	; (800c638 <siprintf+0x38>)
 800c612:	9107      	str	r1, [sp, #28]
 800c614:	9104      	str	r1, [sp, #16]
 800c616:	4909      	ldr	r1, [pc, #36]	; (800c63c <siprintf+0x3c>)
 800c618:	f853 2b04 	ldr.w	r2, [r3], #4
 800c61c:	9105      	str	r1, [sp, #20]
 800c61e:	6800      	ldr	r0, [r0, #0]
 800c620:	9301      	str	r3, [sp, #4]
 800c622:	a902      	add	r1, sp, #8
 800c624:	f001 fb76 	bl	800dd14 <_svfiprintf_r>
 800c628:	9b02      	ldr	r3, [sp, #8]
 800c62a:	2200      	movs	r2, #0
 800c62c:	701a      	strb	r2, [r3, #0]
 800c62e:	b01c      	add	sp, #112	; 0x70
 800c630:	f85d eb04 	ldr.w	lr, [sp], #4
 800c634:	b003      	add	sp, #12
 800c636:	4770      	bx	lr
 800c638:	20000178 	.word	0x20000178
 800c63c:	ffff0208 	.word	0xffff0208

0800c640 <quorem>:
 800c640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	6903      	ldr	r3, [r0, #16]
 800c646:	690c      	ldr	r4, [r1, #16]
 800c648:	42a3      	cmp	r3, r4
 800c64a:	4607      	mov	r7, r0
 800c64c:	f2c0 8081 	blt.w	800c752 <quorem+0x112>
 800c650:	3c01      	subs	r4, #1
 800c652:	f101 0814 	add.w	r8, r1, #20
 800c656:	f100 0514 	add.w	r5, r0, #20
 800c65a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c65e:	9301      	str	r3, [sp, #4]
 800c660:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c664:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c668:	3301      	adds	r3, #1
 800c66a:	429a      	cmp	r2, r3
 800c66c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c670:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c674:	fbb2 f6f3 	udiv	r6, r2, r3
 800c678:	d331      	bcc.n	800c6de <quorem+0x9e>
 800c67a:	f04f 0e00 	mov.w	lr, #0
 800c67e:	4640      	mov	r0, r8
 800c680:	46ac      	mov	ip, r5
 800c682:	46f2      	mov	sl, lr
 800c684:	f850 2b04 	ldr.w	r2, [r0], #4
 800c688:	b293      	uxth	r3, r2
 800c68a:	fb06 e303 	mla	r3, r6, r3, lr
 800c68e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c692:	b29b      	uxth	r3, r3
 800c694:	ebaa 0303 	sub.w	r3, sl, r3
 800c698:	f8dc a000 	ldr.w	sl, [ip]
 800c69c:	0c12      	lsrs	r2, r2, #16
 800c69e:	fa13 f38a 	uxtah	r3, r3, sl
 800c6a2:	fb06 e202 	mla	r2, r6, r2, lr
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	9b00      	ldr	r3, [sp, #0]
 800c6aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c6ae:	b292      	uxth	r2, r2
 800c6b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c6b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800c6bc:	4581      	cmp	r9, r0
 800c6be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6c2:	f84c 3b04 	str.w	r3, [ip], #4
 800c6c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c6ca:	d2db      	bcs.n	800c684 <quorem+0x44>
 800c6cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800c6d0:	b92b      	cbnz	r3, 800c6de <quorem+0x9e>
 800c6d2:	9b01      	ldr	r3, [sp, #4]
 800c6d4:	3b04      	subs	r3, #4
 800c6d6:	429d      	cmp	r5, r3
 800c6d8:	461a      	mov	r2, r3
 800c6da:	d32e      	bcc.n	800c73a <quorem+0xfa>
 800c6dc:	613c      	str	r4, [r7, #16]
 800c6de:	4638      	mov	r0, r7
 800c6e0:	f001 f8c4 	bl	800d86c <__mcmp>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	db24      	blt.n	800c732 <quorem+0xf2>
 800c6e8:	3601      	adds	r6, #1
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	f04f 0c00 	mov.w	ip, #0
 800c6f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c6f4:	f8d0 e000 	ldr.w	lr, [r0]
 800c6f8:	b293      	uxth	r3, r2
 800c6fa:	ebac 0303 	sub.w	r3, ip, r3
 800c6fe:	0c12      	lsrs	r2, r2, #16
 800c700:	fa13 f38e 	uxtah	r3, r3, lr
 800c704:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c708:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c712:	45c1      	cmp	r9, r8
 800c714:	f840 3b04 	str.w	r3, [r0], #4
 800c718:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c71c:	d2e8      	bcs.n	800c6f0 <quorem+0xb0>
 800c71e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c722:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c726:	b922      	cbnz	r2, 800c732 <quorem+0xf2>
 800c728:	3b04      	subs	r3, #4
 800c72a:	429d      	cmp	r5, r3
 800c72c:	461a      	mov	r2, r3
 800c72e:	d30a      	bcc.n	800c746 <quorem+0x106>
 800c730:	613c      	str	r4, [r7, #16]
 800c732:	4630      	mov	r0, r6
 800c734:	b003      	add	sp, #12
 800c736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c73a:	6812      	ldr	r2, [r2, #0]
 800c73c:	3b04      	subs	r3, #4
 800c73e:	2a00      	cmp	r2, #0
 800c740:	d1cc      	bne.n	800c6dc <quorem+0x9c>
 800c742:	3c01      	subs	r4, #1
 800c744:	e7c7      	b.n	800c6d6 <quorem+0x96>
 800c746:	6812      	ldr	r2, [r2, #0]
 800c748:	3b04      	subs	r3, #4
 800c74a:	2a00      	cmp	r2, #0
 800c74c:	d1f0      	bne.n	800c730 <quorem+0xf0>
 800c74e:	3c01      	subs	r4, #1
 800c750:	e7eb      	b.n	800c72a <quorem+0xea>
 800c752:	2000      	movs	r0, #0
 800c754:	e7ee      	b.n	800c734 <quorem+0xf4>
	...

0800c758 <_dtoa_r>:
 800c758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75c:	ed2d 8b04 	vpush	{d8-d9}
 800c760:	ec57 6b10 	vmov	r6, r7, d0
 800c764:	b093      	sub	sp, #76	; 0x4c
 800c766:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c768:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c76c:	9106      	str	r1, [sp, #24]
 800c76e:	ee10 aa10 	vmov	sl, s0
 800c772:	4604      	mov	r4, r0
 800c774:	9209      	str	r2, [sp, #36]	; 0x24
 800c776:	930c      	str	r3, [sp, #48]	; 0x30
 800c778:	46bb      	mov	fp, r7
 800c77a:	b975      	cbnz	r5, 800c79a <_dtoa_r+0x42>
 800c77c:	2010      	movs	r0, #16
 800c77e:	f000 fddd 	bl	800d33c <malloc>
 800c782:	4602      	mov	r2, r0
 800c784:	6260      	str	r0, [r4, #36]	; 0x24
 800c786:	b920      	cbnz	r0, 800c792 <_dtoa_r+0x3a>
 800c788:	4ba7      	ldr	r3, [pc, #668]	; (800ca28 <_dtoa_r+0x2d0>)
 800c78a:	21ea      	movs	r1, #234	; 0xea
 800c78c:	48a7      	ldr	r0, [pc, #668]	; (800ca2c <_dtoa_r+0x2d4>)
 800c78e:	f001 fbd1 	bl	800df34 <__assert_func>
 800c792:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c796:	6005      	str	r5, [r0, #0]
 800c798:	60c5      	str	r5, [r0, #12]
 800c79a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c79c:	6819      	ldr	r1, [r3, #0]
 800c79e:	b151      	cbz	r1, 800c7b6 <_dtoa_r+0x5e>
 800c7a0:	685a      	ldr	r2, [r3, #4]
 800c7a2:	604a      	str	r2, [r1, #4]
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	4093      	lsls	r3, r2
 800c7a8:	608b      	str	r3, [r1, #8]
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f000 fe1c 	bl	800d3e8 <_Bfree>
 800c7b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	601a      	str	r2, [r3, #0]
 800c7b6:	1e3b      	subs	r3, r7, #0
 800c7b8:	bfaa      	itet	ge
 800c7ba:	2300      	movge	r3, #0
 800c7bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c7c0:	f8c8 3000 	strge.w	r3, [r8]
 800c7c4:	4b9a      	ldr	r3, [pc, #616]	; (800ca30 <_dtoa_r+0x2d8>)
 800c7c6:	bfbc      	itt	lt
 800c7c8:	2201      	movlt	r2, #1
 800c7ca:	f8c8 2000 	strlt.w	r2, [r8]
 800c7ce:	ea33 030b 	bics.w	r3, r3, fp
 800c7d2:	d11b      	bne.n	800c80c <_dtoa_r+0xb4>
 800c7d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7da:	6013      	str	r3, [r2, #0]
 800c7dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7e0:	4333      	orrs	r3, r6
 800c7e2:	f000 8592 	beq.w	800d30a <_dtoa_r+0xbb2>
 800c7e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7e8:	b963      	cbnz	r3, 800c804 <_dtoa_r+0xac>
 800c7ea:	4b92      	ldr	r3, [pc, #584]	; (800ca34 <_dtoa_r+0x2dc>)
 800c7ec:	e022      	b.n	800c834 <_dtoa_r+0xdc>
 800c7ee:	4b92      	ldr	r3, [pc, #584]	; (800ca38 <_dtoa_r+0x2e0>)
 800c7f0:	9301      	str	r3, [sp, #4]
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7f6:	6013      	str	r3, [r2, #0]
 800c7f8:	9801      	ldr	r0, [sp, #4]
 800c7fa:	b013      	add	sp, #76	; 0x4c
 800c7fc:	ecbd 8b04 	vpop	{d8-d9}
 800c800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c804:	4b8b      	ldr	r3, [pc, #556]	; (800ca34 <_dtoa_r+0x2dc>)
 800c806:	9301      	str	r3, [sp, #4]
 800c808:	3303      	adds	r3, #3
 800c80a:	e7f3      	b.n	800c7f4 <_dtoa_r+0x9c>
 800c80c:	2200      	movs	r2, #0
 800c80e:	2300      	movs	r3, #0
 800c810:	4650      	mov	r0, sl
 800c812:	4659      	mov	r1, fp
 800c814:	f7f4 f968 	bl	8000ae8 <__aeabi_dcmpeq>
 800c818:	ec4b ab19 	vmov	d9, sl, fp
 800c81c:	4680      	mov	r8, r0
 800c81e:	b158      	cbz	r0, 800c838 <_dtoa_r+0xe0>
 800c820:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c822:	2301      	movs	r3, #1
 800c824:	6013      	str	r3, [r2, #0]
 800c826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f000 856b 	beq.w	800d304 <_dtoa_r+0xbac>
 800c82e:	4883      	ldr	r0, [pc, #524]	; (800ca3c <_dtoa_r+0x2e4>)
 800c830:	6018      	str	r0, [r3, #0]
 800c832:	1e43      	subs	r3, r0, #1
 800c834:	9301      	str	r3, [sp, #4]
 800c836:	e7df      	b.n	800c7f8 <_dtoa_r+0xa0>
 800c838:	ec4b ab10 	vmov	d0, sl, fp
 800c83c:	aa10      	add	r2, sp, #64	; 0x40
 800c83e:	a911      	add	r1, sp, #68	; 0x44
 800c840:	4620      	mov	r0, r4
 800c842:	f001 f8b9 	bl	800d9b8 <__d2b>
 800c846:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c84a:	ee08 0a10 	vmov	s16, r0
 800c84e:	2d00      	cmp	r5, #0
 800c850:	f000 8084 	beq.w	800c95c <_dtoa_r+0x204>
 800c854:	ee19 3a90 	vmov	r3, s19
 800c858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c85c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c860:	4656      	mov	r6, sl
 800c862:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c866:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c86a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c86e:	4b74      	ldr	r3, [pc, #464]	; (800ca40 <_dtoa_r+0x2e8>)
 800c870:	2200      	movs	r2, #0
 800c872:	4630      	mov	r0, r6
 800c874:	4639      	mov	r1, r7
 800c876:	f7f3 fd17 	bl	80002a8 <__aeabi_dsub>
 800c87a:	a365      	add	r3, pc, #404	; (adr r3, 800ca10 <_dtoa_r+0x2b8>)
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	f7f3 feca 	bl	8000618 <__aeabi_dmul>
 800c884:	a364      	add	r3, pc, #400	; (adr r3, 800ca18 <_dtoa_r+0x2c0>)
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	f7f3 fd0f 	bl	80002ac <__adddf3>
 800c88e:	4606      	mov	r6, r0
 800c890:	4628      	mov	r0, r5
 800c892:	460f      	mov	r7, r1
 800c894:	f7f3 fe56 	bl	8000544 <__aeabi_i2d>
 800c898:	a361      	add	r3, pc, #388	; (adr r3, 800ca20 <_dtoa_r+0x2c8>)
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	f7f3 febb 	bl	8000618 <__aeabi_dmul>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	f7f3 fcff 	bl	80002ac <__adddf3>
 800c8ae:	4606      	mov	r6, r0
 800c8b0:	460f      	mov	r7, r1
 800c8b2:	f7f4 f961 	bl	8000b78 <__aeabi_d2iz>
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	9000      	str	r0, [sp, #0]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	4630      	mov	r0, r6
 800c8be:	4639      	mov	r1, r7
 800c8c0:	f7f4 f91c 	bl	8000afc <__aeabi_dcmplt>
 800c8c4:	b150      	cbz	r0, 800c8dc <_dtoa_r+0x184>
 800c8c6:	9800      	ldr	r0, [sp, #0]
 800c8c8:	f7f3 fe3c 	bl	8000544 <__aeabi_i2d>
 800c8cc:	4632      	mov	r2, r6
 800c8ce:	463b      	mov	r3, r7
 800c8d0:	f7f4 f90a 	bl	8000ae8 <__aeabi_dcmpeq>
 800c8d4:	b910      	cbnz	r0, 800c8dc <_dtoa_r+0x184>
 800c8d6:	9b00      	ldr	r3, [sp, #0]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	9b00      	ldr	r3, [sp, #0]
 800c8de:	2b16      	cmp	r3, #22
 800c8e0:	d85a      	bhi.n	800c998 <_dtoa_r+0x240>
 800c8e2:	9a00      	ldr	r2, [sp, #0]
 800c8e4:	4b57      	ldr	r3, [pc, #348]	; (800ca44 <_dtoa_r+0x2ec>)
 800c8e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	ec51 0b19 	vmov	r0, r1, d9
 800c8f2:	f7f4 f903 	bl	8000afc <__aeabi_dcmplt>
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	d050      	beq.n	800c99c <_dtoa_r+0x244>
 800c8fa:	9b00      	ldr	r3, [sp, #0]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	2300      	movs	r3, #0
 800c902:	930b      	str	r3, [sp, #44]	; 0x2c
 800c904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c906:	1b5d      	subs	r5, r3, r5
 800c908:	1e6b      	subs	r3, r5, #1
 800c90a:	9305      	str	r3, [sp, #20]
 800c90c:	bf45      	ittet	mi
 800c90e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c912:	9304      	strmi	r3, [sp, #16]
 800c914:	2300      	movpl	r3, #0
 800c916:	2300      	movmi	r3, #0
 800c918:	bf4c      	ite	mi
 800c91a:	9305      	strmi	r3, [sp, #20]
 800c91c:	9304      	strpl	r3, [sp, #16]
 800c91e:	9b00      	ldr	r3, [sp, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	db3d      	blt.n	800c9a0 <_dtoa_r+0x248>
 800c924:	9b05      	ldr	r3, [sp, #20]
 800c926:	9a00      	ldr	r2, [sp, #0]
 800c928:	920a      	str	r2, [sp, #40]	; 0x28
 800c92a:	4413      	add	r3, r2
 800c92c:	9305      	str	r3, [sp, #20]
 800c92e:	2300      	movs	r3, #0
 800c930:	9307      	str	r3, [sp, #28]
 800c932:	9b06      	ldr	r3, [sp, #24]
 800c934:	2b09      	cmp	r3, #9
 800c936:	f200 8089 	bhi.w	800ca4c <_dtoa_r+0x2f4>
 800c93a:	2b05      	cmp	r3, #5
 800c93c:	bfc4      	itt	gt
 800c93e:	3b04      	subgt	r3, #4
 800c940:	9306      	strgt	r3, [sp, #24]
 800c942:	9b06      	ldr	r3, [sp, #24]
 800c944:	f1a3 0302 	sub.w	r3, r3, #2
 800c948:	bfcc      	ite	gt
 800c94a:	2500      	movgt	r5, #0
 800c94c:	2501      	movle	r5, #1
 800c94e:	2b03      	cmp	r3, #3
 800c950:	f200 8087 	bhi.w	800ca62 <_dtoa_r+0x30a>
 800c954:	e8df f003 	tbb	[pc, r3]
 800c958:	59383a2d 	.word	0x59383a2d
 800c95c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c960:	441d      	add	r5, r3
 800c962:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c966:	2b20      	cmp	r3, #32
 800c968:	bfc1      	itttt	gt
 800c96a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c96e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c972:	fa0b f303 	lslgt.w	r3, fp, r3
 800c976:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c97a:	bfda      	itte	le
 800c97c:	f1c3 0320 	rsble	r3, r3, #32
 800c980:	fa06 f003 	lslle.w	r0, r6, r3
 800c984:	4318      	orrgt	r0, r3
 800c986:	f7f3 fdcd 	bl	8000524 <__aeabi_ui2d>
 800c98a:	2301      	movs	r3, #1
 800c98c:	4606      	mov	r6, r0
 800c98e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c992:	3d01      	subs	r5, #1
 800c994:	930e      	str	r3, [sp, #56]	; 0x38
 800c996:	e76a      	b.n	800c86e <_dtoa_r+0x116>
 800c998:	2301      	movs	r3, #1
 800c99a:	e7b2      	b.n	800c902 <_dtoa_r+0x1aa>
 800c99c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c99e:	e7b1      	b.n	800c904 <_dtoa_r+0x1ac>
 800c9a0:	9b04      	ldr	r3, [sp, #16]
 800c9a2:	9a00      	ldr	r2, [sp, #0]
 800c9a4:	1a9b      	subs	r3, r3, r2
 800c9a6:	9304      	str	r3, [sp, #16]
 800c9a8:	4253      	negs	r3, r2
 800c9aa:	9307      	str	r3, [sp, #28]
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c9b0:	e7bf      	b.n	800c932 <_dtoa_r+0x1da>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	9308      	str	r3, [sp, #32]
 800c9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	dc55      	bgt.n	800ca68 <_dtoa_r+0x310>
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	9209      	str	r2, [sp, #36]	; 0x24
 800c9c6:	e00c      	b.n	800c9e2 <_dtoa_r+0x28a>
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e7f3      	b.n	800c9b4 <_dtoa_r+0x25c>
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9d0:	9308      	str	r3, [sp, #32]
 800c9d2:	9b00      	ldr	r3, [sp, #0]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	9302      	str	r3, [sp, #8]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	9303      	str	r3, [sp, #12]
 800c9de:	bfb8      	it	lt
 800c9e0:	2301      	movlt	r3, #1
 800c9e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	6042      	str	r2, [r0, #4]
 800c9e8:	2204      	movs	r2, #4
 800c9ea:	f102 0614 	add.w	r6, r2, #20
 800c9ee:	429e      	cmp	r6, r3
 800c9f0:	6841      	ldr	r1, [r0, #4]
 800c9f2:	d93d      	bls.n	800ca70 <_dtoa_r+0x318>
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f000 fcb7 	bl	800d368 <_Balloc>
 800c9fa:	9001      	str	r0, [sp, #4]
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d13b      	bne.n	800ca78 <_dtoa_r+0x320>
 800ca00:	4b11      	ldr	r3, [pc, #68]	; (800ca48 <_dtoa_r+0x2f0>)
 800ca02:	4602      	mov	r2, r0
 800ca04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ca08:	e6c0      	b.n	800c78c <_dtoa_r+0x34>
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e7df      	b.n	800c9ce <_dtoa_r+0x276>
 800ca0e:	bf00      	nop
 800ca10:	636f4361 	.word	0x636f4361
 800ca14:	3fd287a7 	.word	0x3fd287a7
 800ca18:	8b60c8b3 	.word	0x8b60c8b3
 800ca1c:	3fc68a28 	.word	0x3fc68a28
 800ca20:	509f79fb 	.word	0x509f79fb
 800ca24:	3fd34413 	.word	0x3fd34413
 800ca28:	08010681 	.word	0x08010681
 800ca2c:	08010698 	.word	0x08010698
 800ca30:	7ff00000 	.word	0x7ff00000
 800ca34:	0801067d 	.word	0x0801067d
 800ca38:	08010674 	.word	0x08010674
 800ca3c:	08010651 	.word	0x08010651
 800ca40:	3ff80000 	.word	0x3ff80000
 800ca44:	08010788 	.word	0x08010788
 800ca48:	080106f3 	.word	0x080106f3
 800ca4c:	2501      	movs	r5, #1
 800ca4e:	2300      	movs	r3, #0
 800ca50:	9306      	str	r3, [sp, #24]
 800ca52:	9508      	str	r5, [sp, #32]
 800ca54:	f04f 33ff 	mov.w	r3, #4294967295
 800ca58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	2312      	movs	r3, #18
 800ca60:	e7b0      	b.n	800c9c4 <_dtoa_r+0x26c>
 800ca62:	2301      	movs	r3, #1
 800ca64:	9308      	str	r3, [sp, #32]
 800ca66:	e7f5      	b.n	800ca54 <_dtoa_r+0x2fc>
 800ca68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ca6e:	e7b8      	b.n	800c9e2 <_dtoa_r+0x28a>
 800ca70:	3101      	adds	r1, #1
 800ca72:	6041      	str	r1, [r0, #4]
 800ca74:	0052      	lsls	r2, r2, #1
 800ca76:	e7b8      	b.n	800c9ea <_dtoa_r+0x292>
 800ca78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca7a:	9a01      	ldr	r2, [sp, #4]
 800ca7c:	601a      	str	r2, [r3, #0]
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	2b0e      	cmp	r3, #14
 800ca82:	f200 809d 	bhi.w	800cbc0 <_dtoa_r+0x468>
 800ca86:	2d00      	cmp	r5, #0
 800ca88:	f000 809a 	beq.w	800cbc0 <_dtoa_r+0x468>
 800ca8c:	9b00      	ldr	r3, [sp, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	dd32      	ble.n	800caf8 <_dtoa_r+0x3a0>
 800ca92:	4ab7      	ldr	r2, [pc, #732]	; (800cd70 <_dtoa_r+0x618>)
 800ca94:	f003 030f 	and.w	r3, r3, #15
 800ca98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ca9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800caa0:	9b00      	ldr	r3, [sp, #0]
 800caa2:	05d8      	lsls	r0, r3, #23
 800caa4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800caa8:	d516      	bpl.n	800cad8 <_dtoa_r+0x380>
 800caaa:	4bb2      	ldr	r3, [pc, #712]	; (800cd74 <_dtoa_r+0x61c>)
 800caac:	ec51 0b19 	vmov	r0, r1, d9
 800cab0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cab4:	f7f3 feda 	bl	800086c <__aeabi_ddiv>
 800cab8:	f007 070f 	and.w	r7, r7, #15
 800cabc:	4682      	mov	sl, r0
 800cabe:	468b      	mov	fp, r1
 800cac0:	2503      	movs	r5, #3
 800cac2:	4eac      	ldr	r6, [pc, #688]	; (800cd74 <_dtoa_r+0x61c>)
 800cac4:	b957      	cbnz	r7, 800cadc <_dtoa_r+0x384>
 800cac6:	4642      	mov	r2, r8
 800cac8:	464b      	mov	r3, r9
 800caca:	4650      	mov	r0, sl
 800cacc:	4659      	mov	r1, fp
 800cace:	f7f3 fecd 	bl	800086c <__aeabi_ddiv>
 800cad2:	4682      	mov	sl, r0
 800cad4:	468b      	mov	fp, r1
 800cad6:	e028      	b.n	800cb2a <_dtoa_r+0x3d2>
 800cad8:	2502      	movs	r5, #2
 800cada:	e7f2      	b.n	800cac2 <_dtoa_r+0x36a>
 800cadc:	07f9      	lsls	r1, r7, #31
 800cade:	d508      	bpl.n	800caf2 <_dtoa_r+0x39a>
 800cae0:	4640      	mov	r0, r8
 800cae2:	4649      	mov	r1, r9
 800cae4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cae8:	f7f3 fd96 	bl	8000618 <__aeabi_dmul>
 800caec:	3501      	adds	r5, #1
 800caee:	4680      	mov	r8, r0
 800caf0:	4689      	mov	r9, r1
 800caf2:	107f      	asrs	r7, r7, #1
 800caf4:	3608      	adds	r6, #8
 800caf6:	e7e5      	b.n	800cac4 <_dtoa_r+0x36c>
 800caf8:	f000 809b 	beq.w	800cc32 <_dtoa_r+0x4da>
 800cafc:	9b00      	ldr	r3, [sp, #0]
 800cafe:	4f9d      	ldr	r7, [pc, #628]	; (800cd74 <_dtoa_r+0x61c>)
 800cb00:	425e      	negs	r6, r3
 800cb02:	4b9b      	ldr	r3, [pc, #620]	; (800cd70 <_dtoa_r+0x618>)
 800cb04:	f006 020f 	and.w	r2, r6, #15
 800cb08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb10:	ec51 0b19 	vmov	r0, r1, d9
 800cb14:	f7f3 fd80 	bl	8000618 <__aeabi_dmul>
 800cb18:	1136      	asrs	r6, r6, #4
 800cb1a:	4682      	mov	sl, r0
 800cb1c:	468b      	mov	fp, r1
 800cb1e:	2300      	movs	r3, #0
 800cb20:	2502      	movs	r5, #2
 800cb22:	2e00      	cmp	r6, #0
 800cb24:	d17a      	bne.n	800cc1c <_dtoa_r+0x4c4>
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1d3      	bne.n	800cad2 <_dtoa_r+0x37a>
 800cb2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f000 8082 	beq.w	800cc36 <_dtoa_r+0x4de>
 800cb32:	4b91      	ldr	r3, [pc, #580]	; (800cd78 <_dtoa_r+0x620>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	4650      	mov	r0, sl
 800cb38:	4659      	mov	r1, fp
 800cb3a:	f7f3 ffdf 	bl	8000afc <__aeabi_dcmplt>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d079      	beq.n	800cc36 <_dtoa_r+0x4de>
 800cb42:	9b03      	ldr	r3, [sp, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d076      	beq.n	800cc36 <_dtoa_r+0x4de>
 800cb48:	9b02      	ldr	r3, [sp, #8]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	dd36      	ble.n	800cbbc <_dtoa_r+0x464>
 800cb4e:	9b00      	ldr	r3, [sp, #0]
 800cb50:	4650      	mov	r0, sl
 800cb52:	4659      	mov	r1, fp
 800cb54:	1e5f      	subs	r7, r3, #1
 800cb56:	2200      	movs	r2, #0
 800cb58:	4b88      	ldr	r3, [pc, #544]	; (800cd7c <_dtoa_r+0x624>)
 800cb5a:	f7f3 fd5d 	bl	8000618 <__aeabi_dmul>
 800cb5e:	9e02      	ldr	r6, [sp, #8]
 800cb60:	4682      	mov	sl, r0
 800cb62:	468b      	mov	fp, r1
 800cb64:	3501      	adds	r5, #1
 800cb66:	4628      	mov	r0, r5
 800cb68:	f7f3 fcec 	bl	8000544 <__aeabi_i2d>
 800cb6c:	4652      	mov	r2, sl
 800cb6e:	465b      	mov	r3, fp
 800cb70:	f7f3 fd52 	bl	8000618 <__aeabi_dmul>
 800cb74:	4b82      	ldr	r3, [pc, #520]	; (800cd80 <_dtoa_r+0x628>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	f7f3 fb98 	bl	80002ac <__adddf3>
 800cb7c:	46d0      	mov	r8, sl
 800cb7e:	46d9      	mov	r9, fp
 800cb80:	4682      	mov	sl, r0
 800cb82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cb86:	2e00      	cmp	r6, #0
 800cb88:	d158      	bne.n	800cc3c <_dtoa_r+0x4e4>
 800cb8a:	4b7e      	ldr	r3, [pc, #504]	; (800cd84 <_dtoa_r+0x62c>)
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	4640      	mov	r0, r8
 800cb90:	4649      	mov	r1, r9
 800cb92:	f7f3 fb89 	bl	80002a8 <__aeabi_dsub>
 800cb96:	4652      	mov	r2, sl
 800cb98:	465b      	mov	r3, fp
 800cb9a:	4680      	mov	r8, r0
 800cb9c:	4689      	mov	r9, r1
 800cb9e:	f7f3 ffcb 	bl	8000b38 <__aeabi_dcmpgt>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	f040 8295 	bne.w	800d0d2 <_dtoa_r+0x97a>
 800cba8:	4652      	mov	r2, sl
 800cbaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cbae:	4640      	mov	r0, r8
 800cbb0:	4649      	mov	r1, r9
 800cbb2:	f7f3 ffa3 	bl	8000afc <__aeabi_dcmplt>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	f040 8289 	bne.w	800d0ce <_dtoa_r+0x976>
 800cbbc:	ec5b ab19 	vmov	sl, fp, d9
 800cbc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	f2c0 8148 	blt.w	800ce58 <_dtoa_r+0x700>
 800cbc8:	9a00      	ldr	r2, [sp, #0]
 800cbca:	2a0e      	cmp	r2, #14
 800cbcc:	f300 8144 	bgt.w	800ce58 <_dtoa_r+0x700>
 800cbd0:	4b67      	ldr	r3, [pc, #412]	; (800cd70 <_dtoa_r+0x618>)
 800cbd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f280 80d5 	bge.w	800cd8c <_dtoa_r+0x634>
 800cbe2:	9b03      	ldr	r3, [sp, #12]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f300 80d1 	bgt.w	800cd8c <_dtoa_r+0x634>
 800cbea:	f040 826f 	bne.w	800d0cc <_dtoa_r+0x974>
 800cbee:	4b65      	ldr	r3, [pc, #404]	; (800cd84 <_dtoa_r+0x62c>)
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	4640      	mov	r0, r8
 800cbf4:	4649      	mov	r1, r9
 800cbf6:	f7f3 fd0f 	bl	8000618 <__aeabi_dmul>
 800cbfa:	4652      	mov	r2, sl
 800cbfc:	465b      	mov	r3, fp
 800cbfe:	f7f3 ff91 	bl	8000b24 <__aeabi_dcmpge>
 800cc02:	9e03      	ldr	r6, [sp, #12]
 800cc04:	4637      	mov	r7, r6
 800cc06:	2800      	cmp	r0, #0
 800cc08:	f040 8245 	bne.w	800d096 <_dtoa_r+0x93e>
 800cc0c:	9d01      	ldr	r5, [sp, #4]
 800cc0e:	2331      	movs	r3, #49	; 0x31
 800cc10:	f805 3b01 	strb.w	r3, [r5], #1
 800cc14:	9b00      	ldr	r3, [sp, #0]
 800cc16:	3301      	adds	r3, #1
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	e240      	b.n	800d09e <_dtoa_r+0x946>
 800cc1c:	07f2      	lsls	r2, r6, #31
 800cc1e:	d505      	bpl.n	800cc2c <_dtoa_r+0x4d4>
 800cc20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc24:	f7f3 fcf8 	bl	8000618 <__aeabi_dmul>
 800cc28:	3501      	adds	r5, #1
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	1076      	asrs	r6, r6, #1
 800cc2e:	3708      	adds	r7, #8
 800cc30:	e777      	b.n	800cb22 <_dtoa_r+0x3ca>
 800cc32:	2502      	movs	r5, #2
 800cc34:	e779      	b.n	800cb2a <_dtoa_r+0x3d2>
 800cc36:	9f00      	ldr	r7, [sp, #0]
 800cc38:	9e03      	ldr	r6, [sp, #12]
 800cc3a:	e794      	b.n	800cb66 <_dtoa_r+0x40e>
 800cc3c:	9901      	ldr	r1, [sp, #4]
 800cc3e:	4b4c      	ldr	r3, [pc, #304]	; (800cd70 <_dtoa_r+0x618>)
 800cc40:	4431      	add	r1, r6
 800cc42:	910d      	str	r1, [sp, #52]	; 0x34
 800cc44:	9908      	ldr	r1, [sp, #32]
 800cc46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cc4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc4e:	2900      	cmp	r1, #0
 800cc50:	d043      	beq.n	800ccda <_dtoa_r+0x582>
 800cc52:	494d      	ldr	r1, [pc, #308]	; (800cd88 <_dtoa_r+0x630>)
 800cc54:	2000      	movs	r0, #0
 800cc56:	f7f3 fe09 	bl	800086c <__aeabi_ddiv>
 800cc5a:	4652      	mov	r2, sl
 800cc5c:	465b      	mov	r3, fp
 800cc5e:	f7f3 fb23 	bl	80002a8 <__aeabi_dsub>
 800cc62:	9d01      	ldr	r5, [sp, #4]
 800cc64:	4682      	mov	sl, r0
 800cc66:	468b      	mov	fp, r1
 800cc68:	4649      	mov	r1, r9
 800cc6a:	4640      	mov	r0, r8
 800cc6c:	f7f3 ff84 	bl	8000b78 <__aeabi_d2iz>
 800cc70:	4606      	mov	r6, r0
 800cc72:	f7f3 fc67 	bl	8000544 <__aeabi_i2d>
 800cc76:	4602      	mov	r2, r0
 800cc78:	460b      	mov	r3, r1
 800cc7a:	4640      	mov	r0, r8
 800cc7c:	4649      	mov	r1, r9
 800cc7e:	f7f3 fb13 	bl	80002a8 <__aeabi_dsub>
 800cc82:	3630      	adds	r6, #48	; 0x30
 800cc84:	f805 6b01 	strb.w	r6, [r5], #1
 800cc88:	4652      	mov	r2, sl
 800cc8a:	465b      	mov	r3, fp
 800cc8c:	4680      	mov	r8, r0
 800cc8e:	4689      	mov	r9, r1
 800cc90:	f7f3 ff34 	bl	8000afc <__aeabi_dcmplt>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	d163      	bne.n	800cd60 <_dtoa_r+0x608>
 800cc98:	4642      	mov	r2, r8
 800cc9a:	464b      	mov	r3, r9
 800cc9c:	4936      	ldr	r1, [pc, #216]	; (800cd78 <_dtoa_r+0x620>)
 800cc9e:	2000      	movs	r0, #0
 800cca0:	f7f3 fb02 	bl	80002a8 <__aeabi_dsub>
 800cca4:	4652      	mov	r2, sl
 800cca6:	465b      	mov	r3, fp
 800cca8:	f7f3 ff28 	bl	8000afc <__aeabi_dcmplt>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	f040 80b5 	bne.w	800ce1c <_dtoa_r+0x6c4>
 800ccb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccb4:	429d      	cmp	r5, r3
 800ccb6:	d081      	beq.n	800cbbc <_dtoa_r+0x464>
 800ccb8:	4b30      	ldr	r3, [pc, #192]	; (800cd7c <_dtoa_r+0x624>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	4650      	mov	r0, sl
 800ccbe:	4659      	mov	r1, fp
 800ccc0:	f7f3 fcaa 	bl	8000618 <__aeabi_dmul>
 800ccc4:	4b2d      	ldr	r3, [pc, #180]	; (800cd7c <_dtoa_r+0x624>)
 800ccc6:	4682      	mov	sl, r0
 800ccc8:	468b      	mov	fp, r1
 800ccca:	4640      	mov	r0, r8
 800cccc:	4649      	mov	r1, r9
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f7f3 fca2 	bl	8000618 <__aeabi_dmul>
 800ccd4:	4680      	mov	r8, r0
 800ccd6:	4689      	mov	r9, r1
 800ccd8:	e7c6      	b.n	800cc68 <_dtoa_r+0x510>
 800ccda:	4650      	mov	r0, sl
 800ccdc:	4659      	mov	r1, fp
 800ccde:	f7f3 fc9b 	bl	8000618 <__aeabi_dmul>
 800cce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cce4:	9d01      	ldr	r5, [sp, #4]
 800cce6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cce8:	4682      	mov	sl, r0
 800ccea:	468b      	mov	fp, r1
 800ccec:	4649      	mov	r1, r9
 800ccee:	4640      	mov	r0, r8
 800ccf0:	f7f3 ff42 	bl	8000b78 <__aeabi_d2iz>
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	f7f3 fc25 	bl	8000544 <__aeabi_i2d>
 800ccfa:	3630      	adds	r6, #48	; 0x30
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	460b      	mov	r3, r1
 800cd00:	4640      	mov	r0, r8
 800cd02:	4649      	mov	r1, r9
 800cd04:	f7f3 fad0 	bl	80002a8 <__aeabi_dsub>
 800cd08:	f805 6b01 	strb.w	r6, [r5], #1
 800cd0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd0e:	429d      	cmp	r5, r3
 800cd10:	4680      	mov	r8, r0
 800cd12:	4689      	mov	r9, r1
 800cd14:	f04f 0200 	mov.w	r2, #0
 800cd18:	d124      	bne.n	800cd64 <_dtoa_r+0x60c>
 800cd1a:	4b1b      	ldr	r3, [pc, #108]	; (800cd88 <_dtoa_r+0x630>)
 800cd1c:	4650      	mov	r0, sl
 800cd1e:	4659      	mov	r1, fp
 800cd20:	f7f3 fac4 	bl	80002ac <__adddf3>
 800cd24:	4602      	mov	r2, r0
 800cd26:	460b      	mov	r3, r1
 800cd28:	4640      	mov	r0, r8
 800cd2a:	4649      	mov	r1, r9
 800cd2c:	f7f3 ff04 	bl	8000b38 <__aeabi_dcmpgt>
 800cd30:	2800      	cmp	r0, #0
 800cd32:	d173      	bne.n	800ce1c <_dtoa_r+0x6c4>
 800cd34:	4652      	mov	r2, sl
 800cd36:	465b      	mov	r3, fp
 800cd38:	4913      	ldr	r1, [pc, #76]	; (800cd88 <_dtoa_r+0x630>)
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	f7f3 fab4 	bl	80002a8 <__aeabi_dsub>
 800cd40:	4602      	mov	r2, r0
 800cd42:	460b      	mov	r3, r1
 800cd44:	4640      	mov	r0, r8
 800cd46:	4649      	mov	r1, r9
 800cd48:	f7f3 fed8 	bl	8000afc <__aeabi_dcmplt>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	f43f af35 	beq.w	800cbbc <_dtoa_r+0x464>
 800cd52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cd54:	1e6b      	subs	r3, r5, #1
 800cd56:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd5c:	2b30      	cmp	r3, #48	; 0x30
 800cd5e:	d0f8      	beq.n	800cd52 <_dtoa_r+0x5fa>
 800cd60:	9700      	str	r7, [sp, #0]
 800cd62:	e049      	b.n	800cdf8 <_dtoa_r+0x6a0>
 800cd64:	4b05      	ldr	r3, [pc, #20]	; (800cd7c <_dtoa_r+0x624>)
 800cd66:	f7f3 fc57 	bl	8000618 <__aeabi_dmul>
 800cd6a:	4680      	mov	r8, r0
 800cd6c:	4689      	mov	r9, r1
 800cd6e:	e7bd      	b.n	800ccec <_dtoa_r+0x594>
 800cd70:	08010788 	.word	0x08010788
 800cd74:	08010760 	.word	0x08010760
 800cd78:	3ff00000 	.word	0x3ff00000
 800cd7c:	40240000 	.word	0x40240000
 800cd80:	401c0000 	.word	0x401c0000
 800cd84:	40140000 	.word	0x40140000
 800cd88:	3fe00000 	.word	0x3fe00000
 800cd8c:	9d01      	ldr	r5, [sp, #4]
 800cd8e:	4656      	mov	r6, sl
 800cd90:	465f      	mov	r7, fp
 800cd92:	4642      	mov	r2, r8
 800cd94:	464b      	mov	r3, r9
 800cd96:	4630      	mov	r0, r6
 800cd98:	4639      	mov	r1, r7
 800cd9a:	f7f3 fd67 	bl	800086c <__aeabi_ddiv>
 800cd9e:	f7f3 feeb 	bl	8000b78 <__aeabi_d2iz>
 800cda2:	4682      	mov	sl, r0
 800cda4:	f7f3 fbce 	bl	8000544 <__aeabi_i2d>
 800cda8:	4642      	mov	r2, r8
 800cdaa:	464b      	mov	r3, r9
 800cdac:	f7f3 fc34 	bl	8000618 <__aeabi_dmul>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	4639      	mov	r1, r7
 800cdb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cdbc:	f7f3 fa74 	bl	80002a8 <__aeabi_dsub>
 800cdc0:	f805 6b01 	strb.w	r6, [r5], #1
 800cdc4:	9e01      	ldr	r6, [sp, #4]
 800cdc6:	9f03      	ldr	r7, [sp, #12]
 800cdc8:	1bae      	subs	r6, r5, r6
 800cdca:	42b7      	cmp	r7, r6
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	d135      	bne.n	800ce3e <_dtoa_r+0x6e6>
 800cdd2:	f7f3 fa6b 	bl	80002ac <__adddf3>
 800cdd6:	4642      	mov	r2, r8
 800cdd8:	464b      	mov	r3, r9
 800cdda:	4606      	mov	r6, r0
 800cddc:	460f      	mov	r7, r1
 800cdde:	f7f3 feab 	bl	8000b38 <__aeabi_dcmpgt>
 800cde2:	b9d0      	cbnz	r0, 800ce1a <_dtoa_r+0x6c2>
 800cde4:	4642      	mov	r2, r8
 800cde6:	464b      	mov	r3, r9
 800cde8:	4630      	mov	r0, r6
 800cdea:	4639      	mov	r1, r7
 800cdec:	f7f3 fe7c 	bl	8000ae8 <__aeabi_dcmpeq>
 800cdf0:	b110      	cbz	r0, 800cdf8 <_dtoa_r+0x6a0>
 800cdf2:	f01a 0f01 	tst.w	sl, #1
 800cdf6:	d110      	bne.n	800ce1a <_dtoa_r+0x6c2>
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	ee18 1a10 	vmov	r1, s16
 800cdfe:	f000 faf3 	bl	800d3e8 <_Bfree>
 800ce02:	2300      	movs	r3, #0
 800ce04:	9800      	ldr	r0, [sp, #0]
 800ce06:	702b      	strb	r3, [r5, #0]
 800ce08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce0a:	3001      	adds	r0, #1
 800ce0c:	6018      	str	r0, [r3, #0]
 800ce0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f43f acf1 	beq.w	800c7f8 <_dtoa_r+0xa0>
 800ce16:	601d      	str	r5, [r3, #0]
 800ce18:	e4ee      	b.n	800c7f8 <_dtoa_r+0xa0>
 800ce1a:	9f00      	ldr	r7, [sp, #0]
 800ce1c:	462b      	mov	r3, r5
 800ce1e:	461d      	mov	r5, r3
 800ce20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce24:	2a39      	cmp	r2, #57	; 0x39
 800ce26:	d106      	bne.n	800ce36 <_dtoa_r+0x6de>
 800ce28:	9a01      	ldr	r2, [sp, #4]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d1f7      	bne.n	800ce1e <_dtoa_r+0x6c6>
 800ce2e:	9901      	ldr	r1, [sp, #4]
 800ce30:	2230      	movs	r2, #48	; 0x30
 800ce32:	3701      	adds	r7, #1
 800ce34:	700a      	strb	r2, [r1, #0]
 800ce36:	781a      	ldrb	r2, [r3, #0]
 800ce38:	3201      	adds	r2, #1
 800ce3a:	701a      	strb	r2, [r3, #0]
 800ce3c:	e790      	b.n	800cd60 <_dtoa_r+0x608>
 800ce3e:	4ba6      	ldr	r3, [pc, #664]	; (800d0d8 <_dtoa_r+0x980>)
 800ce40:	2200      	movs	r2, #0
 800ce42:	f7f3 fbe9 	bl	8000618 <__aeabi_dmul>
 800ce46:	2200      	movs	r2, #0
 800ce48:	2300      	movs	r3, #0
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	460f      	mov	r7, r1
 800ce4e:	f7f3 fe4b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d09d      	beq.n	800cd92 <_dtoa_r+0x63a>
 800ce56:	e7cf      	b.n	800cdf8 <_dtoa_r+0x6a0>
 800ce58:	9a08      	ldr	r2, [sp, #32]
 800ce5a:	2a00      	cmp	r2, #0
 800ce5c:	f000 80d7 	beq.w	800d00e <_dtoa_r+0x8b6>
 800ce60:	9a06      	ldr	r2, [sp, #24]
 800ce62:	2a01      	cmp	r2, #1
 800ce64:	f300 80ba 	bgt.w	800cfdc <_dtoa_r+0x884>
 800ce68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce6a:	2a00      	cmp	r2, #0
 800ce6c:	f000 80b2 	beq.w	800cfd4 <_dtoa_r+0x87c>
 800ce70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce74:	9e07      	ldr	r6, [sp, #28]
 800ce76:	9d04      	ldr	r5, [sp, #16]
 800ce78:	9a04      	ldr	r2, [sp, #16]
 800ce7a:	441a      	add	r2, r3
 800ce7c:	9204      	str	r2, [sp, #16]
 800ce7e:	9a05      	ldr	r2, [sp, #20]
 800ce80:	2101      	movs	r1, #1
 800ce82:	441a      	add	r2, r3
 800ce84:	4620      	mov	r0, r4
 800ce86:	9205      	str	r2, [sp, #20]
 800ce88:	f000 fb66 	bl	800d558 <__i2b>
 800ce8c:	4607      	mov	r7, r0
 800ce8e:	2d00      	cmp	r5, #0
 800ce90:	dd0c      	ble.n	800ceac <_dtoa_r+0x754>
 800ce92:	9b05      	ldr	r3, [sp, #20]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	dd09      	ble.n	800ceac <_dtoa_r+0x754>
 800ce98:	42ab      	cmp	r3, r5
 800ce9a:	9a04      	ldr	r2, [sp, #16]
 800ce9c:	bfa8      	it	ge
 800ce9e:	462b      	movge	r3, r5
 800cea0:	1ad2      	subs	r2, r2, r3
 800cea2:	9204      	str	r2, [sp, #16]
 800cea4:	9a05      	ldr	r2, [sp, #20]
 800cea6:	1aed      	subs	r5, r5, r3
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	9305      	str	r3, [sp, #20]
 800ceac:	9b07      	ldr	r3, [sp, #28]
 800ceae:	b31b      	cbz	r3, 800cef8 <_dtoa_r+0x7a0>
 800ceb0:	9b08      	ldr	r3, [sp, #32]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	f000 80af 	beq.w	800d016 <_dtoa_r+0x8be>
 800ceb8:	2e00      	cmp	r6, #0
 800ceba:	dd13      	ble.n	800cee4 <_dtoa_r+0x78c>
 800cebc:	4639      	mov	r1, r7
 800cebe:	4632      	mov	r2, r6
 800cec0:	4620      	mov	r0, r4
 800cec2:	f000 fc09 	bl	800d6d8 <__pow5mult>
 800cec6:	ee18 2a10 	vmov	r2, s16
 800ceca:	4601      	mov	r1, r0
 800cecc:	4607      	mov	r7, r0
 800cece:	4620      	mov	r0, r4
 800ced0:	f000 fb58 	bl	800d584 <__multiply>
 800ced4:	ee18 1a10 	vmov	r1, s16
 800ced8:	4680      	mov	r8, r0
 800ceda:	4620      	mov	r0, r4
 800cedc:	f000 fa84 	bl	800d3e8 <_Bfree>
 800cee0:	ee08 8a10 	vmov	s16, r8
 800cee4:	9b07      	ldr	r3, [sp, #28]
 800cee6:	1b9a      	subs	r2, r3, r6
 800cee8:	d006      	beq.n	800cef8 <_dtoa_r+0x7a0>
 800ceea:	ee18 1a10 	vmov	r1, s16
 800ceee:	4620      	mov	r0, r4
 800cef0:	f000 fbf2 	bl	800d6d8 <__pow5mult>
 800cef4:	ee08 0a10 	vmov	s16, r0
 800cef8:	2101      	movs	r1, #1
 800cefa:	4620      	mov	r0, r4
 800cefc:	f000 fb2c 	bl	800d558 <__i2b>
 800cf00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	4606      	mov	r6, r0
 800cf06:	f340 8088 	ble.w	800d01a <_dtoa_r+0x8c2>
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	4601      	mov	r1, r0
 800cf0e:	4620      	mov	r0, r4
 800cf10:	f000 fbe2 	bl	800d6d8 <__pow5mult>
 800cf14:	9b06      	ldr	r3, [sp, #24]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	4606      	mov	r6, r0
 800cf1a:	f340 8081 	ble.w	800d020 <_dtoa_r+0x8c8>
 800cf1e:	f04f 0800 	mov.w	r8, #0
 800cf22:	6933      	ldr	r3, [r6, #16]
 800cf24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cf28:	6918      	ldr	r0, [r3, #16]
 800cf2a:	f000 fac5 	bl	800d4b8 <__hi0bits>
 800cf2e:	f1c0 0020 	rsb	r0, r0, #32
 800cf32:	9b05      	ldr	r3, [sp, #20]
 800cf34:	4418      	add	r0, r3
 800cf36:	f010 001f 	ands.w	r0, r0, #31
 800cf3a:	f000 8092 	beq.w	800d062 <_dtoa_r+0x90a>
 800cf3e:	f1c0 0320 	rsb	r3, r0, #32
 800cf42:	2b04      	cmp	r3, #4
 800cf44:	f340 808a 	ble.w	800d05c <_dtoa_r+0x904>
 800cf48:	f1c0 001c 	rsb	r0, r0, #28
 800cf4c:	9b04      	ldr	r3, [sp, #16]
 800cf4e:	4403      	add	r3, r0
 800cf50:	9304      	str	r3, [sp, #16]
 800cf52:	9b05      	ldr	r3, [sp, #20]
 800cf54:	4403      	add	r3, r0
 800cf56:	4405      	add	r5, r0
 800cf58:	9305      	str	r3, [sp, #20]
 800cf5a:	9b04      	ldr	r3, [sp, #16]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	dd07      	ble.n	800cf70 <_dtoa_r+0x818>
 800cf60:	ee18 1a10 	vmov	r1, s16
 800cf64:	461a      	mov	r2, r3
 800cf66:	4620      	mov	r0, r4
 800cf68:	f000 fc10 	bl	800d78c <__lshift>
 800cf6c:	ee08 0a10 	vmov	s16, r0
 800cf70:	9b05      	ldr	r3, [sp, #20]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	dd05      	ble.n	800cf82 <_dtoa_r+0x82a>
 800cf76:	4631      	mov	r1, r6
 800cf78:	461a      	mov	r2, r3
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f000 fc06 	bl	800d78c <__lshift>
 800cf80:	4606      	mov	r6, r0
 800cf82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d06e      	beq.n	800d066 <_dtoa_r+0x90e>
 800cf88:	ee18 0a10 	vmov	r0, s16
 800cf8c:	4631      	mov	r1, r6
 800cf8e:	f000 fc6d 	bl	800d86c <__mcmp>
 800cf92:	2800      	cmp	r0, #0
 800cf94:	da67      	bge.n	800d066 <_dtoa_r+0x90e>
 800cf96:	9b00      	ldr	r3, [sp, #0]
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	ee18 1a10 	vmov	r1, s16
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	220a      	movs	r2, #10
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f000 fa41 	bl	800d42c <__multadd>
 800cfaa:	9b08      	ldr	r3, [sp, #32]
 800cfac:	ee08 0a10 	vmov	s16, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f000 81b1 	beq.w	800d318 <_dtoa_r+0xbc0>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	4639      	mov	r1, r7
 800cfba:	220a      	movs	r2, #10
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	f000 fa35 	bl	800d42c <__multadd>
 800cfc2:	9b02      	ldr	r3, [sp, #8]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	4607      	mov	r7, r0
 800cfc8:	f300 808e 	bgt.w	800d0e8 <_dtoa_r+0x990>
 800cfcc:	9b06      	ldr	r3, [sp, #24]
 800cfce:	2b02      	cmp	r3, #2
 800cfd0:	dc51      	bgt.n	800d076 <_dtoa_r+0x91e>
 800cfd2:	e089      	b.n	800d0e8 <_dtoa_r+0x990>
 800cfd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cfda:	e74b      	b.n	800ce74 <_dtoa_r+0x71c>
 800cfdc:	9b03      	ldr	r3, [sp, #12]
 800cfde:	1e5e      	subs	r6, r3, #1
 800cfe0:	9b07      	ldr	r3, [sp, #28]
 800cfe2:	42b3      	cmp	r3, r6
 800cfe4:	bfbf      	itttt	lt
 800cfe6:	9b07      	ldrlt	r3, [sp, #28]
 800cfe8:	9607      	strlt	r6, [sp, #28]
 800cfea:	1af2      	sublt	r2, r6, r3
 800cfec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cfee:	bfb6      	itet	lt
 800cff0:	189b      	addlt	r3, r3, r2
 800cff2:	1b9e      	subge	r6, r3, r6
 800cff4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cff6:	9b03      	ldr	r3, [sp, #12]
 800cff8:	bfb8      	it	lt
 800cffa:	2600      	movlt	r6, #0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	bfb7      	itett	lt
 800d000:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d004:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d008:	1a9d      	sublt	r5, r3, r2
 800d00a:	2300      	movlt	r3, #0
 800d00c:	e734      	b.n	800ce78 <_dtoa_r+0x720>
 800d00e:	9e07      	ldr	r6, [sp, #28]
 800d010:	9d04      	ldr	r5, [sp, #16]
 800d012:	9f08      	ldr	r7, [sp, #32]
 800d014:	e73b      	b.n	800ce8e <_dtoa_r+0x736>
 800d016:	9a07      	ldr	r2, [sp, #28]
 800d018:	e767      	b.n	800ceea <_dtoa_r+0x792>
 800d01a:	9b06      	ldr	r3, [sp, #24]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	dc18      	bgt.n	800d052 <_dtoa_r+0x8fa>
 800d020:	f1ba 0f00 	cmp.w	sl, #0
 800d024:	d115      	bne.n	800d052 <_dtoa_r+0x8fa>
 800d026:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d02a:	b993      	cbnz	r3, 800d052 <_dtoa_r+0x8fa>
 800d02c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d030:	0d1b      	lsrs	r3, r3, #20
 800d032:	051b      	lsls	r3, r3, #20
 800d034:	b183      	cbz	r3, 800d058 <_dtoa_r+0x900>
 800d036:	9b04      	ldr	r3, [sp, #16]
 800d038:	3301      	adds	r3, #1
 800d03a:	9304      	str	r3, [sp, #16]
 800d03c:	9b05      	ldr	r3, [sp, #20]
 800d03e:	3301      	adds	r3, #1
 800d040:	9305      	str	r3, [sp, #20]
 800d042:	f04f 0801 	mov.w	r8, #1
 800d046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f47f af6a 	bne.w	800cf22 <_dtoa_r+0x7ca>
 800d04e:	2001      	movs	r0, #1
 800d050:	e76f      	b.n	800cf32 <_dtoa_r+0x7da>
 800d052:	f04f 0800 	mov.w	r8, #0
 800d056:	e7f6      	b.n	800d046 <_dtoa_r+0x8ee>
 800d058:	4698      	mov	r8, r3
 800d05a:	e7f4      	b.n	800d046 <_dtoa_r+0x8ee>
 800d05c:	f43f af7d 	beq.w	800cf5a <_dtoa_r+0x802>
 800d060:	4618      	mov	r0, r3
 800d062:	301c      	adds	r0, #28
 800d064:	e772      	b.n	800cf4c <_dtoa_r+0x7f4>
 800d066:	9b03      	ldr	r3, [sp, #12]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	dc37      	bgt.n	800d0dc <_dtoa_r+0x984>
 800d06c:	9b06      	ldr	r3, [sp, #24]
 800d06e:	2b02      	cmp	r3, #2
 800d070:	dd34      	ble.n	800d0dc <_dtoa_r+0x984>
 800d072:	9b03      	ldr	r3, [sp, #12]
 800d074:	9302      	str	r3, [sp, #8]
 800d076:	9b02      	ldr	r3, [sp, #8]
 800d078:	b96b      	cbnz	r3, 800d096 <_dtoa_r+0x93e>
 800d07a:	4631      	mov	r1, r6
 800d07c:	2205      	movs	r2, #5
 800d07e:	4620      	mov	r0, r4
 800d080:	f000 f9d4 	bl	800d42c <__multadd>
 800d084:	4601      	mov	r1, r0
 800d086:	4606      	mov	r6, r0
 800d088:	ee18 0a10 	vmov	r0, s16
 800d08c:	f000 fbee 	bl	800d86c <__mcmp>
 800d090:	2800      	cmp	r0, #0
 800d092:	f73f adbb 	bgt.w	800cc0c <_dtoa_r+0x4b4>
 800d096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d098:	9d01      	ldr	r5, [sp, #4]
 800d09a:	43db      	mvns	r3, r3
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	f04f 0800 	mov.w	r8, #0
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f000 f99f 	bl	800d3e8 <_Bfree>
 800d0aa:	2f00      	cmp	r7, #0
 800d0ac:	f43f aea4 	beq.w	800cdf8 <_dtoa_r+0x6a0>
 800d0b0:	f1b8 0f00 	cmp.w	r8, #0
 800d0b4:	d005      	beq.n	800d0c2 <_dtoa_r+0x96a>
 800d0b6:	45b8      	cmp	r8, r7
 800d0b8:	d003      	beq.n	800d0c2 <_dtoa_r+0x96a>
 800d0ba:	4641      	mov	r1, r8
 800d0bc:	4620      	mov	r0, r4
 800d0be:	f000 f993 	bl	800d3e8 <_Bfree>
 800d0c2:	4639      	mov	r1, r7
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f000 f98f 	bl	800d3e8 <_Bfree>
 800d0ca:	e695      	b.n	800cdf8 <_dtoa_r+0x6a0>
 800d0cc:	2600      	movs	r6, #0
 800d0ce:	4637      	mov	r7, r6
 800d0d0:	e7e1      	b.n	800d096 <_dtoa_r+0x93e>
 800d0d2:	9700      	str	r7, [sp, #0]
 800d0d4:	4637      	mov	r7, r6
 800d0d6:	e599      	b.n	800cc0c <_dtoa_r+0x4b4>
 800d0d8:	40240000 	.word	0x40240000
 800d0dc:	9b08      	ldr	r3, [sp, #32]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	f000 80ca 	beq.w	800d278 <_dtoa_r+0xb20>
 800d0e4:	9b03      	ldr	r3, [sp, #12]
 800d0e6:	9302      	str	r3, [sp, #8]
 800d0e8:	2d00      	cmp	r5, #0
 800d0ea:	dd05      	ble.n	800d0f8 <_dtoa_r+0x9a0>
 800d0ec:	4639      	mov	r1, r7
 800d0ee:	462a      	mov	r2, r5
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f000 fb4b 	bl	800d78c <__lshift>
 800d0f6:	4607      	mov	r7, r0
 800d0f8:	f1b8 0f00 	cmp.w	r8, #0
 800d0fc:	d05b      	beq.n	800d1b6 <_dtoa_r+0xa5e>
 800d0fe:	6879      	ldr	r1, [r7, #4]
 800d100:	4620      	mov	r0, r4
 800d102:	f000 f931 	bl	800d368 <_Balloc>
 800d106:	4605      	mov	r5, r0
 800d108:	b928      	cbnz	r0, 800d116 <_dtoa_r+0x9be>
 800d10a:	4b87      	ldr	r3, [pc, #540]	; (800d328 <_dtoa_r+0xbd0>)
 800d10c:	4602      	mov	r2, r0
 800d10e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d112:	f7ff bb3b 	b.w	800c78c <_dtoa_r+0x34>
 800d116:	693a      	ldr	r2, [r7, #16]
 800d118:	3202      	adds	r2, #2
 800d11a:	0092      	lsls	r2, r2, #2
 800d11c:	f107 010c 	add.w	r1, r7, #12
 800d120:	300c      	adds	r0, #12
 800d122:	f000 f913 	bl	800d34c <memcpy>
 800d126:	2201      	movs	r2, #1
 800d128:	4629      	mov	r1, r5
 800d12a:	4620      	mov	r0, r4
 800d12c:	f000 fb2e 	bl	800d78c <__lshift>
 800d130:	9b01      	ldr	r3, [sp, #4]
 800d132:	f103 0901 	add.w	r9, r3, #1
 800d136:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d13a:	4413      	add	r3, r2
 800d13c:	9305      	str	r3, [sp, #20]
 800d13e:	f00a 0301 	and.w	r3, sl, #1
 800d142:	46b8      	mov	r8, r7
 800d144:	9304      	str	r3, [sp, #16]
 800d146:	4607      	mov	r7, r0
 800d148:	4631      	mov	r1, r6
 800d14a:	ee18 0a10 	vmov	r0, s16
 800d14e:	f7ff fa77 	bl	800c640 <quorem>
 800d152:	4641      	mov	r1, r8
 800d154:	9002      	str	r0, [sp, #8]
 800d156:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d15a:	ee18 0a10 	vmov	r0, s16
 800d15e:	f000 fb85 	bl	800d86c <__mcmp>
 800d162:	463a      	mov	r2, r7
 800d164:	9003      	str	r0, [sp, #12]
 800d166:	4631      	mov	r1, r6
 800d168:	4620      	mov	r0, r4
 800d16a:	f000 fb9b 	bl	800d8a4 <__mdiff>
 800d16e:	68c2      	ldr	r2, [r0, #12]
 800d170:	f109 3bff 	add.w	fp, r9, #4294967295
 800d174:	4605      	mov	r5, r0
 800d176:	bb02      	cbnz	r2, 800d1ba <_dtoa_r+0xa62>
 800d178:	4601      	mov	r1, r0
 800d17a:	ee18 0a10 	vmov	r0, s16
 800d17e:	f000 fb75 	bl	800d86c <__mcmp>
 800d182:	4602      	mov	r2, r0
 800d184:	4629      	mov	r1, r5
 800d186:	4620      	mov	r0, r4
 800d188:	9207      	str	r2, [sp, #28]
 800d18a:	f000 f92d 	bl	800d3e8 <_Bfree>
 800d18e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d192:	ea43 0102 	orr.w	r1, r3, r2
 800d196:	9b04      	ldr	r3, [sp, #16]
 800d198:	430b      	orrs	r3, r1
 800d19a:	464d      	mov	r5, r9
 800d19c:	d10f      	bne.n	800d1be <_dtoa_r+0xa66>
 800d19e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d1a2:	d02a      	beq.n	800d1fa <_dtoa_r+0xaa2>
 800d1a4:	9b03      	ldr	r3, [sp, #12]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	dd02      	ble.n	800d1b0 <_dtoa_r+0xa58>
 800d1aa:	9b02      	ldr	r3, [sp, #8]
 800d1ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d1b0:	f88b a000 	strb.w	sl, [fp]
 800d1b4:	e775      	b.n	800d0a2 <_dtoa_r+0x94a>
 800d1b6:	4638      	mov	r0, r7
 800d1b8:	e7ba      	b.n	800d130 <_dtoa_r+0x9d8>
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	e7e2      	b.n	800d184 <_dtoa_r+0xa2c>
 800d1be:	9b03      	ldr	r3, [sp, #12]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	db04      	blt.n	800d1ce <_dtoa_r+0xa76>
 800d1c4:	9906      	ldr	r1, [sp, #24]
 800d1c6:	430b      	orrs	r3, r1
 800d1c8:	9904      	ldr	r1, [sp, #16]
 800d1ca:	430b      	orrs	r3, r1
 800d1cc:	d122      	bne.n	800d214 <_dtoa_r+0xabc>
 800d1ce:	2a00      	cmp	r2, #0
 800d1d0:	ddee      	ble.n	800d1b0 <_dtoa_r+0xa58>
 800d1d2:	ee18 1a10 	vmov	r1, s16
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f000 fad7 	bl	800d78c <__lshift>
 800d1de:	4631      	mov	r1, r6
 800d1e0:	ee08 0a10 	vmov	s16, r0
 800d1e4:	f000 fb42 	bl	800d86c <__mcmp>
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	dc03      	bgt.n	800d1f4 <_dtoa_r+0xa9c>
 800d1ec:	d1e0      	bne.n	800d1b0 <_dtoa_r+0xa58>
 800d1ee:	f01a 0f01 	tst.w	sl, #1
 800d1f2:	d0dd      	beq.n	800d1b0 <_dtoa_r+0xa58>
 800d1f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d1f8:	d1d7      	bne.n	800d1aa <_dtoa_r+0xa52>
 800d1fa:	2339      	movs	r3, #57	; 0x39
 800d1fc:	f88b 3000 	strb.w	r3, [fp]
 800d200:	462b      	mov	r3, r5
 800d202:	461d      	mov	r5, r3
 800d204:	3b01      	subs	r3, #1
 800d206:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d20a:	2a39      	cmp	r2, #57	; 0x39
 800d20c:	d071      	beq.n	800d2f2 <_dtoa_r+0xb9a>
 800d20e:	3201      	adds	r2, #1
 800d210:	701a      	strb	r2, [r3, #0]
 800d212:	e746      	b.n	800d0a2 <_dtoa_r+0x94a>
 800d214:	2a00      	cmp	r2, #0
 800d216:	dd07      	ble.n	800d228 <_dtoa_r+0xad0>
 800d218:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d21c:	d0ed      	beq.n	800d1fa <_dtoa_r+0xaa2>
 800d21e:	f10a 0301 	add.w	r3, sl, #1
 800d222:	f88b 3000 	strb.w	r3, [fp]
 800d226:	e73c      	b.n	800d0a2 <_dtoa_r+0x94a>
 800d228:	9b05      	ldr	r3, [sp, #20]
 800d22a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d22e:	4599      	cmp	r9, r3
 800d230:	d047      	beq.n	800d2c2 <_dtoa_r+0xb6a>
 800d232:	ee18 1a10 	vmov	r1, s16
 800d236:	2300      	movs	r3, #0
 800d238:	220a      	movs	r2, #10
 800d23a:	4620      	mov	r0, r4
 800d23c:	f000 f8f6 	bl	800d42c <__multadd>
 800d240:	45b8      	cmp	r8, r7
 800d242:	ee08 0a10 	vmov	s16, r0
 800d246:	f04f 0300 	mov.w	r3, #0
 800d24a:	f04f 020a 	mov.w	r2, #10
 800d24e:	4641      	mov	r1, r8
 800d250:	4620      	mov	r0, r4
 800d252:	d106      	bne.n	800d262 <_dtoa_r+0xb0a>
 800d254:	f000 f8ea 	bl	800d42c <__multadd>
 800d258:	4680      	mov	r8, r0
 800d25a:	4607      	mov	r7, r0
 800d25c:	f109 0901 	add.w	r9, r9, #1
 800d260:	e772      	b.n	800d148 <_dtoa_r+0x9f0>
 800d262:	f000 f8e3 	bl	800d42c <__multadd>
 800d266:	4639      	mov	r1, r7
 800d268:	4680      	mov	r8, r0
 800d26a:	2300      	movs	r3, #0
 800d26c:	220a      	movs	r2, #10
 800d26e:	4620      	mov	r0, r4
 800d270:	f000 f8dc 	bl	800d42c <__multadd>
 800d274:	4607      	mov	r7, r0
 800d276:	e7f1      	b.n	800d25c <_dtoa_r+0xb04>
 800d278:	9b03      	ldr	r3, [sp, #12]
 800d27a:	9302      	str	r3, [sp, #8]
 800d27c:	9d01      	ldr	r5, [sp, #4]
 800d27e:	ee18 0a10 	vmov	r0, s16
 800d282:	4631      	mov	r1, r6
 800d284:	f7ff f9dc 	bl	800c640 <quorem>
 800d288:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d28c:	9b01      	ldr	r3, [sp, #4]
 800d28e:	f805 ab01 	strb.w	sl, [r5], #1
 800d292:	1aea      	subs	r2, r5, r3
 800d294:	9b02      	ldr	r3, [sp, #8]
 800d296:	4293      	cmp	r3, r2
 800d298:	dd09      	ble.n	800d2ae <_dtoa_r+0xb56>
 800d29a:	ee18 1a10 	vmov	r1, s16
 800d29e:	2300      	movs	r3, #0
 800d2a0:	220a      	movs	r2, #10
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f000 f8c2 	bl	800d42c <__multadd>
 800d2a8:	ee08 0a10 	vmov	s16, r0
 800d2ac:	e7e7      	b.n	800d27e <_dtoa_r+0xb26>
 800d2ae:	9b02      	ldr	r3, [sp, #8]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	bfc8      	it	gt
 800d2b4:	461d      	movgt	r5, r3
 800d2b6:	9b01      	ldr	r3, [sp, #4]
 800d2b8:	bfd8      	it	le
 800d2ba:	2501      	movle	r5, #1
 800d2bc:	441d      	add	r5, r3
 800d2be:	f04f 0800 	mov.w	r8, #0
 800d2c2:	ee18 1a10 	vmov	r1, s16
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f000 fa5f 	bl	800d78c <__lshift>
 800d2ce:	4631      	mov	r1, r6
 800d2d0:	ee08 0a10 	vmov	s16, r0
 800d2d4:	f000 faca 	bl	800d86c <__mcmp>
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	dc91      	bgt.n	800d200 <_dtoa_r+0xaa8>
 800d2dc:	d102      	bne.n	800d2e4 <_dtoa_r+0xb8c>
 800d2de:	f01a 0f01 	tst.w	sl, #1
 800d2e2:	d18d      	bne.n	800d200 <_dtoa_r+0xaa8>
 800d2e4:	462b      	mov	r3, r5
 800d2e6:	461d      	mov	r5, r3
 800d2e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2ec:	2a30      	cmp	r2, #48	; 0x30
 800d2ee:	d0fa      	beq.n	800d2e6 <_dtoa_r+0xb8e>
 800d2f0:	e6d7      	b.n	800d0a2 <_dtoa_r+0x94a>
 800d2f2:	9a01      	ldr	r2, [sp, #4]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d184      	bne.n	800d202 <_dtoa_r+0xaaa>
 800d2f8:	9b00      	ldr	r3, [sp, #0]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	9300      	str	r3, [sp, #0]
 800d2fe:	2331      	movs	r3, #49	; 0x31
 800d300:	7013      	strb	r3, [r2, #0]
 800d302:	e6ce      	b.n	800d0a2 <_dtoa_r+0x94a>
 800d304:	4b09      	ldr	r3, [pc, #36]	; (800d32c <_dtoa_r+0xbd4>)
 800d306:	f7ff ba95 	b.w	800c834 <_dtoa_r+0xdc>
 800d30a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f47f aa6e 	bne.w	800c7ee <_dtoa_r+0x96>
 800d312:	4b07      	ldr	r3, [pc, #28]	; (800d330 <_dtoa_r+0xbd8>)
 800d314:	f7ff ba8e 	b.w	800c834 <_dtoa_r+0xdc>
 800d318:	9b02      	ldr	r3, [sp, #8]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	dcae      	bgt.n	800d27c <_dtoa_r+0xb24>
 800d31e:	9b06      	ldr	r3, [sp, #24]
 800d320:	2b02      	cmp	r3, #2
 800d322:	f73f aea8 	bgt.w	800d076 <_dtoa_r+0x91e>
 800d326:	e7a9      	b.n	800d27c <_dtoa_r+0xb24>
 800d328:	080106f3 	.word	0x080106f3
 800d32c:	08010650 	.word	0x08010650
 800d330:	08010674 	.word	0x08010674

0800d334 <_localeconv_r>:
 800d334:	4800      	ldr	r0, [pc, #0]	; (800d338 <_localeconv_r+0x4>)
 800d336:	4770      	bx	lr
 800d338:	200002cc 	.word	0x200002cc

0800d33c <malloc>:
 800d33c:	4b02      	ldr	r3, [pc, #8]	; (800d348 <malloc+0xc>)
 800d33e:	4601      	mov	r1, r0
 800d340:	6818      	ldr	r0, [r3, #0]
 800d342:	f000 bc17 	b.w	800db74 <_malloc_r>
 800d346:	bf00      	nop
 800d348:	20000178 	.word	0x20000178

0800d34c <memcpy>:
 800d34c:	440a      	add	r2, r1
 800d34e:	4291      	cmp	r1, r2
 800d350:	f100 33ff 	add.w	r3, r0, #4294967295
 800d354:	d100      	bne.n	800d358 <memcpy+0xc>
 800d356:	4770      	bx	lr
 800d358:	b510      	push	{r4, lr}
 800d35a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d35e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d362:	4291      	cmp	r1, r2
 800d364:	d1f9      	bne.n	800d35a <memcpy+0xe>
 800d366:	bd10      	pop	{r4, pc}

0800d368 <_Balloc>:
 800d368:	b570      	push	{r4, r5, r6, lr}
 800d36a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d36c:	4604      	mov	r4, r0
 800d36e:	460d      	mov	r5, r1
 800d370:	b976      	cbnz	r6, 800d390 <_Balloc+0x28>
 800d372:	2010      	movs	r0, #16
 800d374:	f7ff ffe2 	bl	800d33c <malloc>
 800d378:	4602      	mov	r2, r0
 800d37a:	6260      	str	r0, [r4, #36]	; 0x24
 800d37c:	b920      	cbnz	r0, 800d388 <_Balloc+0x20>
 800d37e:	4b18      	ldr	r3, [pc, #96]	; (800d3e0 <_Balloc+0x78>)
 800d380:	4818      	ldr	r0, [pc, #96]	; (800d3e4 <_Balloc+0x7c>)
 800d382:	2166      	movs	r1, #102	; 0x66
 800d384:	f000 fdd6 	bl	800df34 <__assert_func>
 800d388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d38c:	6006      	str	r6, [r0, #0]
 800d38e:	60c6      	str	r6, [r0, #12]
 800d390:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d392:	68f3      	ldr	r3, [r6, #12]
 800d394:	b183      	cbz	r3, 800d3b8 <_Balloc+0x50>
 800d396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d39e:	b9b8      	cbnz	r0, 800d3d0 <_Balloc+0x68>
 800d3a0:	2101      	movs	r1, #1
 800d3a2:	fa01 f605 	lsl.w	r6, r1, r5
 800d3a6:	1d72      	adds	r2, r6, #5
 800d3a8:	0092      	lsls	r2, r2, #2
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f000 fb60 	bl	800da70 <_calloc_r>
 800d3b0:	b160      	cbz	r0, 800d3cc <_Balloc+0x64>
 800d3b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3b6:	e00e      	b.n	800d3d6 <_Balloc+0x6e>
 800d3b8:	2221      	movs	r2, #33	; 0x21
 800d3ba:	2104      	movs	r1, #4
 800d3bc:	4620      	mov	r0, r4
 800d3be:	f000 fb57 	bl	800da70 <_calloc_r>
 800d3c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3c4:	60f0      	str	r0, [r6, #12]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d1e4      	bne.n	800d396 <_Balloc+0x2e>
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	bd70      	pop	{r4, r5, r6, pc}
 800d3d0:	6802      	ldr	r2, [r0, #0]
 800d3d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3dc:	e7f7      	b.n	800d3ce <_Balloc+0x66>
 800d3de:	bf00      	nop
 800d3e0:	08010681 	.word	0x08010681
 800d3e4:	08010704 	.word	0x08010704

0800d3e8 <_Bfree>:
 800d3e8:	b570      	push	{r4, r5, r6, lr}
 800d3ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d3ec:	4605      	mov	r5, r0
 800d3ee:	460c      	mov	r4, r1
 800d3f0:	b976      	cbnz	r6, 800d410 <_Bfree+0x28>
 800d3f2:	2010      	movs	r0, #16
 800d3f4:	f7ff ffa2 	bl	800d33c <malloc>
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	6268      	str	r0, [r5, #36]	; 0x24
 800d3fc:	b920      	cbnz	r0, 800d408 <_Bfree+0x20>
 800d3fe:	4b09      	ldr	r3, [pc, #36]	; (800d424 <_Bfree+0x3c>)
 800d400:	4809      	ldr	r0, [pc, #36]	; (800d428 <_Bfree+0x40>)
 800d402:	218a      	movs	r1, #138	; 0x8a
 800d404:	f000 fd96 	bl	800df34 <__assert_func>
 800d408:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d40c:	6006      	str	r6, [r0, #0]
 800d40e:	60c6      	str	r6, [r0, #12]
 800d410:	b13c      	cbz	r4, 800d422 <_Bfree+0x3a>
 800d412:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d414:	6862      	ldr	r2, [r4, #4]
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d41c:	6021      	str	r1, [r4, #0]
 800d41e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d422:	bd70      	pop	{r4, r5, r6, pc}
 800d424:	08010681 	.word	0x08010681
 800d428:	08010704 	.word	0x08010704

0800d42c <__multadd>:
 800d42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d430:	690d      	ldr	r5, [r1, #16]
 800d432:	4607      	mov	r7, r0
 800d434:	460c      	mov	r4, r1
 800d436:	461e      	mov	r6, r3
 800d438:	f101 0c14 	add.w	ip, r1, #20
 800d43c:	2000      	movs	r0, #0
 800d43e:	f8dc 3000 	ldr.w	r3, [ip]
 800d442:	b299      	uxth	r1, r3
 800d444:	fb02 6101 	mla	r1, r2, r1, r6
 800d448:	0c1e      	lsrs	r6, r3, #16
 800d44a:	0c0b      	lsrs	r3, r1, #16
 800d44c:	fb02 3306 	mla	r3, r2, r6, r3
 800d450:	b289      	uxth	r1, r1
 800d452:	3001      	adds	r0, #1
 800d454:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d458:	4285      	cmp	r5, r0
 800d45a:	f84c 1b04 	str.w	r1, [ip], #4
 800d45e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d462:	dcec      	bgt.n	800d43e <__multadd+0x12>
 800d464:	b30e      	cbz	r6, 800d4aa <__multadd+0x7e>
 800d466:	68a3      	ldr	r3, [r4, #8]
 800d468:	42ab      	cmp	r3, r5
 800d46a:	dc19      	bgt.n	800d4a0 <__multadd+0x74>
 800d46c:	6861      	ldr	r1, [r4, #4]
 800d46e:	4638      	mov	r0, r7
 800d470:	3101      	adds	r1, #1
 800d472:	f7ff ff79 	bl	800d368 <_Balloc>
 800d476:	4680      	mov	r8, r0
 800d478:	b928      	cbnz	r0, 800d486 <__multadd+0x5a>
 800d47a:	4602      	mov	r2, r0
 800d47c:	4b0c      	ldr	r3, [pc, #48]	; (800d4b0 <__multadd+0x84>)
 800d47e:	480d      	ldr	r0, [pc, #52]	; (800d4b4 <__multadd+0x88>)
 800d480:	21b5      	movs	r1, #181	; 0xb5
 800d482:	f000 fd57 	bl	800df34 <__assert_func>
 800d486:	6922      	ldr	r2, [r4, #16]
 800d488:	3202      	adds	r2, #2
 800d48a:	f104 010c 	add.w	r1, r4, #12
 800d48e:	0092      	lsls	r2, r2, #2
 800d490:	300c      	adds	r0, #12
 800d492:	f7ff ff5b 	bl	800d34c <memcpy>
 800d496:	4621      	mov	r1, r4
 800d498:	4638      	mov	r0, r7
 800d49a:	f7ff ffa5 	bl	800d3e8 <_Bfree>
 800d49e:	4644      	mov	r4, r8
 800d4a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4a4:	3501      	adds	r5, #1
 800d4a6:	615e      	str	r6, [r3, #20]
 800d4a8:	6125      	str	r5, [r4, #16]
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b0:	080106f3 	.word	0x080106f3
 800d4b4:	08010704 	.word	0x08010704

0800d4b8 <__hi0bits>:
 800d4b8:	0c03      	lsrs	r3, r0, #16
 800d4ba:	041b      	lsls	r3, r3, #16
 800d4bc:	b9d3      	cbnz	r3, 800d4f4 <__hi0bits+0x3c>
 800d4be:	0400      	lsls	r0, r0, #16
 800d4c0:	2310      	movs	r3, #16
 800d4c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d4c6:	bf04      	itt	eq
 800d4c8:	0200      	lsleq	r0, r0, #8
 800d4ca:	3308      	addeq	r3, #8
 800d4cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d4d0:	bf04      	itt	eq
 800d4d2:	0100      	lsleq	r0, r0, #4
 800d4d4:	3304      	addeq	r3, #4
 800d4d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d4da:	bf04      	itt	eq
 800d4dc:	0080      	lsleq	r0, r0, #2
 800d4de:	3302      	addeq	r3, #2
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	db05      	blt.n	800d4f0 <__hi0bits+0x38>
 800d4e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d4e8:	f103 0301 	add.w	r3, r3, #1
 800d4ec:	bf08      	it	eq
 800d4ee:	2320      	moveq	r3, #32
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	4770      	bx	lr
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	e7e4      	b.n	800d4c2 <__hi0bits+0xa>

0800d4f8 <__lo0bits>:
 800d4f8:	6803      	ldr	r3, [r0, #0]
 800d4fa:	f013 0207 	ands.w	r2, r3, #7
 800d4fe:	4601      	mov	r1, r0
 800d500:	d00b      	beq.n	800d51a <__lo0bits+0x22>
 800d502:	07da      	lsls	r2, r3, #31
 800d504:	d423      	bmi.n	800d54e <__lo0bits+0x56>
 800d506:	0798      	lsls	r0, r3, #30
 800d508:	bf49      	itett	mi
 800d50a:	085b      	lsrmi	r3, r3, #1
 800d50c:	089b      	lsrpl	r3, r3, #2
 800d50e:	2001      	movmi	r0, #1
 800d510:	600b      	strmi	r3, [r1, #0]
 800d512:	bf5c      	itt	pl
 800d514:	600b      	strpl	r3, [r1, #0]
 800d516:	2002      	movpl	r0, #2
 800d518:	4770      	bx	lr
 800d51a:	b298      	uxth	r0, r3
 800d51c:	b9a8      	cbnz	r0, 800d54a <__lo0bits+0x52>
 800d51e:	0c1b      	lsrs	r3, r3, #16
 800d520:	2010      	movs	r0, #16
 800d522:	b2da      	uxtb	r2, r3
 800d524:	b90a      	cbnz	r2, 800d52a <__lo0bits+0x32>
 800d526:	3008      	adds	r0, #8
 800d528:	0a1b      	lsrs	r3, r3, #8
 800d52a:	071a      	lsls	r2, r3, #28
 800d52c:	bf04      	itt	eq
 800d52e:	091b      	lsreq	r3, r3, #4
 800d530:	3004      	addeq	r0, #4
 800d532:	079a      	lsls	r2, r3, #30
 800d534:	bf04      	itt	eq
 800d536:	089b      	lsreq	r3, r3, #2
 800d538:	3002      	addeq	r0, #2
 800d53a:	07da      	lsls	r2, r3, #31
 800d53c:	d403      	bmi.n	800d546 <__lo0bits+0x4e>
 800d53e:	085b      	lsrs	r3, r3, #1
 800d540:	f100 0001 	add.w	r0, r0, #1
 800d544:	d005      	beq.n	800d552 <__lo0bits+0x5a>
 800d546:	600b      	str	r3, [r1, #0]
 800d548:	4770      	bx	lr
 800d54a:	4610      	mov	r0, r2
 800d54c:	e7e9      	b.n	800d522 <__lo0bits+0x2a>
 800d54e:	2000      	movs	r0, #0
 800d550:	4770      	bx	lr
 800d552:	2020      	movs	r0, #32
 800d554:	4770      	bx	lr
	...

0800d558 <__i2b>:
 800d558:	b510      	push	{r4, lr}
 800d55a:	460c      	mov	r4, r1
 800d55c:	2101      	movs	r1, #1
 800d55e:	f7ff ff03 	bl	800d368 <_Balloc>
 800d562:	4602      	mov	r2, r0
 800d564:	b928      	cbnz	r0, 800d572 <__i2b+0x1a>
 800d566:	4b05      	ldr	r3, [pc, #20]	; (800d57c <__i2b+0x24>)
 800d568:	4805      	ldr	r0, [pc, #20]	; (800d580 <__i2b+0x28>)
 800d56a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d56e:	f000 fce1 	bl	800df34 <__assert_func>
 800d572:	2301      	movs	r3, #1
 800d574:	6144      	str	r4, [r0, #20]
 800d576:	6103      	str	r3, [r0, #16]
 800d578:	bd10      	pop	{r4, pc}
 800d57a:	bf00      	nop
 800d57c:	080106f3 	.word	0x080106f3
 800d580:	08010704 	.word	0x08010704

0800d584 <__multiply>:
 800d584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d588:	4691      	mov	r9, r2
 800d58a:	690a      	ldr	r2, [r1, #16]
 800d58c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d590:	429a      	cmp	r2, r3
 800d592:	bfb8      	it	lt
 800d594:	460b      	movlt	r3, r1
 800d596:	460c      	mov	r4, r1
 800d598:	bfbc      	itt	lt
 800d59a:	464c      	movlt	r4, r9
 800d59c:	4699      	movlt	r9, r3
 800d59e:	6927      	ldr	r7, [r4, #16]
 800d5a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d5a4:	68a3      	ldr	r3, [r4, #8]
 800d5a6:	6861      	ldr	r1, [r4, #4]
 800d5a8:	eb07 060a 	add.w	r6, r7, sl
 800d5ac:	42b3      	cmp	r3, r6
 800d5ae:	b085      	sub	sp, #20
 800d5b0:	bfb8      	it	lt
 800d5b2:	3101      	addlt	r1, #1
 800d5b4:	f7ff fed8 	bl	800d368 <_Balloc>
 800d5b8:	b930      	cbnz	r0, 800d5c8 <__multiply+0x44>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	4b44      	ldr	r3, [pc, #272]	; (800d6d0 <__multiply+0x14c>)
 800d5be:	4845      	ldr	r0, [pc, #276]	; (800d6d4 <__multiply+0x150>)
 800d5c0:	f240 115d 	movw	r1, #349	; 0x15d
 800d5c4:	f000 fcb6 	bl	800df34 <__assert_func>
 800d5c8:	f100 0514 	add.w	r5, r0, #20
 800d5cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d5d0:	462b      	mov	r3, r5
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	4543      	cmp	r3, r8
 800d5d6:	d321      	bcc.n	800d61c <__multiply+0x98>
 800d5d8:	f104 0314 	add.w	r3, r4, #20
 800d5dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d5e0:	f109 0314 	add.w	r3, r9, #20
 800d5e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d5e8:	9202      	str	r2, [sp, #8]
 800d5ea:	1b3a      	subs	r2, r7, r4
 800d5ec:	3a15      	subs	r2, #21
 800d5ee:	f022 0203 	bic.w	r2, r2, #3
 800d5f2:	3204      	adds	r2, #4
 800d5f4:	f104 0115 	add.w	r1, r4, #21
 800d5f8:	428f      	cmp	r7, r1
 800d5fa:	bf38      	it	cc
 800d5fc:	2204      	movcc	r2, #4
 800d5fe:	9201      	str	r2, [sp, #4]
 800d600:	9a02      	ldr	r2, [sp, #8]
 800d602:	9303      	str	r3, [sp, #12]
 800d604:	429a      	cmp	r2, r3
 800d606:	d80c      	bhi.n	800d622 <__multiply+0x9e>
 800d608:	2e00      	cmp	r6, #0
 800d60a:	dd03      	ble.n	800d614 <__multiply+0x90>
 800d60c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d610:	2b00      	cmp	r3, #0
 800d612:	d05a      	beq.n	800d6ca <__multiply+0x146>
 800d614:	6106      	str	r6, [r0, #16]
 800d616:	b005      	add	sp, #20
 800d618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d61c:	f843 2b04 	str.w	r2, [r3], #4
 800d620:	e7d8      	b.n	800d5d4 <__multiply+0x50>
 800d622:	f8b3 a000 	ldrh.w	sl, [r3]
 800d626:	f1ba 0f00 	cmp.w	sl, #0
 800d62a:	d024      	beq.n	800d676 <__multiply+0xf2>
 800d62c:	f104 0e14 	add.w	lr, r4, #20
 800d630:	46a9      	mov	r9, r5
 800d632:	f04f 0c00 	mov.w	ip, #0
 800d636:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d63a:	f8d9 1000 	ldr.w	r1, [r9]
 800d63e:	fa1f fb82 	uxth.w	fp, r2
 800d642:	b289      	uxth	r1, r1
 800d644:	fb0a 110b 	mla	r1, sl, fp, r1
 800d648:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d64c:	f8d9 2000 	ldr.w	r2, [r9]
 800d650:	4461      	add	r1, ip
 800d652:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d656:	fb0a c20b 	mla	r2, sl, fp, ip
 800d65a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d65e:	b289      	uxth	r1, r1
 800d660:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d664:	4577      	cmp	r7, lr
 800d666:	f849 1b04 	str.w	r1, [r9], #4
 800d66a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d66e:	d8e2      	bhi.n	800d636 <__multiply+0xb2>
 800d670:	9a01      	ldr	r2, [sp, #4]
 800d672:	f845 c002 	str.w	ip, [r5, r2]
 800d676:	9a03      	ldr	r2, [sp, #12]
 800d678:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d67c:	3304      	adds	r3, #4
 800d67e:	f1b9 0f00 	cmp.w	r9, #0
 800d682:	d020      	beq.n	800d6c6 <__multiply+0x142>
 800d684:	6829      	ldr	r1, [r5, #0]
 800d686:	f104 0c14 	add.w	ip, r4, #20
 800d68a:	46ae      	mov	lr, r5
 800d68c:	f04f 0a00 	mov.w	sl, #0
 800d690:	f8bc b000 	ldrh.w	fp, [ip]
 800d694:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d698:	fb09 220b 	mla	r2, r9, fp, r2
 800d69c:	4492      	add	sl, r2
 800d69e:	b289      	uxth	r1, r1
 800d6a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d6a4:	f84e 1b04 	str.w	r1, [lr], #4
 800d6a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d6ac:	f8be 1000 	ldrh.w	r1, [lr]
 800d6b0:	0c12      	lsrs	r2, r2, #16
 800d6b2:	fb09 1102 	mla	r1, r9, r2, r1
 800d6b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d6ba:	4567      	cmp	r7, ip
 800d6bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d6c0:	d8e6      	bhi.n	800d690 <__multiply+0x10c>
 800d6c2:	9a01      	ldr	r2, [sp, #4]
 800d6c4:	50a9      	str	r1, [r5, r2]
 800d6c6:	3504      	adds	r5, #4
 800d6c8:	e79a      	b.n	800d600 <__multiply+0x7c>
 800d6ca:	3e01      	subs	r6, #1
 800d6cc:	e79c      	b.n	800d608 <__multiply+0x84>
 800d6ce:	bf00      	nop
 800d6d0:	080106f3 	.word	0x080106f3
 800d6d4:	08010704 	.word	0x08010704

0800d6d8 <__pow5mult>:
 800d6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6dc:	4615      	mov	r5, r2
 800d6de:	f012 0203 	ands.w	r2, r2, #3
 800d6e2:	4606      	mov	r6, r0
 800d6e4:	460f      	mov	r7, r1
 800d6e6:	d007      	beq.n	800d6f8 <__pow5mult+0x20>
 800d6e8:	4c25      	ldr	r4, [pc, #148]	; (800d780 <__pow5mult+0xa8>)
 800d6ea:	3a01      	subs	r2, #1
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d6f2:	f7ff fe9b 	bl	800d42c <__multadd>
 800d6f6:	4607      	mov	r7, r0
 800d6f8:	10ad      	asrs	r5, r5, #2
 800d6fa:	d03d      	beq.n	800d778 <__pow5mult+0xa0>
 800d6fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d6fe:	b97c      	cbnz	r4, 800d720 <__pow5mult+0x48>
 800d700:	2010      	movs	r0, #16
 800d702:	f7ff fe1b 	bl	800d33c <malloc>
 800d706:	4602      	mov	r2, r0
 800d708:	6270      	str	r0, [r6, #36]	; 0x24
 800d70a:	b928      	cbnz	r0, 800d718 <__pow5mult+0x40>
 800d70c:	4b1d      	ldr	r3, [pc, #116]	; (800d784 <__pow5mult+0xac>)
 800d70e:	481e      	ldr	r0, [pc, #120]	; (800d788 <__pow5mult+0xb0>)
 800d710:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d714:	f000 fc0e 	bl	800df34 <__assert_func>
 800d718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d71c:	6004      	str	r4, [r0, #0]
 800d71e:	60c4      	str	r4, [r0, #12]
 800d720:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d728:	b94c      	cbnz	r4, 800d73e <__pow5mult+0x66>
 800d72a:	f240 2171 	movw	r1, #625	; 0x271
 800d72e:	4630      	mov	r0, r6
 800d730:	f7ff ff12 	bl	800d558 <__i2b>
 800d734:	2300      	movs	r3, #0
 800d736:	f8c8 0008 	str.w	r0, [r8, #8]
 800d73a:	4604      	mov	r4, r0
 800d73c:	6003      	str	r3, [r0, #0]
 800d73e:	f04f 0900 	mov.w	r9, #0
 800d742:	07eb      	lsls	r3, r5, #31
 800d744:	d50a      	bpl.n	800d75c <__pow5mult+0x84>
 800d746:	4639      	mov	r1, r7
 800d748:	4622      	mov	r2, r4
 800d74a:	4630      	mov	r0, r6
 800d74c:	f7ff ff1a 	bl	800d584 <__multiply>
 800d750:	4639      	mov	r1, r7
 800d752:	4680      	mov	r8, r0
 800d754:	4630      	mov	r0, r6
 800d756:	f7ff fe47 	bl	800d3e8 <_Bfree>
 800d75a:	4647      	mov	r7, r8
 800d75c:	106d      	asrs	r5, r5, #1
 800d75e:	d00b      	beq.n	800d778 <__pow5mult+0xa0>
 800d760:	6820      	ldr	r0, [r4, #0]
 800d762:	b938      	cbnz	r0, 800d774 <__pow5mult+0x9c>
 800d764:	4622      	mov	r2, r4
 800d766:	4621      	mov	r1, r4
 800d768:	4630      	mov	r0, r6
 800d76a:	f7ff ff0b 	bl	800d584 <__multiply>
 800d76e:	6020      	str	r0, [r4, #0]
 800d770:	f8c0 9000 	str.w	r9, [r0]
 800d774:	4604      	mov	r4, r0
 800d776:	e7e4      	b.n	800d742 <__pow5mult+0x6a>
 800d778:	4638      	mov	r0, r7
 800d77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d77e:	bf00      	nop
 800d780:	08010850 	.word	0x08010850
 800d784:	08010681 	.word	0x08010681
 800d788:	08010704 	.word	0x08010704

0800d78c <__lshift>:
 800d78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d790:	460c      	mov	r4, r1
 800d792:	6849      	ldr	r1, [r1, #4]
 800d794:	6923      	ldr	r3, [r4, #16]
 800d796:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d79a:	68a3      	ldr	r3, [r4, #8]
 800d79c:	4607      	mov	r7, r0
 800d79e:	4691      	mov	r9, r2
 800d7a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7a4:	f108 0601 	add.w	r6, r8, #1
 800d7a8:	42b3      	cmp	r3, r6
 800d7aa:	db0b      	blt.n	800d7c4 <__lshift+0x38>
 800d7ac:	4638      	mov	r0, r7
 800d7ae:	f7ff fddb 	bl	800d368 <_Balloc>
 800d7b2:	4605      	mov	r5, r0
 800d7b4:	b948      	cbnz	r0, 800d7ca <__lshift+0x3e>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	4b2a      	ldr	r3, [pc, #168]	; (800d864 <__lshift+0xd8>)
 800d7ba:	482b      	ldr	r0, [pc, #172]	; (800d868 <__lshift+0xdc>)
 800d7bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d7c0:	f000 fbb8 	bl	800df34 <__assert_func>
 800d7c4:	3101      	adds	r1, #1
 800d7c6:	005b      	lsls	r3, r3, #1
 800d7c8:	e7ee      	b.n	800d7a8 <__lshift+0x1c>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	f100 0114 	add.w	r1, r0, #20
 800d7d0:	f100 0210 	add.w	r2, r0, #16
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	4553      	cmp	r3, sl
 800d7d8:	db37      	blt.n	800d84a <__lshift+0xbe>
 800d7da:	6920      	ldr	r0, [r4, #16]
 800d7dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d7e0:	f104 0314 	add.w	r3, r4, #20
 800d7e4:	f019 091f 	ands.w	r9, r9, #31
 800d7e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d7ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d7f0:	d02f      	beq.n	800d852 <__lshift+0xc6>
 800d7f2:	f1c9 0e20 	rsb	lr, r9, #32
 800d7f6:	468a      	mov	sl, r1
 800d7f8:	f04f 0c00 	mov.w	ip, #0
 800d7fc:	681a      	ldr	r2, [r3, #0]
 800d7fe:	fa02 f209 	lsl.w	r2, r2, r9
 800d802:	ea42 020c 	orr.w	r2, r2, ip
 800d806:	f84a 2b04 	str.w	r2, [sl], #4
 800d80a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d80e:	4298      	cmp	r0, r3
 800d810:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d814:	d8f2      	bhi.n	800d7fc <__lshift+0x70>
 800d816:	1b03      	subs	r3, r0, r4
 800d818:	3b15      	subs	r3, #21
 800d81a:	f023 0303 	bic.w	r3, r3, #3
 800d81e:	3304      	adds	r3, #4
 800d820:	f104 0215 	add.w	r2, r4, #21
 800d824:	4290      	cmp	r0, r2
 800d826:	bf38      	it	cc
 800d828:	2304      	movcc	r3, #4
 800d82a:	f841 c003 	str.w	ip, [r1, r3]
 800d82e:	f1bc 0f00 	cmp.w	ip, #0
 800d832:	d001      	beq.n	800d838 <__lshift+0xac>
 800d834:	f108 0602 	add.w	r6, r8, #2
 800d838:	3e01      	subs	r6, #1
 800d83a:	4638      	mov	r0, r7
 800d83c:	612e      	str	r6, [r5, #16]
 800d83e:	4621      	mov	r1, r4
 800d840:	f7ff fdd2 	bl	800d3e8 <_Bfree>
 800d844:	4628      	mov	r0, r5
 800d846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d84a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d84e:	3301      	adds	r3, #1
 800d850:	e7c1      	b.n	800d7d6 <__lshift+0x4a>
 800d852:	3904      	subs	r1, #4
 800d854:	f853 2b04 	ldr.w	r2, [r3], #4
 800d858:	f841 2f04 	str.w	r2, [r1, #4]!
 800d85c:	4298      	cmp	r0, r3
 800d85e:	d8f9      	bhi.n	800d854 <__lshift+0xc8>
 800d860:	e7ea      	b.n	800d838 <__lshift+0xac>
 800d862:	bf00      	nop
 800d864:	080106f3 	.word	0x080106f3
 800d868:	08010704 	.word	0x08010704

0800d86c <__mcmp>:
 800d86c:	b530      	push	{r4, r5, lr}
 800d86e:	6902      	ldr	r2, [r0, #16]
 800d870:	690c      	ldr	r4, [r1, #16]
 800d872:	1b12      	subs	r2, r2, r4
 800d874:	d10e      	bne.n	800d894 <__mcmp+0x28>
 800d876:	f100 0314 	add.w	r3, r0, #20
 800d87a:	3114      	adds	r1, #20
 800d87c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d880:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d884:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d888:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d88c:	42a5      	cmp	r5, r4
 800d88e:	d003      	beq.n	800d898 <__mcmp+0x2c>
 800d890:	d305      	bcc.n	800d89e <__mcmp+0x32>
 800d892:	2201      	movs	r2, #1
 800d894:	4610      	mov	r0, r2
 800d896:	bd30      	pop	{r4, r5, pc}
 800d898:	4283      	cmp	r3, r0
 800d89a:	d3f3      	bcc.n	800d884 <__mcmp+0x18>
 800d89c:	e7fa      	b.n	800d894 <__mcmp+0x28>
 800d89e:	f04f 32ff 	mov.w	r2, #4294967295
 800d8a2:	e7f7      	b.n	800d894 <__mcmp+0x28>

0800d8a4 <__mdiff>:
 800d8a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a8:	460c      	mov	r4, r1
 800d8aa:	4606      	mov	r6, r0
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	4690      	mov	r8, r2
 800d8b2:	f7ff ffdb 	bl	800d86c <__mcmp>
 800d8b6:	1e05      	subs	r5, r0, #0
 800d8b8:	d110      	bne.n	800d8dc <__mdiff+0x38>
 800d8ba:	4629      	mov	r1, r5
 800d8bc:	4630      	mov	r0, r6
 800d8be:	f7ff fd53 	bl	800d368 <_Balloc>
 800d8c2:	b930      	cbnz	r0, 800d8d2 <__mdiff+0x2e>
 800d8c4:	4b3a      	ldr	r3, [pc, #232]	; (800d9b0 <__mdiff+0x10c>)
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	f240 2132 	movw	r1, #562	; 0x232
 800d8cc:	4839      	ldr	r0, [pc, #228]	; (800d9b4 <__mdiff+0x110>)
 800d8ce:	f000 fb31 	bl	800df34 <__assert_func>
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d8d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8dc:	bfa4      	itt	ge
 800d8de:	4643      	movge	r3, r8
 800d8e0:	46a0      	movge	r8, r4
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d8e8:	bfa6      	itte	ge
 800d8ea:	461c      	movge	r4, r3
 800d8ec:	2500      	movge	r5, #0
 800d8ee:	2501      	movlt	r5, #1
 800d8f0:	f7ff fd3a 	bl	800d368 <_Balloc>
 800d8f4:	b920      	cbnz	r0, 800d900 <__mdiff+0x5c>
 800d8f6:	4b2e      	ldr	r3, [pc, #184]	; (800d9b0 <__mdiff+0x10c>)
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d8fe:	e7e5      	b.n	800d8cc <__mdiff+0x28>
 800d900:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d904:	6926      	ldr	r6, [r4, #16]
 800d906:	60c5      	str	r5, [r0, #12]
 800d908:	f104 0914 	add.w	r9, r4, #20
 800d90c:	f108 0514 	add.w	r5, r8, #20
 800d910:	f100 0e14 	add.w	lr, r0, #20
 800d914:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d918:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d91c:	f108 0210 	add.w	r2, r8, #16
 800d920:	46f2      	mov	sl, lr
 800d922:	2100      	movs	r1, #0
 800d924:	f859 3b04 	ldr.w	r3, [r9], #4
 800d928:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d92c:	fa1f f883 	uxth.w	r8, r3
 800d930:	fa11 f18b 	uxtah	r1, r1, fp
 800d934:	0c1b      	lsrs	r3, r3, #16
 800d936:	eba1 0808 	sub.w	r8, r1, r8
 800d93a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d93e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d942:	fa1f f888 	uxth.w	r8, r8
 800d946:	1419      	asrs	r1, r3, #16
 800d948:	454e      	cmp	r6, r9
 800d94a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d94e:	f84a 3b04 	str.w	r3, [sl], #4
 800d952:	d8e7      	bhi.n	800d924 <__mdiff+0x80>
 800d954:	1b33      	subs	r3, r6, r4
 800d956:	3b15      	subs	r3, #21
 800d958:	f023 0303 	bic.w	r3, r3, #3
 800d95c:	3304      	adds	r3, #4
 800d95e:	3415      	adds	r4, #21
 800d960:	42a6      	cmp	r6, r4
 800d962:	bf38      	it	cc
 800d964:	2304      	movcc	r3, #4
 800d966:	441d      	add	r5, r3
 800d968:	4473      	add	r3, lr
 800d96a:	469e      	mov	lr, r3
 800d96c:	462e      	mov	r6, r5
 800d96e:	4566      	cmp	r6, ip
 800d970:	d30e      	bcc.n	800d990 <__mdiff+0xec>
 800d972:	f10c 0203 	add.w	r2, ip, #3
 800d976:	1b52      	subs	r2, r2, r5
 800d978:	f022 0203 	bic.w	r2, r2, #3
 800d97c:	3d03      	subs	r5, #3
 800d97e:	45ac      	cmp	ip, r5
 800d980:	bf38      	it	cc
 800d982:	2200      	movcc	r2, #0
 800d984:	441a      	add	r2, r3
 800d986:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d98a:	b17b      	cbz	r3, 800d9ac <__mdiff+0x108>
 800d98c:	6107      	str	r7, [r0, #16]
 800d98e:	e7a3      	b.n	800d8d8 <__mdiff+0x34>
 800d990:	f856 8b04 	ldr.w	r8, [r6], #4
 800d994:	fa11 f288 	uxtah	r2, r1, r8
 800d998:	1414      	asrs	r4, r2, #16
 800d99a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d99e:	b292      	uxth	r2, r2
 800d9a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d9a4:	f84e 2b04 	str.w	r2, [lr], #4
 800d9a8:	1421      	asrs	r1, r4, #16
 800d9aa:	e7e0      	b.n	800d96e <__mdiff+0xca>
 800d9ac:	3f01      	subs	r7, #1
 800d9ae:	e7ea      	b.n	800d986 <__mdiff+0xe2>
 800d9b0:	080106f3 	.word	0x080106f3
 800d9b4:	08010704 	.word	0x08010704

0800d9b8 <__d2b>:
 800d9b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9bc:	4689      	mov	r9, r1
 800d9be:	2101      	movs	r1, #1
 800d9c0:	ec57 6b10 	vmov	r6, r7, d0
 800d9c4:	4690      	mov	r8, r2
 800d9c6:	f7ff fccf 	bl	800d368 <_Balloc>
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	b930      	cbnz	r0, 800d9dc <__d2b+0x24>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	4b25      	ldr	r3, [pc, #148]	; (800da68 <__d2b+0xb0>)
 800d9d2:	4826      	ldr	r0, [pc, #152]	; (800da6c <__d2b+0xb4>)
 800d9d4:	f240 310a 	movw	r1, #778	; 0x30a
 800d9d8:	f000 faac 	bl	800df34 <__assert_func>
 800d9dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d9e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d9e4:	bb35      	cbnz	r5, 800da34 <__d2b+0x7c>
 800d9e6:	2e00      	cmp	r6, #0
 800d9e8:	9301      	str	r3, [sp, #4]
 800d9ea:	d028      	beq.n	800da3e <__d2b+0x86>
 800d9ec:	4668      	mov	r0, sp
 800d9ee:	9600      	str	r6, [sp, #0]
 800d9f0:	f7ff fd82 	bl	800d4f8 <__lo0bits>
 800d9f4:	9900      	ldr	r1, [sp, #0]
 800d9f6:	b300      	cbz	r0, 800da3a <__d2b+0x82>
 800d9f8:	9a01      	ldr	r2, [sp, #4]
 800d9fa:	f1c0 0320 	rsb	r3, r0, #32
 800d9fe:	fa02 f303 	lsl.w	r3, r2, r3
 800da02:	430b      	orrs	r3, r1
 800da04:	40c2      	lsrs	r2, r0
 800da06:	6163      	str	r3, [r4, #20]
 800da08:	9201      	str	r2, [sp, #4]
 800da0a:	9b01      	ldr	r3, [sp, #4]
 800da0c:	61a3      	str	r3, [r4, #24]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	bf14      	ite	ne
 800da12:	2202      	movne	r2, #2
 800da14:	2201      	moveq	r2, #1
 800da16:	6122      	str	r2, [r4, #16]
 800da18:	b1d5      	cbz	r5, 800da50 <__d2b+0x98>
 800da1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da1e:	4405      	add	r5, r0
 800da20:	f8c9 5000 	str.w	r5, [r9]
 800da24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da28:	f8c8 0000 	str.w	r0, [r8]
 800da2c:	4620      	mov	r0, r4
 800da2e:	b003      	add	sp, #12
 800da30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da38:	e7d5      	b.n	800d9e6 <__d2b+0x2e>
 800da3a:	6161      	str	r1, [r4, #20]
 800da3c:	e7e5      	b.n	800da0a <__d2b+0x52>
 800da3e:	a801      	add	r0, sp, #4
 800da40:	f7ff fd5a 	bl	800d4f8 <__lo0bits>
 800da44:	9b01      	ldr	r3, [sp, #4]
 800da46:	6163      	str	r3, [r4, #20]
 800da48:	2201      	movs	r2, #1
 800da4a:	6122      	str	r2, [r4, #16]
 800da4c:	3020      	adds	r0, #32
 800da4e:	e7e3      	b.n	800da18 <__d2b+0x60>
 800da50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da58:	f8c9 0000 	str.w	r0, [r9]
 800da5c:	6918      	ldr	r0, [r3, #16]
 800da5e:	f7ff fd2b 	bl	800d4b8 <__hi0bits>
 800da62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da66:	e7df      	b.n	800da28 <__d2b+0x70>
 800da68:	080106f3 	.word	0x080106f3
 800da6c:	08010704 	.word	0x08010704

0800da70 <_calloc_r>:
 800da70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da72:	fba1 2402 	umull	r2, r4, r1, r2
 800da76:	b94c      	cbnz	r4, 800da8c <_calloc_r+0x1c>
 800da78:	4611      	mov	r1, r2
 800da7a:	9201      	str	r2, [sp, #4]
 800da7c:	f000 f87a 	bl	800db74 <_malloc_r>
 800da80:	9a01      	ldr	r2, [sp, #4]
 800da82:	4605      	mov	r5, r0
 800da84:	b930      	cbnz	r0, 800da94 <_calloc_r+0x24>
 800da86:	4628      	mov	r0, r5
 800da88:	b003      	add	sp, #12
 800da8a:	bd30      	pop	{r4, r5, pc}
 800da8c:	220c      	movs	r2, #12
 800da8e:	6002      	str	r2, [r0, #0]
 800da90:	2500      	movs	r5, #0
 800da92:	e7f8      	b.n	800da86 <_calloc_r+0x16>
 800da94:	4621      	mov	r1, r4
 800da96:	f7fe f941 	bl	800bd1c <memset>
 800da9a:	e7f4      	b.n	800da86 <_calloc_r+0x16>

0800da9c <_free_r>:
 800da9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da9e:	2900      	cmp	r1, #0
 800daa0:	d044      	beq.n	800db2c <_free_r+0x90>
 800daa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daa6:	9001      	str	r0, [sp, #4]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f1a1 0404 	sub.w	r4, r1, #4
 800daae:	bfb8      	it	lt
 800dab0:	18e4      	addlt	r4, r4, r3
 800dab2:	f000 fa9b 	bl	800dfec <__malloc_lock>
 800dab6:	4a1e      	ldr	r2, [pc, #120]	; (800db30 <_free_r+0x94>)
 800dab8:	9801      	ldr	r0, [sp, #4]
 800daba:	6813      	ldr	r3, [r2, #0]
 800dabc:	b933      	cbnz	r3, 800dacc <_free_r+0x30>
 800dabe:	6063      	str	r3, [r4, #4]
 800dac0:	6014      	str	r4, [r2, #0]
 800dac2:	b003      	add	sp, #12
 800dac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dac8:	f000 ba96 	b.w	800dff8 <__malloc_unlock>
 800dacc:	42a3      	cmp	r3, r4
 800dace:	d908      	bls.n	800dae2 <_free_r+0x46>
 800dad0:	6825      	ldr	r5, [r4, #0]
 800dad2:	1961      	adds	r1, r4, r5
 800dad4:	428b      	cmp	r3, r1
 800dad6:	bf01      	itttt	eq
 800dad8:	6819      	ldreq	r1, [r3, #0]
 800dada:	685b      	ldreq	r3, [r3, #4]
 800dadc:	1949      	addeq	r1, r1, r5
 800dade:	6021      	streq	r1, [r4, #0]
 800dae0:	e7ed      	b.n	800dabe <_free_r+0x22>
 800dae2:	461a      	mov	r2, r3
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	b10b      	cbz	r3, 800daec <_free_r+0x50>
 800dae8:	42a3      	cmp	r3, r4
 800daea:	d9fa      	bls.n	800dae2 <_free_r+0x46>
 800daec:	6811      	ldr	r1, [r2, #0]
 800daee:	1855      	adds	r5, r2, r1
 800daf0:	42a5      	cmp	r5, r4
 800daf2:	d10b      	bne.n	800db0c <_free_r+0x70>
 800daf4:	6824      	ldr	r4, [r4, #0]
 800daf6:	4421      	add	r1, r4
 800daf8:	1854      	adds	r4, r2, r1
 800dafa:	42a3      	cmp	r3, r4
 800dafc:	6011      	str	r1, [r2, #0]
 800dafe:	d1e0      	bne.n	800dac2 <_free_r+0x26>
 800db00:	681c      	ldr	r4, [r3, #0]
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	6053      	str	r3, [r2, #4]
 800db06:	4421      	add	r1, r4
 800db08:	6011      	str	r1, [r2, #0]
 800db0a:	e7da      	b.n	800dac2 <_free_r+0x26>
 800db0c:	d902      	bls.n	800db14 <_free_r+0x78>
 800db0e:	230c      	movs	r3, #12
 800db10:	6003      	str	r3, [r0, #0]
 800db12:	e7d6      	b.n	800dac2 <_free_r+0x26>
 800db14:	6825      	ldr	r5, [r4, #0]
 800db16:	1961      	adds	r1, r4, r5
 800db18:	428b      	cmp	r3, r1
 800db1a:	bf04      	itt	eq
 800db1c:	6819      	ldreq	r1, [r3, #0]
 800db1e:	685b      	ldreq	r3, [r3, #4]
 800db20:	6063      	str	r3, [r4, #4]
 800db22:	bf04      	itt	eq
 800db24:	1949      	addeq	r1, r1, r5
 800db26:	6021      	streq	r1, [r4, #0]
 800db28:	6054      	str	r4, [r2, #4]
 800db2a:	e7ca      	b.n	800dac2 <_free_r+0x26>
 800db2c:	b003      	add	sp, #12
 800db2e:	bd30      	pop	{r4, r5, pc}
 800db30:	20002274 	.word	0x20002274

0800db34 <sbrk_aligned>:
 800db34:	b570      	push	{r4, r5, r6, lr}
 800db36:	4e0e      	ldr	r6, [pc, #56]	; (800db70 <sbrk_aligned+0x3c>)
 800db38:	460c      	mov	r4, r1
 800db3a:	6831      	ldr	r1, [r6, #0]
 800db3c:	4605      	mov	r5, r0
 800db3e:	b911      	cbnz	r1, 800db46 <sbrk_aligned+0x12>
 800db40:	f000 f9e8 	bl	800df14 <_sbrk_r>
 800db44:	6030      	str	r0, [r6, #0]
 800db46:	4621      	mov	r1, r4
 800db48:	4628      	mov	r0, r5
 800db4a:	f000 f9e3 	bl	800df14 <_sbrk_r>
 800db4e:	1c43      	adds	r3, r0, #1
 800db50:	d00a      	beq.n	800db68 <sbrk_aligned+0x34>
 800db52:	1cc4      	adds	r4, r0, #3
 800db54:	f024 0403 	bic.w	r4, r4, #3
 800db58:	42a0      	cmp	r0, r4
 800db5a:	d007      	beq.n	800db6c <sbrk_aligned+0x38>
 800db5c:	1a21      	subs	r1, r4, r0
 800db5e:	4628      	mov	r0, r5
 800db60:	f000 f9d8 	bl	800df14 <_sbrk_r>
 800db64:	3001      	adds	r0, #1
 800db66:	d101      	bne.n	800db6c <sbrk_aligned+0x38>
 800db68:	f04f 34ff 	mov.w	r4, #4294967295
 800db6c:	4620      	mov	r0, r4
 800db6e:	bd70      	pop	{r4, r5, r6, pc}
 800db70:	20002278 	.word	0x20002278

0800db74 <_malloc_r>:
 800db74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db78:	1ccd      	adds	r5, r1, #3
 800db7a:	f025 0503 	bic.w	r5, r5, #3
 800db7e:	3508      	adds	r5, #8
 800db80:	2d0c      	cmp	r5, #12
 800db82:	bf38      	it	cc
 800db84:	250c      	movcc	r5, #12
 800db86:	2d00      	cmp	r5, #0
 800db88:	4607      	mov	r7, r0
 800db8a:	db01      	blt.n	800db90 <_malloc_r+0x1c>
 800db8c:	42a9      	cmp	r1, r5
 800db8e:	d905      	bls.n	800db9c <_malloc_r+0x28>
 800db90:	230c      	movs	r3, #12
 800db92:	603b      	str	r3, [r7, #0]
 800db94:	2600      	movs	r6, #0
 800db96:	4630      	mov	r0, r6
 800db98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db9c:	4e2e      	ldr	r6, [pc, #184]	; (800dc58 <_malloc_r+0xe4>)
 800db9e:	f000 fa25 	bl	800dfec <__malloc_lock>
 800dba2:	6833      	ldr	r3, [r6, #0]
 800dba4:	461c      	mov	r4, r3
 800dba6:	bb34      	cbnz	r4, 800dbf6 <_malloc_r+0x82>
 800dba8:	4629      	mov	r1, r5
 800dbaa:	4638      	mov	r0, r7
 800dbac:	f7ff ffc2 	bl	800db34 <sbrk_aligned>
 800dbb0:	1c43      	adds	r3, r0, #1
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	d14d      	bne.n	800dc52 <_malloc_r+0xde>
 800dbb6:	6834      	ldr	r4, [r6, #0]
 800dbb8:	4626      	mov	r6, r4
 800dbba:	2e00      	cmp	r6, #0
 800dbbc:	d140      	bne.n	800dc40 <_malloc_r+0xcc>
 800dbbe:	6823      	ldr	r3, [r4, #0]
 800dbc0:	4631      	mov	r1, r6
 800dbc2:	4638      	mov	r0, r7
 800dbc4:	eb04 0803 	add.w	r8, r4, r3
 800dbc8:	f000 f9a4 	bl	800df14 <_sbrk_r>
 800dbcc:	4580      	cmp	r8, r0
 800dbce:	d13a      	bne.n	800dc46 <_malloc_r+0xd2>
 800dbd0:	6821      	ldr	r1, [r4, #0]
 800dbd2:	3503      	adds	r5, #3
 800dbd4:	1a6d      	subs	r5, r5, r1
 800dbd6:	f025 0503 	bic.w	r5, r5, #3
 800dbda:	3508      	adds	r5, #8
 800dbdc:	2d0c      	cmp	r5, #12
 800dbde:	bf38      	it	cc
 800dbe0:	250c      	movcc	r5, #12
 800dbe2:	4629      	mov	r1, r5
 800dbe4:	4638      	mov	r0, r7
 800dbe6:	f7ff ffa5 	bl	800db34 <sbrk_aligned>
 800dbea:	3001      	adds	r0, #1
 800dbec:	d02b      	beq.n	800dc46 <_malloc_r+0xd2>
 800dbee:	6823      	ldr	r3, [r4, #0]
 800dbf0:	442b      	add	r3, r5
 800dbf2:	6023      	str	r3, [r4, #0]
 800dbf4:	e00e      	b.n	800dc14 <_malloc_r+0xa0>
 800dbf6:	6822      	ldr	r2, [r4, #0]
 800dbf8:	1b52      	subs	r2, r2, r5
 800dbfa:	d41e      	bmi.n	800dc3a <_malloc_r+0xc6>
 800dbfc:	2a0b      	cmp	r2, #11
 800dbfe:	d916      	bls.n	800dc2e <_malloc_r+0xba>
 800dc00:	1961      	adds	r1, r4, r5
 800dc02:	42a3      	cmp	r3, r4
 800dc04:	6025      	str	r5, [r4, #0]
 800dc06:	bf18      	it	ne
 800dc08:	6059      	strne	r1, [r3, #4]
 800dc0a:	6863      	ldr	r3, [r4, #4]
 800dc0c:	bf08      	it	eq
 800dc0e:	6031      	streq	r1, [r6, #0]
 800dc10:	5162      	str	r2, [r4, r5]
 800dc12:	604b      	str	r3, [r1, #4]
 800dc14:	4638      	mov	r0, r7
 800dc16:	f104 060b 	add.w	r6, r4, #11
 800dc1a:	f000 f9ed 	bl	800dff8 <__malloc_unlock>
 800dc1e:	f026 0607 	bic.w	r6, r6, #7
 800dc22:	1d23      	adds	r3, r4, #4
 800dc24:	1af2      	subs	r2, r6, r3
 800dc26:	d0b6      	beq.n	800db96 <_malloc_r+0x22>
 800dc28:	1b9b      	subs	r3, r3, r6
 800dc2a:	50a3      	str	r3, [r4, r2]
 800dc2c:	e7b3      	b.n	800db96 <_malloc_r+0x22>
 800dc2e:	6862      	ldr	r2, [r4, #4]
 800dc30:	42a3      	cmp	r3, r4
 800dc32:	bf0c      	ite	eq
 800dc34:	6032      	streq	r2, [r6, #0]
 800dc36:	605a      	strne	r2, [r3, #4]
 800dc38:	e7ec      	b.n	800dc14 <_malloc_r+0xa0>
 800dc3a:	4623      	mov	r3, r4
 800dc3c:	6864      	ldr	r4, [r4, #4]
 800dc3e:	e7b2      	b.n	800dba6 <_malloc_r+0x32>
 800dc40:	4634      	mov	r4, r6
 800dc42:	6876      	ldr	r6, [r6, #4]
 800dc44:	e7b9      	b.n	800dbba <_malloc_r+0x46>
 800dc46:	230c      	movs	r3, #12
 800dc48:	603b      	str	r3, [r7, #0]
 800dc4a:	4638      	mov	r0, r7
 800dc4c:	f000 f9d4 	bl	800dff8 <__malloc_unlock>
 800dc50:	e7a1      	b.n	800db96 <_malloc_r+0x22>
 800dc52:	6025      	str	r5, [r4, #0]
 800dc54:	e7de      	b.n	800dc14 <_malloc_r+0xa0>
 800dc56:	bf00      	nop
 800dc58:	20002274 	.word	0x20002274

0800dc5c <__ssputs_r>:
 800dc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc60:	688e      	ldr	r6, [r1, #8]
 800dc62:	429e      	cmp	r6, r3
 800dc64:	4682      	mov	sl, r0
 800dc66:	460c      	mov	r4, r1
 800dc68:	4690      	mov	r8, r2
 800dc6a:	461f      	mov	r7, r3
 800dc6c:	d838      	bhi.n	800dce0 <__ssputs_r+0x84>
 800dc6e:	898a      	ldrh	r2, [r1, #12]
 800dc70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc74:	d032      	beq.n	800dcdc <__ssputs_r+0x80>
 800dc76:	6825      	ldr	r5, [r4, #0]
 800dc78:	6909      	ldr	r1, [r1, #16]
 800dc7a:	eba5 0901 	sub.w	r9, r5, r1
 800dc7e:	6965      	ldr	r5, [r4, #20]
 800dc80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc88:	3301      	adds	r3, #1
 800dc8a:	444b      	add	r3, r9
 800dc8c:	106d      	asrs	r5, r5, #1
 800dc8e:	429d      	cmp	r5, r3
 800dc90:	bf38      	it	cc
 800dc92:	461d      	movcc	r5, r3
 800dc94:	0553      	lsls	r3, r2, #21
 800dc96:	d531      	bpl.n	800dcfc <__ssputs_r+0xa0>
 800dc98:	4629      	mov	r1, r5
 800dc9a:	f7ff ff6b 	bl	800db74 <_malloc_r>
 800dc9e:	4606      	mov	r6, r0
 800dca0:	b950      	cbnz	r0, 800dcb8 <__ssputs_r+0x5c>
 800dca2:	230c      	movs	r3, #12
 800dca4:	f8ca 3000 	str.w	r3, [sl]
 800dca8:	89a3      	ldrh	r3, [r4, #12]
 800dcaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcae:	81a3      	strh	r3, [r4, #12]
 800dcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcb8:	6921      	ldr	r1, [r4, #16]
 800dcba:	464a      	mov	r2, r9
 800dcbc:	f7ff fb46 	bl	800d34c <memcpy>
 800dcc0:	89a3      	ldrh	r3, [r4, #12]
 800dcc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dcc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcca:	81a3      	strh	r3, [r4, #12]
 800dccc:	6126      	str	r6, [r4, #16]
 800dcce:	6165      	str	r5, [r4, #20]
 800dcd0:	444e      	add	r6, r9
 800dcd2:	eba5 0509 	sub.w	r5, r5, r9
 800dcd6:	6026      	str	r6, [r4, #0]
 800dcd8:	60a5      	str	r5, [r4, #8]
 800dcda:	463e      	mov	r6, r7
 800dcdc:	42be      	cmp	r6, r7
 800dcde:	d900      	bls.n	800dce2 <__ssputs_r+0x86>
 800dce0:	463e      	mov	r6, r7
 800dce2:	6820      	ldr	r0, [r4, #0]
 800dce4:	4632      	mov	r2, r6
 800dce6:	4641      	mov	r1, r8
 800dce8:	f000 f966 	bl	800dfb8 <memmove>
 800dcec:	68a3      	ldr	r3, [r4, #8]
 800dcee:	1b9b      	subs	r3, r3, r6
 800dcf0:	60a3      	str	r3, [r4, #8]
 800dcf2:	6823      	ldr	r3, [r4, #0]
 800dcf4:	4433      	add	r3, r6
 800dcf6:	6023      	str	r3, [r4, #0]
 800dcf8:	2000      	movs	r0, #0
 800dcfa:	e7db      	b.n	800dcb4 <__ssputs_r+0x58>
 800dcfc:	462a      	mov	r2, r5
 800dcfe:	f000 f981 	bl	800e004 <_realloc_r>
 800dd02:	4606      	mov	r6, r0
 800dd04:	2800      	cmp	r0, #0
 800dd06:	d1e1      	bne.n	800dccc <__ssputs_r+0x70>
 800dd08:	6921      	ldr	r1, [r4, #16]
 800dd0a:	4650      	mov	r0, sl
 800dd0c:	f7ff fec6 	bl	800da9c <_free_r>
 800dd10:	e7c7      	b.n	800dca2 <__ssputs_r+0x46>
	...

0800dd14 <_svfiprintf_r>:
 800dd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd18:	4698      	mov	r8, r3
 800dd1a:	898b      	ldrh	r3, [r1, #12]
 800dd1c:	061b      	lsls	r3, r3, #24
 800dd1e:	b09d      	sub	sp, #116	; 0x74
 800dd20:	4607      	mov	r7, r0
 800dd22:	460d      	mov	r5, r1
 800dd24:	4614      	mov	r4, r2
 800dd26:	d50e      	bpl.n	800dd46 <_svfiprintf_r+0x32>
 800dd28:	690b      	ldr	r3, [r1, #16]
 800dd2a:	b963      	cbnz	r3, 800dd46 <_svfiprintf_r+0x32>
 800dd2c:	2140      	movs	r1, #64	; 0x40
 800dd2e:	f7ff ff21 	bl	800db74 <_malloc_r>
 800dd32:	6028      	str	r0, [r5, #0]
 800dd34:	6128      	str	r0, [r5, #16]
 800dd36:	b920      	cbnz	r0, 800dd42 <_svfiprintf_r+0x2e>
 800dd38:	230c      	movs	r3, #12
 800dd3a:	603b      	str	r3, [r7, #0]
 800dd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd40:	e0d1      	b.n	800dee6 <_svfiprintf_r+0x1d2>
 800dd42:	2340      	movs	r3, #64	; 0x40
 800dd44:	616b      	str	r3, [r5, #20]
 800dd46:	2300      	movs	r3, #0
 800dd48:	9309      	str	r3, [sp, #36]	; 0x24
 800dd4a:	2320      	movs	r3, #32
 800dd4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd50:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd54:	2330      	movs	r3, #48	; 0x30
 800dd56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800df00 <_svfiprintf_r+0x1ec>
 800dd5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd5e:	f04f 0901 	mov.w	r9, #1
 800dd62:	4623      	mov	r3, r4
 800dd64:	469a      	mov	sl, r3
 800dd66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd6a:	b10a      	cbz	r2, 800dd70 <_svfiprintf_r+0x5c>
 800dd6c:	2a25      	cmp	r2, #37	; 0x25
 800dd6e:	d1f9      	bne.n	800dd64 <_svfiprintf_r+0x50>
 800dd70:	ebba 0b04 	subs.w	fp, sl, r4
 800dd74:	d00b      	beq.n	800dd8e <_svfiprintf_r+0x7a>
 800dd76:	465b      	mov	r3, fp
 800dd78:	4622      	mov	r2, r4
 800dd7a:	4629      	mov	r1, r5
 800dd7c:	4638      	mov	r0, r7
 800dd7e:	f7ff ff6d 	bl	800dc5c <__ssputs_r>
 800dd82:	3001      	adds	r0, #1
 800dd84:	f000 80aa 	beq.w	800dedc <_svfiprintf_r+0x1c8>
 800dd88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd8a:	445a      	add	r2, fp
 800dd8c:	9209      	str	r2, [sp, #36]	; 0x24
 800dd8e:	f89a 3000 	ldrb.w	r3, [sl]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	f000 80a2 	beq.w	800dedc <_svfiprintf_r+0x1c8>
 800dd98:	2300      	movs	r3, #0
 800dd9a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dda2:	f10a 0a01 	add.w	sl, sl, #1
 800dda6:	9304      	str	r3, [sp, #16]
 800dda8:	9307      	str	r3, [sp, #28]
 800ddaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddae:	931a      	str	r3, [sp, #104]	; 0x68
 800ddb0:	4654      	mov	r4, sl
 800ddb2:	2205      	movs	r2, #5
 800ddb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddb8:	4851      	ldr	r0, [pc, #324]	; (800df00 <_svfiprintf_r+0x1ec>)
 800ddba:	f7f2 fa21 	bl	8000200 <memchr>
 800ddbe:	9a04      	ldr	r2, [sp, #16]
 800ddc0:	b9d8      	cbnz	r0, 800ddfa <_svfiprintf_r+0xe6>
 800ddc2:	06d0      	lsls	r0, r2, #27
 800ddc4:	bf44      	itt	mi
 800ddc6:	2320      	movmi	r3, #32
 800ddc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddcc:	0711      	lsls	r1, r2, #28
 800ddce:	bf44      	itt	mi
 800ddd0:	232b      	movmi	r3, #43	; 0x2b
 800ddd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddd6:	f89a 3000 	ldrb.w	r3, [sl]
 800ddda:	2b2a      	cmp	r3, #42	; 0x2a
 800dddc:	d015      	beq.n	800de0a <_svfiprintf_r+0xf6>
 800ddde:	9a07      	ldr	r2, [sp, #28]
 800dde0:	4654      	mov	r4, sl
 800dde2:	2000      	movs	r0, #0
 800dde4:	f04f 0c0a 	mov.w	ip, #10
 800dde8:	4621      	mov	r1, r4
 800ddea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddee:	3b30      	subs	r3, #48	; 0x30
 800ddf0:	2b09      	cmp	r3, #9
 800ddf2:	d94e      	bls.n	800de92 <_svfiprintf_r+0x17e>
 800ddf4:	b1b0      	cbz	r0, 800de24 <_svfiprintf_r+0x110>
 800ddf6:	9207      	str	r2, [sp, #28]
 800ddf8:	e014      	b.n	800de24 <_svfiprintf_r+0x110>
 800ddfa:	eba0 0308 	sub.w	r3, r0, r8
 800ddfe:	fa09 f303 	lsl.w	r3, r9, r3
 800de02:	4313      	orrs	r3, r2
 800de04:	9304      	str	r3, [sp, #16]
 800de06:	46a2      	mov	sl, r4
 800de08:	e7d2      	b.n	800ddb0 <_svfiprintf_r+0x9c>
 800de0a:	9b03      	ldr	r3, [sp, #12]
 800de0c:	1d19      	adds	r1, r3, #4
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	9103      	str	r1, [sp, #12]
 800de12:	2b00      	cmp	r3, #0
 800de14:	bfbb      	ittet	lt
 800de16:	425b      	neglt	r3, r3
 800de18:	f042 0202 	orrlt.w	r2, r2, #2
 800de1c:	9307      	strge	r3, [sp, #28]
 800de1e:	9307      	strlt	r3, [sp, #28]
 800de20:	bfb8      	it	lt
 800de22:	9204      	strlt	r2, [sp, #16]
 800de24:	7823      	ldrb	r3, [r4, #0]
 800de26:	2b2e      	cmp	r3, #46	; 0x2e
 800de28:	d10c      	bne.n	800de44 <_svfiprintf_r+0x130>
 800de2a:	7863      	ldrb	r3, [r4, #1]
 800de2c:	2b2a      	cmp	r3, #42	; 0x2a
 800de2e:	d135      	bne.n	800de9c <_svfiprintf_r+0x188>
 800de30:	9b03      	ldr	r3, [sp, #12]
 800de32:	1d1a      	adds	r2, r3, #4
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	9203      	str	r2, [sp, #12]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	bfb8      	it	lt
 800de3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800de40:	3402      	adds	r4, #2
 800de42:	9305      	str	r3, [sp, #20]
 800de44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800df10 <_svfiprintf_r+0x1fc>
 800de48:	7821      	ldrb	r1, [r4, #0]
 800de4a:	2203      	movs	r2, #3
 800de4c:	4650      	mov	r0, sl
 800de4e:	f7f2 f9d7 	bl	8000200 <memchr>
 800de52:	b140      	cbz	r0, 800de66 <_svfiprintf_r+0x152>
 800de54:	2340      	movs	r3, #64	; 0x40
 800de56:	eba0 000a 	sub.w	r0, r0, sl
 800de5a:	fa03 f000 	lsl.w	r0, r3, r0
 800de5e:	9b04      	ldr	r3, [sp, #16]
 800de60:	4303      	orrs	r3, r0
 800de62:	3401      	adds	r4, #1
 800de64:	9304      	str	r3, [sp, #16]
 800de66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de6a:	4826      	ldr	r0, [pc, #152]	; (800df04 <_svfiprintf_r+0x1f0>)
 800de6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de70:	2206      	movs	r2, #6
 800de72:	f7f2 f9c5 	bl	8000200 <memchr>
 800de76:	2800      	cmp	r0, #0
 800de78:	d038      	beq.n	800deec <_svfiprintf_r+0x1d8>
 800de7a:	4b23      	ldr	r3, [pc, #140]	; (800df08 <_svfiprintf_r+0x1f4>)
 800de7c:	bb1b      	cbnz	r3, 800dec6 <_svfiprintf_r+0x1b2>
 800de7e:	9b03      	ldr	r3, [sp, #12]
 800de80:	3307      	adds	r3, #7
 800de82:	f023 0307 	bic.w	r3, r3, #7
 800de86:	3308      	adds	r3, #8
 800de88:	9303      	str	r3, [sp, #12]
 800de8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de8c:	4433      	add	r3, r6
 800de8e:	9309      	str	r3, [sp, #36]	; 0x24
 800de90:	e767      	b.n	800dd62 <_svfiprintf_r+0x4e>
 800de92:	fb0c 3202 	mla	r2, ip, r2, r3
 800de96:	460c      	mov	r4, r1
 800de98:	2001      	movs	r0, #1
 800de9a:	e7a5      	b.n	800dde8 <_svfiprintf_r+0xd4>
 800de9c:	2300      	movs	r3, #0
 800de9e:	3401      	adds	r4, #1
 800dea0:	9305      	str	r3, [sp, #20]
 800dea2:	4619      	mov	r1, r3
 800dea4:	f04f 0c0a 	mov.w	ip, #10
 800dea8:	4620      	mov	r0, r4
 800deaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800deae:	3a30      	subs	r2, #48	; 0x30
 800deb0:	2a09      	cmp	r2, #9
 800deb2:	d903      	bls.n	800debc <_svfiprintf_r+0x1a8>
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d0c5      	beq.n	800de44 <_svfiprintf_r+0x130>
 800deb8:	9105      	str	r1, [sp, #20]
 800deba:	e7c3      	b.n	800de44 <_svfiprintf_r+0x130>
 800debc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dec0:	4604      	mov	r4, r0
 800dec2:	2301      	movs	r3, #1
 800dec4:	e7f0      	b.n	800dea8 <_svfiprintf_r+0x194>
 800dec6:	ab03      	add	r3, sp, #12
 800dec8:	9300      	str	r3, [sp, #0]
 800deca:	462a      	mov	r2, r5
 800decc:	4b0f      	ldr	r3, [pc, #60]	; (800df0c <_svfiprintf_r+0x1f8>)
 800dece:	a904      	add	r1, sp, #16
 800ded0:	4638      	mov	r0, r7
 800ded2:	f7fd ffcb 	bl	800be6c <_printf_float>
 800ded6:	1c42      	adds	r2, r0, #1
 800ded8:	4606      	mov	r6, r0
 800deda:	d1d6      	bne.n	800de8a <_svfiprintf_r+0x176>
 800dedc:	89ab      	ldrh	r3, [r5, #12]
 800dede:	065b      	lsls	r3, r3, #25
 800dee0:	f53f af2c 	bmi.w	800dd3c <_svfiprintf_r+0x28>
 800dee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dee6:	b01d      	add	sp, #116	; 0x74
 800dee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deec:	ab03      	add	r3, sp, #12
 800deee:	9300      	str	r3, [sp, #0]
 800def0:	462a      	mov	r2, r5
 800def2:	4b06      	ldr	r3, [pc, #24]	; (800df0c <_svfiprintf_r+0x1f8>)
 800def4:	a904      	add	r1, sp, #16
 800def6:	4638      	mov	r0, r7
 800def8:	f7fe fa5c 	bl	800c3b4 <_printf_i>
 800defc:	e7eb      	b.n	800ded6 <_svfiprintf_r+0x1c2>
 800defe:	bf00      	nop
 800df00:	0801085c 	.word	0x0801085c
 800df04:	08010866 	.word	0x08010866
 800df08:	0800be6d 	.word	0x0800be6d
 800df0c:	0800dc5d 	.word	0x0800dc5d
 800df10:	08010862 	.word	0x08010862

0800df14 <_sbrk_r>:
 800df14:	b538      	push	{r3, r4, r5, lr}
 800df16:	4d06      	ldr	r5, [pc, #24]	; (800df30 <_sbrk_r+0x1c>)
 800df18:	2300      	movs	r3, #0
 800df1a:	4604      	mov	r4, r0
 800df1c:	4608      	mov	r0, r1
 800df1e:	602b      	str	r3, [r5, #0]
 800df20:	f7f3 fca4 	bl	800186c <_sbrk>
 800df24:	1c43      	adds	r3, r0, #1
 800df26:	d102      	bne.n	800df2e <_sbrk_r+0x1a>
 800df28:	682b      	ldr	r3, [r5, #0]
 800df2a:	b103      	cbz	r3, 800df2e <_sbrk_r+0x1a>
 800df2c:	6023      	str	r3, [r4, #0]
 800df2e:	bd38      	pop	{r3, r4, r5, pc}
 800df30:	2000227c 	.word	0x2000227c

0800df34 <__assert_func>:
 800df34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df36:	4614      	mov	r4, r2
 800df38:	461a      	mov	r2, r3
 800df3a:	4b09      	ldr	r3, [pc, #36]	; (800df60 <__assert_func+0x2c>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4605      	mov	r5, r0
 800df40:	68d8      	ldr	r0, [r3, #12]
 800df42:	b14c      	cbz	r4, 800df58 <__assert_func+0x24>
 800df44:	4b07      	ldr	r3, [pc, #28]	; (800df64 <__assert_func+0x30>)
 800df46:	9100      	str	r1, [sp, #0]
 800df48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df4c:	4906      	ldr	r1, [pc, #24]	; (800df68 <__assert_func+0x34>)
 800df4e:	462b      	mov	r3, r5
 800df50:	f000 f80e 	bl	800df70 <fiprintf>
 800df54:	f000 faac 	bl	800e4b0 <abort>
 800df58:	4b04      	ldr	r3, [pc, #16]	; (800df6c <__assert_func+0x38>)
 800df5a:	461c      	mov	r4, r3
 800df5c:	e7f3      	b.n	800df46 <__assert_func+0x12>
 800df5e:	bf00      	nop
 800df60:	20000178 	.word	0x20000178
 800df64:	0801086d 	.word	0x0801086d
 800df68:	0801087a 	.word	0x0801087a
 800df6c:	080108a8 	.word	0x080108a8

0800df70 <fiprintf>:
 800df70:	b40e      	push	{r1, r2, r3}
 800df72:	b503      	push	{r0, r1, lr}
 800df74:	4601      	mov	r1, r0
 800df76:	ab03      	add	r3, sp, #12
 800df78:	4805      	ldr	r0, [pc, #20]	; (800df90 <fiprintf+0x20>)
 800df7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800df7e:	6800      	ldr	r0, [r0, #0]
 800df80:	9301      	str	r3, [sp, #4]
 800df82:	f000 f897 	bl	800e0b4 <_vfiprintf_r>
 800df86:	b002      	add	sp, #8
 800df88:	f85d eb04 	ldr.w	lr, [sp], #4
 800df8c:	b003      	add	sp, #12
 800df8e:	4770      	bx	lr
 800df90:	20000178 	.word	0x20000178

0800df94 <__ascii_mbtowc>:
 800df94:	b082      	sub	sp, #8
 800df96:	b901      	cbnz	r1, 800df9a <__ascii_mbtowc+0x6>
 800df98:	a901      	add	r1, sp, #4
 800df9a:	b142      	cbz	r2, 800dfae <__ascii_mbtowc+0x1a>
 800df9c:	b14b      	cbz	r3, 800dfb2 <__ascii_mbtowc+0x1e>
 800df9e:	7813      	ldrb	r3, [r2, #0]
 800dfa0:	600b      	str	r3, [r1, #0]
 800dfa2:	7812      	ldrb	r2, [r2, #0]
 800dfa4:	1e10      	subs	r0, r2, #0
 800dfa6:	bf18      	it	ne
 800dfa8:	2001      	movne	r0, #1
 800dfaa:	b002      	add	sp, #8
 800dfac:	4770      	bx	lr
 800dfae:	4610      	mov	r0, r2
 800dfb0:	e7fb      	b.n	800dfaa <__ascii_mbtowc+0x16>
 800dfb2:	f06f 0001 	mvn.w	r0, #1
 800dfb6:	e7f8      	b.n	800dfaa <__ascii_mbtowc+0x16>

0800dfb8 <memmove>:
 800dfb8:	4288      	cmp	r0, r1
 800dfba:	b510      	push	{r4, lr}
 800dfbc:	eb01 0402 	add.w	r4, r1, r2
 800dfc0:	d902      	bls.n	800dfc8 <memmove+0x10>
 800dfc2:	4284      	cmp	r4, r0
 800dfc4:	4623      	mov	r3, r4
 800dfc6:	d807      	bhi.n	800dfd8 <memmove+0x20>
 800dfc8:	1e43      	subs	r3, r0, #1
 800dfca:	42a1      	cmp	r1, r4
 800dfcc:	d008      	beq.n	800dfe0 <memmove+0x28>
 800dfce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dfd6:	e7f8      	b.n	800dfca <memmove+0x12>
 800dfd8:	4402      	add	r2, r0
 800dfda:	4601      	mov	r1, r0
 800dfdc:	428a      	cmp	r2, r1
 800dfde:	d100      	bne.n	800dfe2 <memmove+0x2a>
 800dfe0:	bd10      	pop	{r4, pc}
 800dfe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dfea:	e7f7      	b.n	800dfdc <memmove+0x24>

0800dfec <__malloc_lock>:
 800dfec:	4801      	ldr	r0, [pc, #4]	; (800dff4 <__malloc_lock+0x8>)
 800dfee:	f000 bc1f 	b.w	800e830 <__retarget_lock_acquire_recursive>
 800dff2:	bf00      	nop
 800dff4:	20002280 	.word	0x20002280

0800dff8 <__malloc_unlock>:
 800dff8:	4801      	ldr	r0, [pc, #4]	; (800e000 <__malloc_unlock+0x8>)
 800dffa:	f000 bc1a 	b.w	800e832 <__retarget_lock_release_recursive>
 800dffe:	bf00      	nop
 800e000:	20002280 	.word	0x20002280

0800e004 <_realloc_r>:
 800e004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e008:	4680      	mov	r8, r0
 800e00a:	4614      	mov	r4, r2
 800e00c:	460e      	mov	r6, r1
 800e00e:	b921      	cbnz	r1, 800e01a <_realloc_r+0x16>
 800e010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e014:	4611      	mov	r1, r2
 800e016:	f7ff bdad 	b.w	800db74 <_malloc_r>
 800e01a:	b92a      	cbnz	r2, 800e028 <_realloc_r+0x24>
 800e01c:	f7ff fd3e 	bl	800da9c <_free_r>
 800e020:	4625      	mov	r5, r4
 800e022:	4628      	mov	r0, r5
 800e024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e028:	f000 fc6a 	bl	800e900 <_malloc_usable_size_r>
 800e02c:	4284      	cmp	r4, r0
 800e02e:	4607      	mov	r7, r0
 800e030:	d802      	bhi.n	800e038 <_realloc_r+0x34>
 800e032:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e036:	d812      	bhi.n	800e05e <_realloc_r+0x5a>
 800e038:	4621      	mov	r1, r4
 800e03a:	4640      	mov	r0, r8
 800e03c:	f7ff fd9a 	bl	800db74 <_malloc_r>
 800e040:	4605      	mov	r5, r0
 800e042:	2800      	cmp	r0, #0
 800e044:	d0ed      	beq.n	800e022 <_realloc_r+0x1e>
 800e046:	42bc      	cmp	r4, r7
 800e048:	4622      	mov	r2, r4
 800e04a:	4631      	mov	r1, r6
 800e04c:	bf28      	it	cs
 800e04e:	463a      	movcs	r2, r7
 800e050:	f7ff f97c 	bl	800d34c <memcpy>
 800e054:	4631      	mov	r1, r6
 800e056:	4640      	mov	r0, r8
 800e058:	f7ff fd20 	bl	800da9c <_free_r>
 800e05c:	e7e1      	b.n	800e022 <_realloc_r+0x1e>
 800e05e:	4635      	mov	r5, r6
 800e060:	e7df      	b.n	800e022 <_realloc_r+0x1e>

0800e062 <__sfputc_r>:
 800e062:	6893      	ldr	r3, [r2, #8]
 800e064:	3b01      	subs	r3, #1
 800e066:	2b00      	cmp	r3, #0
 800e068:	b410      	push	{r4}
 800e06a:	6093      	str	r3, [r2, #8]
 800e06c:	da08      	bge.n	800e080 <__sfputc_r+0x1e>
 800e06e:	6994      	ldr	r4, [r2, #24]
 800e070:	42a3      	cmp	r3, r4
 800e072:	db01      	blt.n	800e078 <__sfputc_r+0x16>
 800e074:	290a      	cmp	r1, #10
 800e076:	d103      	bne.n	800e080 <__sfputc_r+0x1e>
 800e078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e07c:	f000 b94a 	b.w	800e314 <__swbuf_r>
 800e080:	6813      	ldr	r3, [r2, #0]
 800e082:	1c58      	adds	r0, r3, #1
 800e084:	6010      	str	r0, [r2, #0]
 800e086:	7019      	strb	r1, [r3, #0]
 800e088:	4608      	mov	r0, r1
 800e08a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <__sfputs_r>:
 800e090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e092:	4606      	mov	r6, r0
 800e094:	460f      	mov	r7, r1
 800e096:	4614      	mov	r4, r2
 800e098:	18d5      	adds	r5, r2, r3
 800e09a:	42ac      	cmp	r4, r5
 800e09c:	d101      	bne.n	800e0a2 <__sfputs_r+0x12>
 800e09e:	2000      	movs	r0, #0
 800e0a0:	e007      	b.n	800e0b2 <__sfputs_r+0x22>
 800e0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0a6:	463a      	mov	r2, r7
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	f7ff ffda 	bl	800e062 <__sfputc_r>
 800e0ae:	1c43      	adds	r3, r0, #1
 800e0b0:	d1f3      	bne.n	800e09a <__sfputs_r+0xa>
 800e0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e0b4 <_vfiprintf_r>:
 800e0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b8:	460d      	mov	r5, r1
 800e0ba:	b09d      	sub	sp, #116	; 0x74
 800e0bc:	4614      	mov	r4, r2
 800e0be:	4698      	mov	r8, r3
 800e0c0:	4606      	mov	r6, r0
 800e0c2:	b118      	cbz	r0, 800e0cc <_vfiprintf_r+0x18>
 800e0c4:	6983      	ldr	r3, [r0, #24]
 800e0c6:	b90b      	cbnz	r3, 800e0cc <_vfiprintf_r+0x18>
 800e0c8:	f000 fb14 	bl	800e6f4 <__sinit>
 800e0cc:	4b89      	ldr	r3, [pc, #548]	; (800e2f4 <_vfiprintf_r+0x240>)
 800e0ce:	429d      	cmp	r5, r3
 800e0d0:	d11b      	bne.n	800e10a <_vfiprintf_r+0x56>
 800e0d2:	6875      	ldr	r5, [r6, #4]
 800e0d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0d6:	07d9      	lsls	r1, r3, #31
 800e0d8:	d405      	bmi.n	800e0e6 <_vfiprintf_r+0x32>
 800e0da:	89ab      	ldrh	r3, [r5, #12]
 800e0dc:	059a      	lsls	r2, r3, #22
 800e0de:	d402      	bmi.n	800e0e6 <_vfiprintf_r+0x32>
 800e0e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0e2:	f000 fba5 	bl	800e830 <__retarget_lock_acquire_recursive>
 800e0e6:	89ab      	ldrh	r3, [r5, #12]
 800e0e8:	071b      	lsls	r3, r3, #28
 800e0ea:	d501      	bpl.n	800e0f0 <_vfiprintf_r+0x3c>
 800e0ec:	692b      	ldr	r3, [r5, #16]
 800e0ee:	b9eb      	cbnz	r3, 800e12c <_vfiprintf_r+0x78>
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	f000 f96e 	bl	800e3d4 <__swsetup_r>
 800e0f8:	b1c0      	cbz	r0, 800e12c <_vfiprintf_r+0x78>
 800e0fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0fc:	07dc      	lsls	r4, r3, #31
 800e0fe:	d50e      	bpl.n	800e11e <_vfiprintf_r+0x6a>
 800e100:	f04f 30ff 	mov.w	r0, #4294967295
 800e104:	b01d      	add	sp, #116	; 0x74
 800e106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e10a:	4b7b      	ldr	r3, [pc, #492]	; (800e2f8 <_vfiprintf_r+0x244>)
 800e10c:	429d      	cmp	r5, r3
 800e10e:	d101      	bne.n	800e114 <_vfiprintf_r+0x60>
 800e110:	68b5      	ldr	r5, [r6, #8]
 800e112:	e7df      	b.n	800e0d4 <_vfiprintf_r+0x20>
 800e114:	4b79      	ldr	r3, [pc, #484]	; (800e2fc <_vfiprintf_r+0x248>)
 800e116:	429d      	cmp	r5, r3
 800e118:	bf08      	it	eq
 800e11a:	68f5      	ldreq	r5, [r6, #12]
 800e11c:	e7da      	b.n	800e0d4 <_vfiprintf_r+0x20>
 800e11e:	89ab      	ldrh	r3, [r5, #12]
 800e120:	0598      	lsls	r0, r3, #22
 800e122:	d4ed      	bmi.n	800e100 <_vfiprintf_r+0x4c>
 800e124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e126:	f000 fb84 	bl	800e832 <__retarget_lock_release_recursive>
 800e12a:	e7e9      	b.n	800e100 <_vfiprintf_r+0x4c>
 800e12c:	2300      	movs	r3, #0
 800e12e:	9309      	str	r3, [sp, #36]	; 0x24
 800e130:	2320      	movs	r3, #32
 800e132:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e136:	f8cd 800c 	str.w	r8, [sp, #12]
 800e13a:	2330      	movs	r3, #48	; 0x30
 800e13c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e300 <_vfiprintf_r+0x24c>
 800e140:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e144:	f04f 0901 	mov.w	r9, #1
 800e148:	4623      	mov	r3, r4
 800e14a:	469a      	mov	sl, r3
 800e14c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e150:	b10a      	cbz	r2, 800e156 <_vfiprintf_r+0xa2>
 800e152:	2a25      	cmp	r2, #37	; 0x25
 800e154:	d1f9      	bne.n	800e14a <_vfiprintf_r+0x96>
 800e156:	ebba 0b04 	subs.w	fp, sl, r4
 800e15a:	d00b      	beq.n	800e174 <_vfiprintf_r+0xc0>
 800e15c:	465b      	mov	r3, fp
 800e15e:	4622      	mov	r2, r4
 800e160:	4629      	mov	r1, r5
 800e162:	4630      	mov	r0, r6
 800e164:	f7ff ff94 	bl	800e090 <__sfputs_r>
 800e168:	3001      	adds	r0, #1
 800e16a:	f000 80aa 	beq.w	800e2c2 <_vfiprintf_r+0x20e>
 800e16e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e170:	445a      	add	r2, fp
 800e172:	9209      	str	r2, [sp, #36]	; 0x24
 800e174:	f89a 3000 	ldrb.w	r3, [sl]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	f000 80a2 	beq.w	800e2c2 <_vfiprintf_r+0x20e>
 800e17e:	2300      	movs	r3, #0
 800e180:	f04f 32ff 	mov.w	r2, #4294967295
 800e184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e188:	f10a 0a01 	add.w	sl, sl, #1
 800e18c:	9304      	str	r3, [sp, #16]
 800e18e:	9307      	str	r3, [sp, #28]
 800e190:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e194:	931a      	str	r3, [sp, #104]	; 0x68
 800e196:	4654      	mov	r4, sl
 800e198:	2205      	movs	r2, #5
 800e19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e19e:	4858      	ldr	r0, [pc, #352]	; (800e300 <_vfiprintf_r+0x24c>)
 800e1a0:	f7f2 f82e 	bl	8000200 <memchr>
 800e1a4:	9a04      	ldr	r2, [sp, #16]
 800e1a6:	b9d8      	cbnz	r0, 800e1e0 <_vfiprintf_r+0x12c>
 800e1a8:	06d1      	lsls	r1, r2, #27
 800e1aa:	bf44      	itt	mi
 800e1ac:	2320      	movmi	r3, #32
 800e1ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1b2:	0713      	lsls	r3, r2, #28
 800e1b4:	bf44      	itt	mi
 800e1b6:	232b      	movmi	r3, #43	; 0x2b
 800e1b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e1c0:	2b2a      	cmp	r3, #42	; 0x2a
 800e1c2:	d015      	beq.n	800e1f0 <_vfiprintf_r+0x13c>
 800e1c4:	9a07      	ldr	r2, [sp, #28]
 800e1c6:	4654      	mov	r4, sl
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	f04f 0c0a 	mov.w	ip, #10
 800e1ce:	4621      	mov	r1, r4
 800e1d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1d4:	3b30      	subs	r3, #48	; 0x30
 800e1d6:	2b09      	cmp	r3, #9
 800e1d8:	d94e      	bls.n	800e278 <_vfiprintf_r+0x1c4>
 800e1da:	b1b0      	cbz	r0, 800e20a <_vfiprintf_r+0x156>
 800e1dc:	9207      	str	r2, [sp, #28]
 800e1de:	e014      	b.n	800e20a <_vfiprintf_r+0x156>
 800e1e0:	eba0 0308 	sub.w	r3, r0, r8
 800e1e4:	fa09 f303 	lsl.w	r3, r9, r3
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	9304      	str	r3, [sp, #16]
 800e1ec:	46a2      	mov	sl, r4
 800e1ee:	e7d2      	b.n	800e196 <_vfiprintf_r+0xe2>
 800e1f0:	9b03      	ldr	r3, [sp, #12]
 800e1f2:	1d19      	adds	r1, r3, #4
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	9103      	str	r1, [sp, #12]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	bfbb      	ittet	lt
 800e1fc:	425b      	neglt	r3, r3
 800e1fe:	f042 0202 	orrlt.w	r2, r2, #2
 800e202:	9307      	strge	r3, [sp, #28]
 800e204:	9307      	strlt	r3, [sp, #28]
 800e206:	bfb8      	it	lt
 800e208:	9204      	strlt	r2, [sp, #16]
 800e20a:	7823      	ldrb	r3, [r4, #0]
 800e20c:	2b2e      	cmp	r3, #46	; 0x2e
 800e20e:	d10c      	bne.n	800e22a <_vfiprintf_r+0x176>
 800e210:	7863      	ldrb	r3, [r4, #1]
 800e212:	2b2a      	cmp	r3, #42	; 0x2a
 800e214:	d135      	bne.n	800e282 <_vfiprintf_r+0x1ce>
 800e216:	9b03      	ldr	r3, [sp, #12]
 800e218:	1d1a      	adds	r2, r3, #4
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	9203      	str	r2, [sp, #12]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	bfb8      	it	lt
 800e222:	f04f 33ff 	movlt.w	r3, #4294967295
 800e226:	3402      	adds	r4, #2
 800e228:	9305      	str	r3, [sp, #20]
 800e22a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e310 <_vfiprintf_r+0x25c>
 800e22e:	7821      	ldrb	r1, [r4, #0]
 800e230:	2203      	movs	r2, #3
 800e232:	4650      	mov	r0, sl
 800e234:	f7f1 ffe4 	bl	8000200 <memchr>
 800e238:	b140      	cbz	r0, 800e24c <_vfiprintf_r+0x198>
 800e23a:	2340      	movs	r3, #64	; 0x40
 800e23c:	eba0 000a 	sub.w	r0, r0, sl
 800e240:	fa03 f000 	lsl.w	r0, r3, r0
 800e244:	9b04      	ldr	r3, [sp, #16]
 800e246:	4303      	orrs	r3, r0
 800e248:	3401      	adds	r4, #1
 800e24a:	9304      	str	r3, [sp, #16]
 800e24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e250:	482c      	ldr	r0, [pc, #176]	; (800e304 <_vfiprintf_r+0x250>)
 800e252:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e256:	2206      	movs	r2, #6
 800e258:	f7f1 ffd2 	bl	8000200 <memchr>
 800e25c:	2800      	cmp	r0, #0
 800e25e:	d03f      	beq.n	800e2e0 <_vfiprintf_r+0x22c>
 800e260:	4b29      	ldr	r3, [pc, #164]	; (800e308 <_vfiprintf_r+0x254>)
 800e262:	bb1b      	cbnz	r3, 800e2ac <_vfiprintf_r+0x1f8>
 800e264:	9b03      	ldr	r3, [sp, #12]
 800e266:	3307      	adds	r3, #7
 800e268:	f023 0307 	bic.w	r3, r3, #7
 800e26c:	3308      	adds	r3, #8
 800e26e:	9303      	str	r3, [sp, #12]
 800e270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e272:	443b      	add	r3, r7
 800e274:	9309      	str	r3, [sp, #36]	; 0x24
 800e276:	e767      	b.n	800e148 <_vfiprintf_r+0x94>
 800e278:	fb0c 3202 	mla	r2, ip, r2, r3
 800e27c:	460c      	mov	r4, r1
 800e27e:	2001      	movs	r0, #1
 800e280:	e7a5      	b.n	800e1ce <_vfiprintf_r+0x11a>
 800e282:	2300      	movs	r3, #0
 800e284:	3401      	adds	r4, #1
 800e286:	9305      	str	r3, [sp, #20]
 800e288:	4619      	mov	r1, r3
 800e28a:	f04f 0c0a 	mov.w	ip, #10
 800e28e:	4620      	mov	r0, r4
 800e290:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e294:	3a30      	subs	r2, #48	; 0x30
 800e296:	2a09      	cmp	r2, #9
 800e298:	d903      	bls.n	800e2a2 <_vfiprintf_r+0x1ee>
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d0c5      	beq.n	800e22a <_vfiprintf_r+0x176>
 800e29e:	9105      	str	r1, [sp, #20]
 800e2a0:	e7c3      	b.n	800e22a <_vfiprintf_r+0x176>
 800e2a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e7f0      	b.n	800e28e <_vfiprintf_r+0x1da>
 800e2ac:	ab03      	add	r3, sp, #12
 800e2ae:	9300      	str	r3, [sp, #0]
 800e2b0:	462a      	mov	r2, r5
 800e2b2:	4b16      	ldr	r3, [pc, #88]	; (800e30c <_vfiprintf_r+0x258>)
 800e2b4:	a904      	add	r1, sp, #16
 800e2b6:	4630      	mov	r0, r6
 800e2b8:	f7fd fdd8 	bl	800be6c <_printf_float>
 800e2bc:	4607      	mov	r7, r0
 800e2be:	1c78      	adds	r0, r7, #1
 800e2c0:	d1d6      	bne.n	800e270 <_vfiprintf_r+0x1bc>
 800e2c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2c4:	07d9      	lsls	r1, r3, #31
 800e2c6:	d405      	bmi.n	800e2d4 <_vfiprintf_r+0x220>
 800e2c8:	89ab      	ldrh	r3, [r5, #12]
 800e2ca:	059a      	lsls	r2, r3, #22
 800e2cc:	d402      	bmi.n	800e2d4 <_vfiprintf_r+0x220>
 800e2ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2d0:	f000 faaf 	bl	800e832 <__retarget_lock_release_recursive>
 800e2d4:	89ab      	ldrh	r3, [r5, #12]
 800e2d6:	065b      	lsls	r3, r3, #25
 800e2d8:	f53f af12 	bmi.w	800e100 <_vfiprintf_r+0x4c>
 800e2dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2de:	e711      	b.n	800e104 <_vfiprintf_r+0x50>
 800e2e0:	ab03      	add	r3, sp, #12
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	462a      	mov	r2, r5
 800e2e6:	4b09      	ldr	r3, [pc, #36]	; (800e30c <_vfiprintf_r+0x258>)
 800e2e8:	a904      	add	r1, sp, #16
 800e2ea:	4630      	mov	r0, r6
 800e2ec:	f7fe f862 	bl	800c3b4 <_printf_i>
 800e2f0:	e7e4      	b.n	800e2bc <_vfiprintf_r+0x208>
 800e2f2:	bf00      	nop
 800e2f4:	080109d4 	.word	0x080109d4
 800e2f8:	080109f4 	.word	0x080109f4
 800e2fc:	080109b4 	.word	0x080109b4
 800e300:	0801085c 	.word	0x0801085c
 800e304:	08010866 	.word	0x08010866
 800e308:	0800be6d 	.word	0x0800be6d
 800e30c:	0800e091 	.word	0x0800e091
 800e310:	08010862 	.word	0x08010862

0800e314 <__swbuf_r>:
 800e314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e316:	460e      	mov	r6, r1
 800e318:	4614      	mov	r4, r2
 800e31a:	4605      	mov	r5, r0
 800e31c:	b118      	cbz	r0, 800e326 <__swbuf_r+0x12>
 800e31e:	6983      	ldr	r3, [r0, #24]
 800e320:	b90b      	cbnz	r3, 800e326 <__swbuf_r+0x12>
 800e322:	f000 f9e7 	bl	800e6f4 <__sinit>
 800e326:	4b21      	ldr	r3, [pc, #132]	; (800e3ac <__swbuf_r+0x98>)
 800e328:	429c      	cmp	r4, r3
 800e32a:	d12b      	bne.n	800e384 <__swbuf_r+0x70>
 800e32c:	686c      	ldr	r4, [r5, #4]
 800e32e:	69a3      	ldr	r3, [r4, #24]
 800e330:	60a3      	str	r3, [r4, #8]
 800e332:	89a3      	ldrh	r3, [r4, #12]
 800e334:	071a      	lsls	r2, r3, #28
 800e336:	d52f      	bpl.n	800e398 <__swbuf_r+0x84>
 800e338:	6923      	ldr	r3, [r4, #16]
 800e33a:	b36b      	cbz	r3, 800e398 <__swbuf_r+0x84>
 800e33c:	6923      	ldr	r3, [r4, #16]
 800e33e:	6820      	ldr	r0, [r4, #0]
 800e340:	1ac0      	subs	r0, r0, r3
 800e342:	6963      	ldr	r3, [r4, #20]
 800e344:	b2f6      	uxtb	r6, r6
 800e346:	4283      	cmp	r3, r0
 800e348:	4637      	mov	r7, r6
 800e34a:	dc04      	bgt.n	800e356 <__swbuf_r+0x42>
 800e34c:	4621      	mov	r1, r4
 800e34e:	4628      	mov	r0, r5
 800e350:	f000 f93c 	bl	800e5cc <_fflush_r>
 800e354:	bb30      	cbnz	r0, 800e3a4 <__swbuf_r+0x90>
 800e356:	68a3      	ldr	r3, [r4, #8]
 800e358:	3b01      	subs	r3, #1
 800e35a:	60a3      	str	r3, [r4, #8]
 800e35c:	6823      	ldr	r3, [r4, #0]
 800e35e:	1c5a      	adds	r2, r3, #1
 800e360:	6022      	str	r2, [r4, #0]
 800e362:	701e      	strb	r6, [r3, #0]
 800e364:	6963      	ldr	r3, [r4, #20]
 800e366:	3001      	adds	r0, #1
 800e368:	4283      	cmp	r3, r0
 800e36a:	d004      	beq.n	800e376 <__swbuf_r+0x62>
 800e36c:	89a3      	ldrh	r3, [r4, #12]
 800e36e:	07db      	lsls	r3, r3, #31
 800e370:	d506      	bpl.n	800e380 <__swbuf_r+0x6c>
 800e372:	2e0a      	cmp	r6, #10
 800e374:	d104      	bne.n	800e380 <__swbuf_r+0x6c>
 800e376:	4621      	mov	r1, r4
 800e378:	4628      	mov	r0, r5
 800e37a:	f000 f927 	bl	800e5cc <_fflush_r>
 800e37e:	b988      	cbnz	r0, 800e3a4 <__swbuf_r+0x90>
 800e380:	4638      	mov	r0, r7
 800e382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e384:	4b0a      	ldr	r3, [pc, #40]	; (800e3b0 <__swbuf_r+0x9c>)
 800e386:	429c      	cmp	r4, r3
 800e388:	d101      	bne.n	800e38e <__swbuf_r+0x7a>
 800e38a:	68ac      	ldr	r4, [r5, #8]
 800e38c:	e7cf      	b.n	800e32e <__swbuf_r+0x1a>
 800e38e:	4b09      	ldr	r3, [pc, #36]	; (800e3b4 <__swbuf_r+0xa0>)
 800e390:	429c      	cmp	r4, r3
 800e392:	bf08      	it	eq
 800e394:	68ec      	ldreq	r4, [r5, #12]
 800e396:	e7ca      	b.n	800e32e <__swbuf_r+0x1a>
 800e398:	4621      	mov	r1, r4
 800e39a:	4628      	mov	r0, r5
 800e39c:	f000 f81a 	bl	800e3d4 <__swsetup_r>
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d0cb      	beq.n	800e33c <__swbuf_r+0x28>
 800e3a4:	f04f 37ff 	mov.w	r7, #4294967295
 800e3a8:	e7ea      	b.n	800e380 <__swbuf_r+0x6c>
 800e3aa:	bf00      	nop
 800e3ac:	080109d4 	.word	0x080109d4
 800e3b0:	080109f4 	.word	0x080109f4
 800e3b4:	080109b4 	.word	0x080109b4

0800e3b8 <__ascii_wctomb>:
 800e3b8:	b149      	cbz	r1, 800e3ce <__ascii_wctomb+0x16>
 800e3ba:	2aff      	cmp	r2, #255	; 0xff
 800e3bc:	bf85      	ittet	hi
 800e3be:	238a      	movhi	r3, #138	; 0x8a
 800e3c0:	6003      	strhi	r3, [r0, #0]
 800e3c2:	700a      	strbls	r2, [r1, #0]
 800e3c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800e3c8:	bf98      	it	ls
 800e3ca:	2001      	movls	r0, #1
 800e3cc:	4770      	bx	lr
 800e3ce:	4608      	mov	r0, r1
 800e3d0:	4770      	bx	lr
	...

0800e3d4 <__swsetup_r>:
 800e3d4:	4b32      	ldr	r3, [pc, #200]	; (800e4a0 <__swsetup_r+0xcc>)
 800e3d6:	b570      	push	{r4, r5, r6, lr}
 800e3d8:	681d      	ldr	r5, [r3, #0]
 800e3da:	4606      	mov	r6, r0
 800e3dc:	460c      	mov	r4, r1
 800e3de:	b125      	cbz	r5, 800e3ea <__swsetup_r+0x16>
 800e3e0:	69ab      	ldr	r3, [r5, #24]
 800e3e2:	b913      	cbnz	r3, 800e3ea <__swsetup_r+0x16>
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	f000 f985 	bl	800e6f4 <__sinit>
 800e3ea:	4b2e      	ldr	r3, [pc, #184]	; (800e4a4 <__swsetup_r+0xd0>)
 800e3ec:	429c      	cmp	r4, r3
 800e3ee:	d10f      	bne.n	800e410 <__swsetup_r+0x3c>
 800e3f0:	686c      	ldr	r4, [r5, #4]
 800e3f2:	89a3      	ldrh	r3, [r4, #12]
 800e3f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3f8:	0719      	lsls	r1, r3, #28
 800e3fa:	d42c      	bmi.n	800e456 <__swsetup_r+0x82>
 800e3fc:	06dd      	lsls	r5, r3, #27
 800e3fe:	d411      	bmi.n	800e424 <__swsetup_r+0x50>
 800e400:	2309      	movs	r3, #9
 800e402:	6033      	str	r3, [r6, #0]
 800e404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e408:	81a3      	strh	r3, [r4, #12]
 800e40a:	f04f 30ff 	mov.w	r0, #4294967295
 800e40e:	e03e      	b.n	800e48e <__swsetup_r+0xba>
 800e410:	4b25      	ldr	r3, [pc, #148]	; (800e4a8 <__swsetup_r+0xd4>)
 800e412:	429c      	cmp	r4, r3
 800e414:	d101      	bne.n	800e41a <__swsetup_r+0x46>
 800e416:	68ac      	ldr	r4, [r5, #8]
 800e418:	e7eb      	b.n	800e3f2 <__swsetup_r+0x1e>
 800e41a:	4b24      	ldr	r3, [pc, #144]	; (800e4ac <__swsetup_r+0xd8>)
 800e41c:	429c      	cmp	r4, r3
 800e41e:	bf08      	it	eq
 800e420:	68ec      	ldreq	r4, [r5, #12]
 800e422:	e7e6      	b.n	800e3f2 <__swsetup_r+0x1e>
 800e424:	0758      	lsls	r0, r3, #29
 800e426:	d512      	bpl.n	800e44e <__swsetup_r+0x7a>
 800e428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e42a:	b141      	cbz	r1, 800e43e <__swsetup_r+0x6a>
 800e42c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e430:	4299      	cmp	r1, r3
 800e432:	d002      	beq.n	800e43a <__swsetup_r+0x66>
 800e434:	4630      	mov	r0, r6
 800e436:	f7ff fb31 	bl	800da9c <_free_r>
 800e43a:	2300      	movs	r3, #0
 800e43c:	6363      	str	r3, [r4, #52]	; 0x34
 800e43e:	89a3      	ldrh	r3, [r4, #12]
 800e440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e444:	81a3      	strh	r3, [r4, #12]
 800e446:	2300      	movs	r3, #0
 800e448:	6063      	str	r3, [r4, #4]
 800e44a:	6923      	ldr	r3, [r4, #16]
 800e44c:	6023      	str	r3, [r4, #0]
 800e44e:	89a3      	ldrh	r3, [r4, #12]
 800e450:	f043 0308 	orr.w	r3, r3, #8
 800e454:	81a3      	strh	r3, [r4, #12]
 800e456:	6923      	ldr	r3, [r4, #16]
 800e458:	b94b      	cbnz	r3, 800e46e <__swsetup_r+0x9a>
 800e45a:	89a3      	ldrh	r3, [r4, #12]
 800e45c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e464:	d003      	beq.n	800e46e <__swsetup_r+0x9a>
 800e466:	4621      	mov	r1, r4
 800e468:	4630      	mov	r0, r6
 800e46a:	f000 fa09 	bl	800e880 <__smakebuf_r>
 800e46e:	89a0      	ldrh	r0, [r4, #12]
 800e470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e474:	f010 0301 	ands.w	r3, r0, #1
 800e478:	d00a      	beq.n	800e490 <__swsetup_r+0xbc>
 800e47a:	2300      	movs	r3, #0
 800e47c:	60a3      	str	r3, [r4, #8]
 800e47e:	6963      	ldr	r3, [r4, #20]
 800e480:	425b      	negs	r3, r3
 800e482:	61a3      	str	r3, [r4, #24]
 800e484:	6923      	ldr	r3, [r4, #16]
 800e486:	b943      	cbnz	r3, 800e49a <__swsetup_r+0xc6>
 800e488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e48c:	d1ba      	bne.n	800e404 <__swsetup_r+0x30>
 800e48e:	bd70      	pop	{r4, r5, r6, pc}
 800e490:	0781      	lsls	r1, r0, #30
 800e492:	bf58      	it	pl
 800e494:	6963      	ldrpl	r3, [r4, #20]
 800e496:	60a3      	str	r3, [r4, #8]
 800e498:	e7f4      	b.n	800e484 <__swsetup_r+0xb0>
 800e49a:	2000      	movs	r0, #0
 800e49c:	e7f7      	b.n	800e48e <__swsetup_r+0xba>
 800e49e:	bf00      	nop
 800e4a0:	20000178 	.word	0x20000178
 800e4a4:	080109d4 	.word	0x080109d4
 800e4a8:	080109f4 	.word	0x080109f4
 800e4ac:	080109b4 	.word	0x080109b4

0800e4b0 <abort>:
 800e4b0:	b508      	push	{r3, lr}
 800e4b2:	2006      	movs	r0, #6
 800e4b4:	f000 fa54 	bl	800e960 <raise>
 800e4b8:	2001      	movs	r0, #1
 800e4ba:	f7f3 f95f 	bl	800177c <_exit>
	...

0800e4c0 <__sflush_r>:
 800e4c0:	898a      	ldrh	r2, [r1, #12]
 800e4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c6:	4605      	mov	r5, r0
 800e4c8:	0710      	lsls	r0, r2, #28
 800e4ca:	460c      	mov	r4, r1
 800e4cc:	d458      	bmi.n	800e580 <__sflush_r+0xc0>
 800e4ce:	684b      	ldr	r3, [r1, #4]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	dc05      	bgt.n	800e4e0 <__sflush_r+0x20>
 800e4d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	dc02      	bgt.n	800e4e0 <__sflush_r+0x20>
 800e4da:	2000      	movs	r0, #0
 800e4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4e2:	2e00      	cmp	r6, #0
 800e4e4:	d0f9      	beq.n	800e4da <__sflush_r+0x1a>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e4ec:	682f      	ldr	r7, [r5, #0]
 800e4ee:	602b      	str	r3, [r5, #0]
 800e4f0:	d032      	beq.n	800e558 <__sflush_r+0x98>
 800e4f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4f4:	89a3      	ldrh	r3, [r4, #12]
 800e4f6:	075a      	lsls	r2, r3, #29
 800e4f8:	d505      	bpl.n	800e506 <__sflush_r+0x46>
 800e4fa:	6863      	ldr	r3, [r4, #4]
 800e4fc:	1ac0      	subs	r0, r0, r3
 800e4fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e500:	b10b      	cbz	r3, 800e506 <__sflush_r+0x46>
 800e502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e504:	1ac0      	subs	r0, r0, r3
 800e506:	2300      	movs	r3, #0
 800e508:	4602      	mov	r2, r0
 800e50a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e50c:	6a21      	ldr	r1, [r4, #32]
 800e50e:	4628      	mov	r0, r5
 800e510:	47b0      	blx	r6
 800e512:	1c43      	adds	r3, r0, #1
 800e514:	89a3      	ldrh	r3, [r4, #12]
 800e516:	d106      	bne.n	800e526 <__sflush_r+0x66>
 800e518:	6829      	ldr	r1, [r5, #0]
 800e51a:	291d      	cmp	r1, #29
 800e51c:	d82c      	bhi.n	800e578 <__sflush_r+0xb8>
 800e51e:	4a2a      	ldr	r2, [pc, #168]	; (800e5c8 <__sflush_r+0x108>)
 800e520:	40ca      	lsrs	r2, r1
 800e522:	07d6      	lsls	r6, r2, #31
 800e524:	d528      	bpl.n	800e578 <__sflush_r+0xb8>
 800e526:	2200      	movs	r2, #0
 800e528:	6062      	str	r2, [r4, #4]
 800e52a:	04d9      	lsls	r1, r3, #19
 800e52c:	6922      	ldr	r2, [r4, #16]
 800e52e:	6022      	str	r2, [r4, #0]
 800e530:	d504      	bpl.n	800e53c <__sflush_r+0x7c>
 800e532:	1c42      	adds	r2, r0, #1
 800e534:	d101      	bne.n	800e53a <__sflush_r+0x7a>
 800e536:	682b      	ldr	r3, [r5, #0]
 800e538:	b903      	cbnz	r3, 800e53c <__sflush_r+0x7c>
 800e53a:	6560      	str	r0, [r4, #84]	; 0x54
 800e53c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e53e:	602f      	str	r7, [r5, #0]
 800e540:	2900      	cmp	r1, #0
 800e542:	d0ca      	beq.n	800e4da <__sflush_r+0x1a>
 800e544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e548:	4299      	cmp	r1, r3
 800e54a:	d002      	beq.n	800e552 <__sflush_r+0x92>
 800e54c:	4628      	mov	r0, r5
 800e54e:	f7ff faa5 	bl	800da9c <_free_r>
 800e552:	2000      	movs	r0, #0
 800e554:	6360      	str	r0, [r4, #52]	; 0x34
 800e556:	e7c1      	b.n	800e4dc <__sflush_r+0x1c>
 800e558:	6a21      	ldr	r1, [r4, #32]
 800e55a:	2301      	movs	r3, #1
 800e55c:	4628      	mov	r0, r5
 800e55e:	47b0      	blx	r6
 800e560:	1c41      	adds	r1, r0, #1
 800e562:	d1c7      	bne.n	800e4f4 <__sflush_r+0x34>
 800e564:	682b      	ldr	r3, [r5, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d0c4      	beq.n	800e4f4 <__sflush_r+0x34>
 800e56a:	2b1d      	cmp	r3, #29
 800e56c:	d001      	beq.n	800e572 <__sflush_r+0xb2>
 800e56e:	2b16      	cmp	r3, #22
 800e570:	d101      	bne.n	800e576 <__sflush_r+0xb6>
 800e572:	602f      	str	r7, [r5, #0]
 800e574:	e7b1      	b.n	800e4da <__sflush_r+0x1a>
 800e576:	89a3      	ldrh	r3, [r4, #12]
 800e578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e57c:	81a3      	strh	r3, [r4, #12]
 800e57e:	e7ad      	b.n	800e4dc <__sflush_r+0x1c>
 800e580:	690f      	ldr	r7, [r1, #16]
 800e582:	2f00      	cmp	r7, #0
 800e584:	d0a9      	beq.n	800e4da <__sflush_r+0x1a>
 800e586:	0793      	lsls	r3, r2, #30
 800e588:	680e      	ldr	r6, [r1, #0]
 800e58a:	bf08      	it	eq
 800e58c:	694b      	ldreq	r3, [r1, #20]
 800e58e:	600f      	str	r7, [r1, #0]
 800e590:	bf18      	it	ne
 800e592:	2300      	movne	r3, #0
 800e594:	eba6 0807 	sub.w	r8, r6, r7
 800e598:	608b      	str	r3, [r1, #8]
 800e59a:	f1b8 0f00 	cmp.w	r8, #0
 800e59e:	dd9c      	ble.n	800e4da <__sflush_r+0x1a>
 800e5a0:	6a21      	ldr	r1, [r4, #32]
 800e5a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5a4:	4643      	mov	r3, r8
 800e5a6:	463a      	mov	r2, r7
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	47b0      	blx	r6
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	dc06      	bgt.n	800e5be <__sflush_r+0xfe>
 800e5b0:	89a3      	ldrh	r3, [r4, #12]
 800e5b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5b6:	81a3      	strh	r3, [r4, #12]
 800e5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5bc:	e78e      	b.n	800e4dc <__sflush_r+0x1c>
 800e5be:	4407      	add	r7, r0
 800e5c0:	eba8 0800 	sub.w	r8, r8, r0
 800e5c4:	e7e9      	b.n	800e59a <__sflush_r+0xda>
 800e5c6:	bf00      	nop
 800e5c8:	20400001 	.word	0x20400001

0800e5cc <_fflush_r>:
 800e5cc:	b538      	push	{r3, r4, r5, lr}
 800e5ce:	690b      	ldr	r3, [r1, #16]
 800e5d0:	4605      	mov	r5, r0
 800e5d2:	460c      	mov	r4, r1
 800e5d4:	b913      	cbnz	r3, 800e5dc <_fflush_r+0x10>
 800e5d6:	2500      	movs	r5, #0
 800e5d8:	4628      	mov	r0, r5
 800e5da:	bd38      	pop	{r3, r4, r5, pc}
 800e5dc:	b118      	cbz	r0, 800e5e6 <_fflush_r+0x1a>
 800e5de:	6983      	ldr	r3, [r0, #24]
 800e5e0:	b90b      	cbnz	r3, 800e5e6 <_fflush_r+0x1a>
 800e5e2:	f000 f887 	bl	800e6f4 <__sinit>
 800e5e6:	4b14      	ldr	r3, [pc, #80]	; (800e638 <_fflush_r+0x6c>)
 800e5e8:	429c      	cmp	r4, r3
 800e5ea:	d11b      	bne.n	800e624 <_fflush_r+0x58>
 800e5ec:	686c      	ldr	r4, [r5, #4]
 800e5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d0ef      	beq.n	800e5d6 <_fflush_r+0xa>
 800e5f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e5f8:	07d0      	lsls	r0, r2, #31
 800e5fa:	d404      	bmi.n	800e606 <_fflush_r+0x3a>
 800e5fc:	0599      	lsls	r1, r3, #22
 800e5fe:	d402      	bmi.n	800e606 <_fflush_r+0x3a>
 800e600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e602:	f000 f915 	bl	800e830 <__retarget_lock_acquire_recursive>
 800e606:	4628      	mov	r0, r5
 800e608:	4621      	mov	r1, r4
 800e60a:	f7ff ff59 	bl	800e4c0 <__sflush_r>
 800e60e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e610:	07da      	lsls	r2, r3, #31
 800e612:	4605      	mov	r5, r0
 800e614:	d4e0      	bmi.n	800e5d8 <_fflush_r+0xc>
 800e616:	89a3      	ldrh	r3, [r4, #12]
 800e618:	059b      	lsls	r3, r3, #22
 800e61a:	d4dd      	bmi.n	800e5d8 <_fflush_r+0xc>
 800e61c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e61e:	f000 f908 	bl	800e832 <__retarget_lock_release_recursive>
 800e622:	e7d9      	b.n	800e5d8 <_fflush_r+0xc>
 800e624:	4b05      	ldr	r3, [pc, #20]	; (800e63c <_fflush_r+0x70>)
 800e626:	429c      	cmp	r4, r3
 800e628:	d101      	bne.n	800e62e <_fflush_r+0x62>
 800e62a:	68ac      	ldr	r4, [r5, #8]
 800e62c:	e7df      	b.n	800e5ee <_fflush_r+0x22>
 800e62e:	4b04      	ldr	r3, [pc, #16]	; (800e640 <_fflush_r+0x74>)
 800e630:	429c      	cmp	r4, r3
 800e632:	bf08      	it	eq
 800e634:	68ec      	ldreq	r4, [r5, #12]
 800e636:	e7da      	b.n	800e5ee <_fflush_r+0x22>
 800e638:	080109d4 	.word	0x080109d4
 800e63c:	080109f4 	.word	0x080109f4
 800e640:	080109b4 	.word	0x080109b4

0800e644 <std>:
 800e644:	2300      	movs	r3, #0
 800e646:	b510      	push	{r4, lr}
 800e648:	4604      	mov	r4, r0
 800e64a:	e9c0 3300 	strd	r3, r3, [r0]
 800e64e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e652:	6083      	str	r3, [r0, #8]
 800e654:	8181      	strh	r1, [r0, #12]
 800e656:	6643      	str	r3, [r0, #100]	; 0x64
 800e658:	81c2      	strh	r2, [r0, #14]
 800e65a:	6183      	str	r3, [r0, #24]
 800e65c:	4619      	mov	r1, r3
 800e65e:	2208      	movs	r2, #8
 800e660:	305c      	adds	r0, #92	; 0x5c
 800e662:	f7fd fb5b 	bl	800bd1c <memset>
 800e666:	4b05      	ldr	r3, [pc, #20]	; (800e67c <std+0x38>)
 800e668:	6263      	str	r3, [r4, #36]	; 0x24
 800e66a:	4b05      	ldr	r3, [pc, #20]	; (800e680 <std+0x3c>)
 800e66c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e66e:	4b05      	ldr	r3, [pc, #20]	; (800e684 <std+0x40>)
 800e670:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e672:	4b05      	ldr	r3, [pc, #20]	; (800e688 <std+0x44>)
 800e674:	6224      	str	r4, [r4, #32]
 800e676:	6323      	str	r3, [r4, #48]	; 0x30
 800e678:	bd10      	pop	{r4, pc}
 800e67a:	bf00      	nop
 800e67c:	0800e999 	.word	0x0800e999
 800e680:	0800e9bb 	.word	0x0800e9bb
 800e684:	0800e9f3 	.word	0x0800e9f3
 800e688:	0800ea17 	.word	0x0800ea17

0800e68c <_cleanup_r>:
 800e68c:	4901      	ldr	r1, [pc, #4]	; (800e694 <_cleanup_r+0x8>)
 800e68e:	f000 b8af 	b.w	800e7f0 <_fwalk_reent>
 800e692:	bf00      	nop
 800e694:	0800e5cd 	.word	0x0800e5cd

0800e698 <__sfmoreglue>:
 800e698:	b570      	push	{r4, r5, r6, lr}
 800e69a:	2268      	movs	r2, #104	; 0x68
 800e69c:	1e4d      	subs	r5, r1, #1
 800e69e:	4355      	muls	r5, r2
 800e6a0:	460e      	mov	r6, r1
 800e6a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e6a6:	f7ff fa65 	bl	800db74 <_malloc_r>
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	b140      	cbz	r0, 800e6c0 <__sfmoreglue+0x28>
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	e9c0 1600 	strd	r1, r6, [r0]
 800e6b4:	300c      	adds	r0, #12
 800e6b6:	60a0      	str	r0, [r4, #8]
 800e6b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e6bc:	f7fd fb2e 	bl	800bd1c <memset>
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	bd70      	pop	{r4, r5, r6, pc}

0800e6c4 <__sfp_lock_acquire>:
 800e6c4:	4801      	ldr	r0, [pc, #4]	; (800e6cc <__sfp_lock_acquire+0x8>)
 800e6c6:	f000 b8b3 	b.w	800e830 <__retarget_lock_acquire_recursive>
 800e6ca:	bf00      	nop
 800e6cc:	20002281 	.word	0x20002281

0800e6d0 <__sfp_lock_release>:
 800e6d0:	4801      	ldr	r0, [pc, #4]	; (800e6d8 <__sfp_lock_release+0x8>)
 800e6d2:	f000 b8ae 	b.w	800e832 <__retarget_lock_release_recursive>
 800e6d6:	bf00      	nop
 800e6d8:	20002281 	.word	0x20002281

0800e6dc <__sinit_lock_acquire>:
 800e6dc:	4801      	ldr	r0, [pc, #4]	; (800e6e4 <__sinit_lock_acquire+0x8>)
 800e6de:	f000 b8a7 	b.w	800e830 <__retarget_lock_acquire_recursive>
 800e6e2:	bf00      	nop
 800e6e4:	20002282 	.word	0x20002282

0800e6e8 <__sinit_lock_release>:
 800e6e8:	4801      	ldr	r0, [pc, #4]	; (800e6f0 <__sinit_lock_release+0x8>)
 800e6ea:	f000 b8a2 	b.w	800e832 <__retarget_lock_release_recursive>
 800e6ee:	bf00      	nop
 800e6f0:	20002282 	.word	0x20002282

0800e6f4 <__sinit>:
 800e6f4:	b510      	push	{r4, lr}
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	f7ff fff0 	bl	800e6dc <__sinit_lock_acquire>
 800e6fc:	69a3      	ldr	r3, [r4, #24]
 800e6fe:	b11b      	cbz	r3, 800e708 <__sinit+0x14>
 800e700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e704:	f7ff bff0 	b.w	800e6e8 <__sinit_lock_release>
 800e708:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e70c:	6523      	str	r3, [r4, #80]	; 0x50
 800e70e:	4b13      	ldr	r3, [pc, #76]	; (800e75c <__sinit+0x68>)
 800e710:	4a13      	ldr	r2, [pc, #76]	; (800e760 <__sinit+0x6c>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	62a2      	str	r2, [r4, #40]	; 0x28
 800e716:	42a3      	cmp	r3, r4
 800e718:	bf04      	itt	eq
 800e71a:	2301      	moveq	r3, #1
 800e71c:	61a3      	streq	r3, [r4, #24]
 800e71e:	4620      	mov	r0, r4
 800e720:	f000 f820 	bl	800e764 <__sfp>
 800e724:	6060      	str	r0, [r4, #4]
 800e726:	4620      	mov	r0, r4
 800e728:	f000 f81c 	bl	800e764 <__sfp>
 800e72c:	60a0      	str	r0, [r4, #8]
 800e72e:	4620      	mov	r0, r4
 800e730:	f000 f818 	bl	800e764 <__sfp>
 800e734:	2200      	movs	r2, #0
 800e736:	60e0      	str	r0, [r4, #12]
 800e738:	2104      	movs	r1, #4
 800e73a:	6860      	ldr	r0, [r4, #4]
 800e73c:	f7ff ff82 	bl	800e644 <std>
 800e740:	68a0      	ldr	r0, [r4, #8]
 800e742:	2201      	movs	r2, #1
 800e744:	2109      	movs	r1, #9
 800e746:	f7ff ff7d 	bl	800e644 <std>
 800e74a:	68e0      	ldr	r0, [r4, #12]
 800e74c:	2202      	movs	r2, #2
 800e74e:	2112      	movs	r1, #18
 800e750:	f7ff ff78 	bl	800e644 <std>
 800e754:	2301      	movs	r3, #1
 800e756:	61a3      	str	r3, [r4, #24]
 800e758:	e7d2      	b.n	800e700 <__sinit+0xc>
 800e75a:	bf00      	nop
 800e75c:	0801063c 	.word	0x0801063c
 800e760:	0800e68d 	.word	0x0800e68d

0800e764 <__sfp>:
 800e764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e766:	4607      	mov	r7, r0
 800e768:	f7ff ffac 	bl	800e6c4 <__sfp_lock_acquire>
 800e76c:	4b1e      	ldr	r3, [pc, #120]	; (800e7e8 <__sfp+0x84>)
 800e76e:	681e      	ldr	r6, [r3, #0]
 800e770:	69b3      	ldr	r3, [r6, #24]
 800e772:	b913      	cbnz	r3, 800e77a <__sfp+0x16>
 800e774:	4630      	mov	r0, r6
 800e776:	f7ff ffbd 	bl	800e6f4 <__sinit>
 800e77a:	3648      	adds	r6, #72	; 0x48
 800e77c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e780:	3b01      	subs	r3, #1
 800e782:	d503      	bpl.n	800e78c <__sfp+0x28>
 800e784:	6833      	ldr	r3, [r6, #0]
 800e786:	b30b      	cbz	r3, 800e7cc <__sfp+0x68>
 800e788:	6836      	ldr	r6, [r6, #0]
 800e78a:	e7f7      	b.n	800e77c <__sfp+0x18>
 800e78c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e790:	b9d5      	cbnz	r5, 800e7c8 <__sfp+0x64>
 800e792:	4b16      	ldr	r3, [pc, #88]	; (800e7ec <__sfp+0x88>)
 800e794:	60e3      	str	r3, [r4, #12]
 800e796:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e79a:	6665      	str	r5, [r4, #100]	; 0x64
 800e79c:	f000 f847 	bl	800e82e <__retarget_lock_init_recursive>
 800e7a0:	f7ff ff96 	bl	800e6d0 <__sfp_lock_release>
 800e7a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e7a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e7ac:	6025      	str	r5, [r4, #0]
 800e7ae:	61a5      	str	r5, [r4, #24]
 800e7b0:	2208      	movs	r2, #8
 800e7b2:	4629      	mov	r1, r5
 800e7b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e7b8:	f7fd fab0 	bl	800bd1c <memset>
 800e7bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e7c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7c8:	3468      	adds	r4, #104	; 0x68
 800e7ca:	e7d9      	b.n	800e780 <__sfp+0x1c>
 800e7cc:	2104      	movs	r1, #4
 800e7ce:	4638      	mov	r0, r7
 800e7d0:	f7ff ff62 	bl	800e698 <__sfmoreglue>
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	6030      	str	r0, [r6, #0]
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	d1d5      	bne.n	800e788 <__sfp+0x24>
 800e7dc:	f7ff ff78 	bl	800e6d0 <__sfp_lock_release>
 800e7e0:	230c      	movs	r3, #12
 800e7e2:	603b      	str	r3, [r7, #0]
 800e7e4:	e7ee      	b.n	800e7c4 <__sfp+0x60>
 800e7e6:	bf00      	nop
 800e7e8:	0801063c 	.word	0x0801063c
 800e7ec:	ffff0001 	.word	0xffff0001

0800e7f0 <_fwalk_reent>:
 800e7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7f4:	4606      	mov	r6, r0
 800e7f6:	4688      	mov	r8, r1
 800e7f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e7fc:	2700      	movs	r7, #0
 800e7fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e802:	f1b9 0901 	subs.w	r9, r9, #1
 800e806:	d505      	bpl.n	800e814 <_fwalk_reent+0x24>
 800e808:	6824      	ldr	r4, [r4, #0]
 800e80a:	2c00      	cmp	r4, #0
 800e80c:	d1f7      	bne.n	800e7fe <_fwalk_reent+0xe>
 800e80e:	4638      	mov	r0, r7
 800e810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e814:	89ab      	ldrh	r3, [r5, #12]
 800e816:	2b01      	cmp	r3, #1
 800e818:	d907      	bls.n	800e82a <_fwalk_reent+0x3a>
 800e81a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e81e:	3301      	adds	r3, #1
 800e820:	d003      	beq.n	800e82a <_fwalk_reent+0x3a>
 800e822:	4629      	mov	r1, r5
 800e824:	4630      	mov	r0, r6
 800e826:	47c0      	blx	r8
 800e828:	4307      	orrs	r7, r0
 800e82a:	3568      	adds	r5, #104	; 0x68
 800e82c:	e7e9      	b.n	800e802 <_fwalk_reent+0x12>

0800e82e <__retarget_lock_init_recursive>:
 800e82e:	4770      	bx	lr

0800e830 <__retarget_lock_acquire_recursive>:
 800e830:	4770      	bx	lr

0800e832 <__retarget_lock_release_recursive>:
 800e832:	4770      	bx	lr

0800e834 <__swhatbuf_r>:
 800e834:	b570      	push	{r4, r5, r6, lr}
 800e836:	460e      	mov	r6, r1
 800e838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e83c:	2900      	cmp	r1, #0
 800e83e:	b096      	sub	sp, #88	; 0x58
 800e840:	4614      	mov	r4, r2
 800e842:	461d      	mov	r5, r3
 800e844:	da08      	bge.n	800e858 <__swhatbuf_r+0x24>
 800e846:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e84a:	2200      	movs	r2, #0
 800e84c:	602a      	str	r2, [r5, #0]
 800e84e:	061a      	lsls	r2, r3, #24
 800e850:	d410      	bmi.n	800e874 <__swhatbuf_r+0x40>
 800e852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e856:	e00e      	b.n	800e876 <__swhatbuf_r+0x42>
 800e858:	466a      	mov	r2, sp
 800e85a:	f000 f903 	bl	800ea64 <_fstat_r>
 800e85e:	2800      	cmp	r0, #0
 800e860:	dbf1      	blt.n	800e846 <__swhatbuf_r+0x12>
 800e862:	9a01      	ldr	r2, [sp, #4]
 800e864:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e868:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e86c:	425a      	negs	r2, r3
 800e86e:	415a      	adcs	r2, r3
 800e870:	602a      	str	r2, [r5, #0]
 800e872:	e7ee      	b.n	800e852 <__swhatbuf_r+0x1e>
 800e874:	2340      	movs	r3, #64	; 0x40
 800e876:	2000      	movs	r0, #0
 800e878:	6023      	str	r3, [r4, #0]
 800e87a:	b016      	add	sp, #88	; 0x58
 800e87c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e880 <__smakebuf_r>:
 800e880:	898b      	ldrh	r3, [r1, #12]
 800e882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e884:	079d      	lsls	r5, r3, #30
 800e886:	4606      	mov	r6, r0
 800e888:	460c      	mov	r4, r1
 800e88a:	d507      	bpl.n	800e89c <__smakebuf_r+0x1c>
 800e88c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e890:	6023      	str	r3, [r4, #0]
 800e892:	6123      	str	r3, [r4, #16]
 800e894:	2301      	movs	r3, #1
 800e896:	6163      	str	r3, [r4, #20]
 800e898:	b002      	add	sp, #8
 800e89a:	bd70      	pop	{r4, r5, r6, pc}
 800e89c:	ab01      	add	r3, sp, #4
 800e89e:	466a      	mov	r2, sp
 800e8a0:	f7ff ffc8 	bl	800e834 <__swhatbuf_r>
 800e8a4:	9900      	ldr	r1, [sp, #0]
 800e8a6:	4605      	mov	r5, r0
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	f7ff f963 	bl	800db74 <_malloc_r>
 800e8ae:	b948      	cbnz	r0, 800e8c4 <__smakebuf_r+0x44>
 800e8b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8b4:	059a      	lsls	r2, r3, #22
 800e8b6:	d4ef      	bmi.n	800e898 <__smakebuf_r+0x18>
 800e8b8:	f023 0303 	bic.w	r3, r3, #3
 800e8bc:	f043 0302 	orr.w	r3, r3, #2
 800e8c0:	81a3      	strh	r3, [r4, #12]
 800e8c2:	e7e3      	b.n	800e88c <__smakebuf_r+0xc>
 800e8c4:	4b0d      	ldr	r3, [pc, #52]	; (800e8fc <__smakebuf_r+0x7c>)
 800e8c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e8c8:	89a3      	ldrh	r3, [r4, #12]
 800e8ca:	6020      	str	r0, [r4, #0]
 800e8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8d0:	81a3      	strh	r3, [r4, #12]
 800e8d2:	9b00      	ldr	r3, [sp, #0]
 800e8d4:	6163      	str	r3, [r4, #20]
 800e8d6:	9b01      	ldr	r3, [sp, #4]
 800e8d8:	6120      	str	r0, [r4, #16]
 800e8da:	b15b      	cbz	r3, 800e8f4 <__smakebuf_r+0x74>
 800e8dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8e0:	4630      	mov	r0, r6
 800e8e2:	f000 f8d1 	bl	800ea88 <_isatty_r>
 800e8e6:	b128      	cbz	r0, 800e8f4 <__smakebuf_r+0x74>
 800e8e8:	89a3      	ldrh	r3, [r4, #12]
 800e8ea:	f023 0303 	bic.w	r3, r3, #3
 800e8ee:	f043 0301 	orr.w	r3, r3, #1
 800e8f2:	81a3      	strh	r3, [r4, #12]
 800e8f4:	89a0      	ldrh	r0, [r4, #12]
 800e8f6:	4305      	orrs	r5, r0
 800e8f8:	81a5      	strh	r5, [r4, #12]
 800e8fa:	e7cd      	b.n	800e898 <__smakebuf_r+0x18>
 800e8fc:	0800e68d 	.word	0x0800e68d

0800e900 <_malloc_usable_size_r>:
 800e900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e904:	1f18      	subs	r0, r3, #4
 800e906:	2b00      	cmp	r3, #0
 800e908:	bfbc      	itt	lt
 800e90a:	580b      	ldrlt	r3, [r1, r0]
 800e90c:	18c0      	addlt	r0, r0, r3
 800e90e:	4770      	bx	lr

0800e910 <_raise_r>:
 800e910:	291f      	cmp	r1, #31
 800e912:	b538      	push	{r3, r4, r5, lr}
 800e914:	4604      	mov	r4, r0
 800e916:	460d      	mov	r5, r1
 800e918:	d904      	bls.n	800e924 <_raise_r+0x14>
 800e91a:	2316      	movs	r3, #22
 800e91c:	6003      	str	r3, [r0, #0]
 800e91e:	f04f 30ff 	mov.w	r0, #4294967295
 800e922:	bd38      	pop	{r3, r4, r5, pc}
 800e924:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e926:	b112      	cbz	r2, 800e92e <_raise_r+0x1e>
 800e928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e92c:	b94b      	cbnz	r3, 800e942 <_raise_r+0x32>
 800e92e:	4620      	mov	r0, r4
 800e930:	f000 f830 	bl	800e994 <_getpid_r>
 800e934:	462a      	mov	r2, r5
 800e936:	4601      	mov	r1, r0
 800e938:	4620      	mov	r0, r4
 800e93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e93e:	f000 b817 	b.w	800e970 <_kill_r>
 800e942:	2b01      	cmp	r3, #1
 800e944:	d00a      	beq.n	800e95c <_raise_r+0x4c>
 800e946:	1c59      	adds	r1, r3, #1
 800e948:	d103      	bne.n	800e952 <_raise_r+0x42>
 800e94a:	2316      	movs	r3, #22
 800e94c:	6003      	str	r3, [r0, #0]
 800e94e:	2001      	movs	r0, #1
 800e950:	e7e7      	b.n	800e922 <_raise_r+0x12>
 800e952:	2400      	movs	r4, #0
 800e954:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e958:	4628      	mov	r0, r5
 800e95a:	4798      	blx	r3
 800e95c:	2000      	movs	r0, #0
 800e95e:	e7e0      	b.n	800e922 <_raise_r+0x12>

0800e960 <raise>:
 800e960:	4b02      	ldr	r3, [pc, #8]	; (800e96c <raise+0xc>)
 800e962:	4601      	mov	r1, r0
 800e964:	6818      	ldr	r0, [r3, #0]
 800e966:	f7ff bfd3 	b.w	800e910 <_raise_r>
 800e96a:	bf00      	nop
 800e96c:	20000178 	.word	0x20000178

0800e970 <_kill_r>:
 800e970:	b538      	push	{r3, r4, r5, lr}
 800e972:	4d07      	ldr	r5, [pc, #28]	; (800e990 <_kill_r+0x20>)
 800e974:	2300      	movs	r3, #0
 800e976:	4604      	mov	r4, r0
 800e978:	4608      	mov	r0, r1
 800e97a:	4611      	mov	r1, r2
 800e97c:	602b      	str	r3, [r5, #0]
 800e97e:	f7f2 feed 	bl	800175c <_kill>
 800e982:	1c43      	adds	r3, r0, #1
 800e984:	d102      	bne.n	800e98c <_kill_r+0x1c>
 800e986:	682b      	ldr	r3, [r5, #0]
 800e988:	b103      	cbz	r3, 800e98c <_kill_r+0x1c>
 800e98a:	6023      	str	r3, [r4, #0]
 800e98c:	bd38      	pop	{r3, r4, r5, pc}
 800e98e:	bf00      	nop
 800e990:	2000227c 	.word	0x2000227c

0800e994 <_getpid_r>:
 800e994:	f7f2 beda 	b.w	800174c <_getpid>

0800e998 <__sread>:
 800e998:	b510      	push	{r4, lr}
 800e99a:	460c      	mov	r4, r1
 800e99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9a0:	f000 f894 	bl	800eacc <_read_r>
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	bfab      	itete	ge
 800e9a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e9aa:	89a3      	ldrhlt	r3, [r4, #12]
 800e9ac:	181b      	addge	r3, r3, r0
 800e9ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e9b2:	bfac      	ite	ge
 800e9b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e9b6:	81a3      	strhlt	r3, [r4, #12]
 800e9b8:	bd10      	pop	{r4, pc}

0800e9ba <__swrite>:
 800e9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9be:	461f      	mov	r7, r3
 800e9c0:	898b      	ldrh	r3, [r1, #12]
 800e9c2:	05db      	lsls	r3, r3, #23
 800e9c4:	4605      	mov	r5, r0
 800e9c6:	460c      	mov	r4, r1
 800e9c8:	4616      	mov	r6, r2
 800e9ca:	d505      	bpl.n	800e9d8 <__swrite+0x1e>
 800e9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9d0:	2302      	movs	r3, #2
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f000 f868 	bl	800eaa8 <_lseek_r>
 800e9d8:	89a3      	ldrh	r3, [r4, #12]
 800e9da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9e2:	81a3      	strh	r3, [r4, #12]
 800e9e4:	4632      	mov	r2, r6
 800e9e6:	463b      	mov	r3, r7
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ee:	f000 b817 	b.w	800ea20 <_write_r>

0800e9f2 <__sseek>:
 800e9f2:	b510      	push	{r4, lr}
 800e9f4:	460c      	mov	r4, r1
 800e9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9fa:	f000 f855 	bl	800eaa8 <_lseek_r>
 800e9fe:	1c43      	adds	r3, r0, #1
 800ea00:	89a3      	ldrh	r3, [r4, #12]
 800ea02:	bf15      	itete	ne
 800ea04:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea0e:	81a3      	strheq	r3, [r4, #12]
 800ea10:	bf18      	it	ne
 800ea12:	81a3      	strhne	r3, [r4, #12]
 800ea14:	bd10      	pop	{r4, pc}

0800ea16 <__sclose>:
 800ea16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea1a:	f000 b813 	b.w	800ea44 <_close_r>
	...

0800ea20 <_write_r>:
 800ea20:	b538      	push	{r3, r4, r5, lr}
 800ea22:	4d07      	ldr	r5, [pc, #28]	; (800ea40 <_write_r+0x20>)
 800ea24:	4604      	mov	r4, r0
 800ea26:	4608      	mov	r0, r1
 800ea28:	4611      	mov	r1, r2
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	602a      	str	r2, [r5, #0]
 800ea2e:	461a      	mov	r2, r3
 800ea30:	f7f2 fecb 	bl	80017ca <_write>
 800ea34:	1c43      	adds	r3, r0, #1
 800ea36:	d102      	bne.n	800ea3e <_write_r+0x1e>
 800ea38:	682b      	ldr	r3, [r5, #0]
 800ea3a:	b103      	cbz	r3, 800ea3e <_write_r+0x1e>
 800ea3c:	6023      	str	r3, [r4, #0]
 800ea3e:	bd38      	pop	{r3, r4, r5, pc}
 800ea40:	2000227c 	.word	0x2000227c

0800ea44 <_close_r>:
 800ea44:	b538      	push	{r3, r4, r5, lr}
 800ea46:	4d06      	ldr	r5, [pc, #24]	; (800ea60 <_close_r+0x1c>)
 800ea48:	2300      	movs	r3, #0
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	4608      	mov	r0, r1
 800ea4e:	602b      	str	r3, [r5, #0]
 800ea50:	f7f2 fed7 	bl	8001802 <_close>
 800ea54:	1c43      	adds	r3, r0, #1
 800ea56:	d102      	bne.n	800ea5e <_close_r+0x1a>
 800ea58:	682b      	ldr	r3, [r5, #0]
 800ea5a:	b103      	cbz	r3, 800ea5e <_close_r+0x1a>
 800ea5c:	6023      	str	r3, [r4, #0]
 800ea5e:	bd38      	pop	{r3, r4, r5, pc}
 800ea60:	2000227c 	.word	0x2000227c

0800ea64 <_fstat_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4d07      	ldr	r5, [pc, #28]	; (800ea84 <_fstat_r+0x20>)
 800ea68:	2300      	movs	r3, #0
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4608      	mov	r0, r1
 800ea6e:	4611      	mov	r1, r2
 800ea70:	602b      	str	r3, [r5, #0]
 800ea72:	f7f2 fed2 	bl	800181a <_fstat>
 800ea76:	1c43      	adds	r3, r0, #1
 800ea78:	d102      	bne.n	800ea80 <_fstat_r+0x1c>
 800ea7a:	682b      	ldr	r3, [r5, #0]
 800ea7c:	b103      	cbz	r3, 800ea80 <_fstat_r+0x1c>
 800ea7e:	6023      	str	r3, [r4, #0]
 800ea80:	bd38      	pop	{r3, r4, r5, pc}
 800ea82:	bf00      	nop
 800ea84:	2000227c 	.word	0x2000227c

0800ea88 <_isatty_r>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	4d06      	ldr	r5, [pc, #24]	; (800eaa4 <_isatty_r+0x1c>)
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	4604      	mov	r4, r0
 800ea90:	4608      	mov	r0, r1
 800ea92:	602b      	str	r3, [r5, #0]
 800ea94:	f7f2 fed1 	bl	800183a <_isatty>
 800ea98:	1c43      	adds	r3, r0, #1
 800ea9a:	d102      	bne.n	800eaa2 <_isatty_r+0x1a>
 800ea9c:	682b      	ldr	r3, [r5, #0]
 800ea9e:	b103      	cbz	r3, 800eaa2 <_isatty_r+0x1a>
 800eaa0:	6023      	str	r3, [r4, #0]
 800eaa2:	bd38      	pop	{r3, r4, r5, pc}
 800eaa4:	2000227c 	.word	0x2000227c

0800eaa8 <_lseek_r>:
 800eaa8:	b538      	push	{r3, r4, r5, lr}
 800eaaa:	4d07      	ldr	r5, [pc, #28]	; (800eac8 <_lseek_r+0x20>)
 800eaac:	4604      	mov	r4, r0
 800eaae:	4608      	mov	r0, r1
 800eab0:	4611      	mov	r1, r2
 800eab2:	2200      	movs	r2, #0
 800eab4:	602a      	str	r2, [r5, #0]
 800eab6:	461a      	mov	r2, r3
 800eab8:	f7f2 feca 	bl	8001850 <_lseek>
 800eabc:	1c43      	adds	r3, r0, #1
 800eabe:	d102      	bne.n	800eac6 <_lseek_r+0x1e>
 800eac0:	682b      	ldr	r3, [r5, #0]
 800eac2:	b103      	cbz	r3, 800eac6 <_lseek_r+0x1e>
 800eac4:	6023      	str	r3, [r4, #0]
 800eac6:	bd38      	pop	{r3, r4, r5, pc}
 800eac8:	2000227c 	.word	0x2000227c

0800eacc <_read_r>:
 800eacc:	b538      	push	{r3, r4, r5, lr}
 800eace:	4d07      	ldr	r5, [pc, #28]	; (800eaec <_read_r+0x20>)
 800ead0:	4604      	mov	r4, r0
 800ead2:	4608      	mov	r0, r1
 800ead4:	4611      	mov	r1, r2
 800ead6:	2200      	movs	r2, #0
 800ead8:	602a      	str	r2, [r5, #0]
 800eada:	461a      	mov	r2, r3
 800eadc:	f7f2 fe58 	bl	8001790 <_read>
 800eae0:	1c43      	adds	r3, r0, #1
 800eae2:	d102      	bne.n	800eaea <_read_r+0x1e>
 800eae4:	682b      	ldr	r3, [r5, #0]
 800eae6:	b103      	cbz	r3, 800eaea <_read_r+0x1e>
 800eae8:	6023      	str	r3, [r4, #0]
 800eaea:	bd38      	pop	{r3, r4, r5, pc}
 800eaec:	2000227c 	.word	0x2000227c

0800eaf0 <_init>:
 800eaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaf2:	bf00      	nop
 800eaf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaf6:	bc08      	pop	{r3}
 800eaf8:	469e      	mov	lr, r3
 800eafa:	4770      	bx	lr

0800eafc <_fini>:
 800eafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eafe:	bf00      	nop
 800eb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb02:	bc08      	pop	{r3}
 800eb04:	469e      	mov	lr, r3
 800eb06:	4770      	bx	lr
